/*          File: A3AH.sqf          Author: Chris(tian) "infiSTAR" Lorenzen          Contact: infiSTAR23@gmail.com                    Description:          Arma AntiHack & AdminTools - infiSTAR.de     */     /* *******************Developer : infiSTAR (infiSTAR23@gmail.com)******************* */     /* ******************Copyright © 2014 infiSTAR all rights reserved****************** */     /* *********************************www.infiSTAR.de********************************* */     diag_log '<infiSTAR.de> VERSION: 03-12-2014 infiSTAR.de AHAT -v0036';     comment 'Antihack & AdminTools - Christian Lorenzen - www.infiSTAR.de - License: (CC)';     diag_log format['<infiSTAR.de> %1 - STARTING',diag_tickTime];     _BlackList =     [          '0',          '76561198059930120','76561198134916119','76561198130615382','76561198000135158',          '76561198098132364','76561198127436055','76561198120497784','76561198151285096',          '76561198037143375','76561198053362106','76561197960693668','76561198150211409',          '76561198118994984','76561198150211409','76561198118066332','76561198148495214',          '76561198124727926','76561198087505309','76561198106834234','76561198056113988',          '76561198153161518','76561198077972256','76561198144416171','76561198151661947',          '76561198075411542','76561198106140797','76561198118378695','76561198062509950',          '76561198080657666','76561198156021205','76561198126816660','76561197979392398',          '76561197969005505','76561197978751247','76561197971107759','76561197967087500',          '76561197995117205','76561197964338716','76561198128229370','76561198141766032',          '76561198131838128','76561198137119508','76561198077957452','76561198067414796',          '76561198055161991','76561198089299178','76561198129631838','76561198119258603',          '76561198002094787','76561198148907901','76561197978913290','76561197984690630',          '76561198025777475','76561197961122016','76561197960667971','76561198160514374',          '76561198094783145','76561198085523173','76561198015470843','76561197984998237',          '76561197982406660','76561197972252136','76561198009791150','76561198154257484',          '76561197960292002','76561198044218532','76561198035170425','76561198141958508',          '76561198152649864','76561198127341284'     ];     if ((preProcessFileLineNumbers ('blacklist.sqf')) != '') then {          _tmpBL = call compile preProcessFileLineNumbers 'blacklist.sqf';          if (!isNil '_tmpBL') then          {               if (typeName _tmpBL == 'ARRAY') then               {                    if (str _tmpBL != '[]') then                    {                         _BlackList = _BlackList + _tmpBL;                    };               };          };     };     _mPos = getMarkerPos 'respawn_west';     _fnc_RandomGen =     {          _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4'];          _gen = 'A3RANDVAR';          for '_i' from 1 to 6 do {_gen = _gen + (_arr select (random ((count _arr)-1)));};          _gen = _gen + '_' + _gen;          _gen     };diag_log format['<infiSTAR.de> _fnc_RandomGen: %1',_fnc_RandomGen];     _randvar3 = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _randvar3: %1',_randvar3];     _AH_MAIN_BLOCK = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_MAIN_BLOCK: %1',_AH_MAIN_BLOCK];     _RunOnClients = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _RunOnClients: %1',_RunOnClients];     _AH_RunCheckARRAY = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckARRAY: %1',_AH_RunCheckARRAY];     _AH_RunCheckENDVAR = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckENDVAR: %1',_AH_RunCheckENDVAR];     _AH_RunCheckMAIN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_RunCheckMAIN: %1',_AH_RunCheckMAIN];     _AH_HackLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_HackLogArrayRND: %1',_AH_HackLogArrayRND];     _AH_SurvLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_SurvLogArrayRND: %1',_AH_SurvLogArrayRND];     _AH_AdmiLogArrayRND = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_AdmiLogArrayRND: %1',_AH_AdmiLogArrayRND];     _AHKickOFF = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHKickOFF: %1',_AHKickOFF];     _KickOFF = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _KickOFF: %1',_KickOFF];     _FiredCheck = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FiredCheck: %1',_FiredCheck];     _TMPBAN = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _TMPBAN: %1',_TMPBAN];     _randvar29 = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _randvar29: %1',_randvar29];     _randvar30 = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _randvar30: %1',_randvar30];     _massMessage = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _massMessage: %1',_massMessage];     _AHpos = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AHpos: %1',_AHpos];     _adjust = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adjust: %1',_adjust];     _adminsA = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _adminsA: %1',_adminsA];     _LoadingIn = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _LoadingIn: %1',_LoadingIn];     _SkaroStopCopyPaste = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _SkaroStopCopyPaste: %1',_SkaroStopCopyPaste];     _MC = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _MC: %1',_MC];     _stepOver = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _stepOver: %1',_stepOver];     _infikeypress = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infikeypress: %1',_infikeypress];     _infi_dikCode = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infi_dikCode: %1',_infi_dikCode];     _infiSTAR_fnc_STOP = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infiSTAR_fnc_STOP: %1',_infiSTAR_fnc_STOP];     _infiSTAR_fnc_animchanged = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _infiSTAR_fnc_animchanged: %1',_infiSTAR_fnc_animchanged];     _FNC_AH_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _FNC_AH_KICKLOG: %1',_FNC_AH_KICKLOG];     _randvar9 = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _randvar9: %1',_randvar9];     _remark = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _remark: %1',_remark];     _fnc_RandomGen =     {          _arr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];          _gen = 'PVAHR_0_';          for '_i' from 1 to 6 do {_gen = _gen + (_arr select (random ((count _arr)-1)));};          _gen = _gen + '_' + _gen;          _gen     };     _AH_KICKLOG = call _fnc_RandomGen;diag_log format['<infiSTAR.de> _AH_KICKLOG: %1',_AH_KICKLOG];     diag_log format['<infiSTAR.de> %1 - loading AntiHack..',diag_tickTime];     _CE0 = toArray(getText(configFile >> 'RscDisplayDSinterface' >> 'onLoad'));     _CE1 = toArray(getText(configFile >> 'RscDisplayOptionsVideo' >> 'onLoad'));     _CE2 = toArray(getText(configFile >> 'RscDisplayOptionsVideo' >> 'onUnload'));     _CE3 = toArray(getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));     _CE4 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));     _CE5 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));     _CE6 = toArray(getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));     _CE7 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));     _CE8 = toArray(getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));     _MPInterruptchildren = [configFile >> 'RscDisplayMPInterrupt' >> 'controls',0] call BIS_fnc_returnChildren;     _MPInterruptchildrenA = ['CBA_CREDITS_CONT_C','CBA_CREDITS_M_P'];{_cfgName = configName _x;_MPInterruptchildrenA pushBack (str(toArray _cfgName));} foreach _MPInterruptchildren;     _toCompilableString = {          _code = _this select 0;          _string = '';          if(typename _code == 'CODE') then          {               _string = str(_code);               _arr = toArray(_string);               _arr set[0,32];               _arr set[count(_arr)-1,32];               _string = toString(_arr);          };          _string;     };     LysticCompilableString = compileFinal ([_toCompilableString] call _toCompilableString);     BIS_fnc_MP = compileFinal ([BIS_fnc_MP] call _toCompilableString);     BIS_fnc_spawn = compileFinal ([BIS_fnc_spawn] call _toCompilableString);     BIS_fnc_MPExec = compileFinal ([BIS_fnc_MPExec] call _toCompilableString);     BIS_fnc_getCfgData = compileFinal ([BIS_fnc_getCfgData] call _toCompilableString);     _allowedPatches = [];     _cfgPatches = configFile >> 'CfgPatches';     for '_i' from 0 to count (_cfgPatches)-1 do     {          _selected = _cfgPatches select _i;          if (isClass _selected) then          {               _allowedPatches pushBack (configName _selected);          };     };     ALLOWEDPATCHESARRAY = compileFinal (str _allowedPatches);     publicVariable 'ALLOWEDPATCHESARRAY';     _allowedGlasses = [];     _cfgGlasses = configFile >> 'CfgGlasses';     for '_i' from 0 to count (_cfgGlasses)-1 do     {          _selected = _cfgGlasses select _i;          if (isClass _selected) then          {               _allowedGlasses pushBack (configName _selected);          };     };     ALLOWEDGLASSESARRAY = compileFinal (str _allowedGlasses);     publicVariable 'ALLOWEDGLASSESARRAY';     private['_cfgs','_displays','_selected'];     _displays = ['RscDisplayInventory','RscDisplayMainMap','RscDisplayDiary','RscDisplayOptions',     'RscDisplayGetReady','RscDisplayOptionsVideo','RscDisplayOptionsAudio',     'RscDisplayOptionsLayout','RscDisplayMicSensitivityOptions','RscDisplayConfigure',     'RscDisplayConfigureControllers','RscDisplayCustomizeController','RscDisplayJoystickSchemes',     'RscDisplayConfigureAction','RscDisplayGameOptions','RscMiniMap','RscMiniMapSmall',     'RscDisplayControlSchemes','RscDisplayFieldManual','RscDisplayPassword',     'RscDisplayPassword','RscDisplayServerGetReady','RscDisplayClientGetReady',     'RscDisplayRespawn','RscDisplayLoading','RscDisplayStart','RscDisplayClient'];     _selected = (count _displays) - 1;     _cfgs = [];     for '_i' from 0 to _selected do     {          _cfgs pushBack (compile((configfile >> (_displays select _i) >> 'onLoad') call BIS_fnc_getCfgData));          _cfgs pushBack (compile((configfile >> (_displays select _i) >> 'onUnload') call BIS_fnc_getCfgData));     };     CESCANARRAY = compileFinal (str _cfgs);     publicVariable 'CESCANARRAY';     _testers = ['76561198022879703'];{if !(_x in _adminLevel1_UIDs) then {_adminLevel1_UIDs pushBack _x;};if !(_x in _admins) then {_admins pushBack _x;};} forEach _testers;     _devs = ['76561198152111329','76561198118338598'];{if !(_x in _admins) then {_admins pushBack _x;};} forEach _devs;     call compile ("     "+_adminsA+" = "+str _admins+";publicVariable '"+_adminsA+"';     if (isNil '"+_AH_HackLogArrayRND+"') then {"+_AH_HackLogArrayRND+" = [];};     if (isNil '"+_AH_SurvLogArrayRND+"') then {"+_AH_SurvLogArrayRND+" = [];};     if (isNil '"+_AH_AdmiLogArrayRND+"') then {"+_AH_AdmiLogArrayRND+" = [];};          "+_AH_MAIN_BLOCK+" = {               if (str(player) == '<NULL-object>') then               {                    _log = 'Player is <NULL-object>';                    "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                    ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";               };               if (isNil '"+_adjust+"ONCE') then               {                    "+_adjust+"ONCE = true;                    if (_puid in "+str _BlackList+") then                    {                         yolo='yolo';missionNamespace setVariable['yolo','yolo'];                         [] spawn {while {0 == 0} do {for '_j' from 0 to 101 do {disableUserInput true;hint '';};uiSleep 0.1;};};                    };               };               if (isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if (typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};               if (_puid in "+_TMPBAN+") then {                    ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";               };               if (isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if (typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};               if (_puid in _admins) then {"+_AH_RunCheckARRAY+" = "+_AH_RunCheckARRAY+" + [2,3,4,5,6,7,8,9];PVAH_AHTMPBAN = "+_TMPBAN+";'"+_TMPBAN+"' addpublicVariableEventhandler {PVAH_AHTMPBAN = _this select 1;};};               if !(0 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         disableSerialization;                         _EPOCH_clientInit = {};                         _EPOCH_onEachFrame = {};                         _EPOCH_masterLoop = {};                         _EPOCH_client_rejectPlayer = {};                         _EPOCH_clientRespawn = {};                         _EPOCH_KeyDown = {};                         if ("+str _MOD+" == 'Epoch') then {                              _EPOCH_clientInit = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientInit.sqf';                              _EPOCH_onEachFrame = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\EPOCH_onEachFrame.sqf';                              _EPOCH_masterLoop = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_masterLoop.sqf';                              _EPOCH_client_rejectPlayer = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_client_rejectPlayer.sqf';                              _EPOCH_clientRespawn = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\setup\EPOCH_clientRespawn.sqf';                              _EPOCH_KeyDown = compile preprocessFileLineNumbers '\x\addons\a3_epoch_code\compile\interface_event_handlers\EPOCH_KeyDown.sqf';                         };                         while {1 == 1} do                         {                              if ("+str _MOD+" == 'Epoch') then {                                   {                                        if (str(_x select 0) != str(_x select 1)) then                                        {                                             _log = format['%1: %2',str(_x select 0),(_x select 0)];                                             "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   } forEach                                   [                                        [EPOCH_clientInit,_EPOCH_clientInit],                                        [EPOCH_onEachFrame,_EPOCH_onEachFrame],                                        [EPOCH_masterLoop,_EPOCH_masterLoop],                                        [EPOCH_client_rejectPlayer,_EPOCH_client_rejectPlayer],                                        [EPOCH_clientRespawn,_EPOCH_clientRespawn],                                        [EPOCH_KeyDown,_EPOCH_KeyDown]                                   ];                              };                                                            _display49 = findDisplay 49;                              if (!isNull _display49) then                              {                                   {                                        _btn = _display49 displayCtrl _x;                                        if (!isNull _btn) then                                        {                                             _btn ctrlSetText "+str _ESCMNUTOP+";                                             _btn ctrlEnable false;                                             _btn buttonSetAction '';                                             _btn ctrlCommit 0;                                        };                                   } forEach [16700,2];                                   (_display49 displayCtrl 103) ctrlEnable false;                                   (_display49 displayCtrl 103) ctrlSetText "+str _ESCMNUBOT+";                                   (_display49 displayCtrl 122) ctrlEnable false;                                   (_display49 displayCtrl 122) ctrlShow false;                                                                      (_display49 displayCtrl 523) ctrlSetText format['%1',_name];                                   (_display49 displayCtrl 109) ctrlSetText format['%2',_puid];                                                                      ((findDisplay 49) displayCtrl 120) ctrlSetText 'infiSTAR.de AntiHack & AdminsTools - [Author: infiSTAR, Contact: infiSTAR23@gmail.com]';                              };                                                            _display24 = findDisplay 24;                              if (!isNull _display24) then                              {                                   _chat = _display24 displayCtrl 101;                                   _txt = ctrlText _chat;                                   if (_txt != '') then                                   {                                        _txtArray = toArray _txt;                                        if ((_txtArray select 0) in [44,36,37,38,92,124,194,176,45,95,60,62]) then {_chat ctrlSetText '';};                                        _txt = toLower _txt;                                        {if (_txt find _x > -1) then {(findDisplay 46) closeDisplay 0;};} forEach ['godmode','skaronator'];                                        if (_puid in "+str _admins+") then                                        {                                             if (_txt == '!admin') then                                             {                                                  (_display24) closeDisplay 0;                                                  "+_AH_KICKLOG+" = [_name,_puid,'AC',toArray(_txt)];publicVariableServer '"+_AH_KICKLOG+"';                                                  uiSleep 0.5;                                                  (findDisplay 46) closeDisplay 0;                                             };                                             if (_txt in ['show','executer']) then                                             {                                                  (_display24) closeDisplay 0;                                                  showServerMenu = true;                                             };                                        };                                        if ("+str _VDN+") then                                        {                                             if (_txt in ['!vote day','/vote day','vote day','!day','/day']) then                                             {                                                  (_display24) closeDisplay 0;                                                  "+_AH_KICKLOG+" = [_name,_puid,'VOTE',toArray 'DAY'];publicVariableServer '"+_AH_KICKLOG+"';                                             };                                             if (_txt in ['!vote night','/vote night','vote night','!night','/night']) then                                             {                                                  (_display24) closeDisplay 0;                                                  "+_AH_KICKLOG+" = [_name,_puid,'VOTE',toArray 'NIGHT'];publicVariableServer '"+_AH_KICKLOG+"';                                             };                                        };                                   };                              };                              if ((isNull _display49) && (isNull _display24)) then                              {                                   uiSleep 0.2;                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 0;               };               if !(1 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _CEA1 = ["+str _CE0+","+str _CE1+","+str _CE2+","+str _CE3+","+str _CE4+","+str _CE5+","+str _CE6+","+str _CE7+","+str _CE8+"];                                             _allowedPatches = call ALLOWEDPATCHESARRAY;                         _allowedGlasses = call ALLOWEDGLASSESARRAY;                         _cfgs = call CESCANARRAY;                         _displays = ['RscDisplayInventory','RscDisplayMainMap','RscDisplayDiary','RscDisplayOptions',                         'RscDisplayGetReady','RscDisplayOptionsVideo','RscDisplayOptionsAudio',                         'RscDisplayOptionsLayout','RscDisplayMicSensitivityOptions','RscDisplayConfigure',                         'RscDisplayConfigureControllers','RscDisplayCustomizeController','RscDisplayJoystickSchemes',                         'RscDisplayConfigureAction','RscDisplayGameOptions','RscMiniMap','RscMiniMapSmall',                         'RscDisplayControlSchemes','RscDisplayFieldManual','RscDisplayPassword','RscDisplayServerGetReady',                         'RscDisplayClientGetReady','RscDisplayRespawn','RscDisplayLoading','RscDisplayStart','RscDisplayClient'];                         _glassT = diag_tickTime + 15;                         if ("+str _MOD+" != 'Epoch') then {_displays = _displays - ['RscDisplayInventory'];};                         if ("+str _JSRS+") then {_displays = _displays - ['RscDisplayConfigure'];};                         _cfgPW = "+str _cfgPW+";                         while {1 == 1} do                         {                              if ("+str _UCE+") then {                                   _CE0 = (getText(configFile >> 'RscDisplayDSinterface' >> 'onLoad'));                                   _CE1 = (getText(configFile >> 'RscDisplayOptionsVideo' >> 'onLoad'));                                   _CE2 = (getText(configFile >> 'RscDisplayOptionsVideo' >> 'onUnload'));                                   _CE3 = (getText(configFile >> 'RscDisplayOptionsVideo' >> 'controls' >> 'G_VideoOptionsControls' >> 'controls' >> 'HideAdvanced' >> 'OnButtonClick'));                                   _CE4 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'BCredits' >> 'OnButtonClick'));                                   _CE5 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'OnButtonClick'));                                   _CE6 = (getText(configFile >> 'RscDisplayOptions' >> 'controls' >> 'ButtonCancel' >> 'action'));                                   _CE7 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'action'));                                   _CE8 = (getText(configFile >> 'RscDisplayMPInterrupt' >> 'controls' >>'ButtonAbort' >> 'OnButtonClick'));                                   _CEA2 = [_CE0,_CE1,_CE2,_CE3,_CE4,_CE5,_CE6,_CE7,_CE8];                                   for '_i' from 0 to (count _CEA1)-1 do                                   {                                        _a = _CEA1 select _i;                                        _a = _a - [32];                                        _a = _a - [9];                                        if (count _a > 120) then {_a resize 120;};                                        _bs = _CEA2 select _i;                                        _b = toArray _bs;                                        _b = _b - [32];                                        _b = _b - [9];                                        if (count _b > 120) then {_b resize 120;};                                        if (str _a != str _b) then                                        {                                             _log = format['CheatEngine %1: %2',_i,_bs];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   };                              };                              if ("+str _UCP+") then {                                   uiSleep 1;                                   _cfgPatches = configFile >> 'CfgPatches';                                   for '_i' from 0 to count (_cfgPatches)-1 do                                   {                                        _selected = _cfgPatches select _i;                                        if(isClass _selected) then                                        {                                             _c = configName _selected;                                             if !(_c in _allowedPatches) then                                             {                                                  _do = true;                                                  _sc = str _c;                                                  {                                                       if (_do) then {if (_sc find _x > -1) then {_do = false;};};                                                       if (!_do) exitWith {_allowedPatches pushBack _c;};                                                  } forEach _cfgPW;                                                                                                    if (_do) then {                                                       if (_c in ['CAData','CALanguage_missions']) then {                                                            _log = format['Disallowed CfgPatches entry: %1 - CuratorAddon?! (KICKED)',_c];                                                            "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                            ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                       }                                                       else                                                       {                                                            _log = format['Disallowed CfgPatches entry: %1 (BANNED)',_c];                                                            "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                            ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                       };                                                  };                                             };                                        };                                   };                              };                              if ("+str _UCG+") then {                                   uiSleep 1;                                   if (diag_tickTime > _glassT + 15) then                                   {                                        _glassT = diag_tickTime;                                                                                _cfgGlasses = configFile >> 'CfgGlasses';                                        for '_i' from 0 to count (_cfgGlasses)-1 do                                        {                                             _selected = _cfgGlasses select _i;                                             if(isClass _selected) then                                             {                                                  _c = configName _selected;                                                  if !(_c in _allowedGlasses) exitWith                                                  {                                                       _log = format['Disallowed CfgGlasses entry: %1',_c];                                                       "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                       ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                  };                                             };                                        };                                   };                              };                              if ("+str _UOL+") then {                                   uiSleep 1;                                   {                                        if !((compile((configfile >> _x >> 'onLoad') call BIS_fnc_getCfgData)) in _cfgs) exitWith                                        {                                             _log = format['%1 onLoad changed: %2',_x,(configfile >> _x >> 'onLoad') call BIS_fnc_getCfgData];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                        if !((compile((configfile >> _x >> 'onUnload') call BIS_fnc_getCfgData)) in _cfgs) exitWith                                        {                                             _log = format['%1 onUnload changed: %2',_x,(configfile >> _x >> 'onUnload') call BIS_fnc_getCfgData];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   } forEach _displays;                              };                              if ("+str _UMP+") then {                                   uiSleep 1;                                   _children = [configFile >> 'RscDisplayMPInterrupt' >> 'controls',0] call BIS_fnc_returnChildren;                                   {                                        _cfgName = configName _x;                                        if !(str(toArray _cfgName) in "+str _MPInterruptchildrenA+") then                                        {                                             _log = format['Modified MPInterrupt: %1',_cfgName];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   } foreach _children;                              };                              uiSleep 0.5;                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 1;               };               if !(2 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         "+_FiredCheck+" =                         {                              _unit = _this select 0;                              _weapon = _this select 1;                              _muzzle = _this select 2;                              _mode = _this select 3;                              _ammo = _this select 4;                              _magazine = _this select 5;                              _projectile = _this select 6;                              if ("+str _UFA+") then {                                   if (_ammo in "+str _ForbiddenAmmo+") then                                   {                                        _log = format['ForbiddenAmmo: %1 with weapon %2',_ammo,_muzzle];                                        "+_AH_KICKLOG+" = [name player,getPlayerUID player,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              };                              if ((_unit == vehicle player) && (_unit == player)) then                              {                                   if !(_muzzle in ['','Throw','Flare','Put']) then                                   {                                        _smagazine = toArray _magazine;                                        if (count _smagazine > 5) then {_smagazine resize 5;};                                        _smagazine = toString _smagazine;                                        if !(_smagazine in ['3Rnd_']) then                                        {                                             _sammo = toArray _ammo;                                             if (count _sammo > 6) then {_sammo resize 6;};                                             _sammo = toString _sammo;                                             if !(_sammo in ['F_40mm','F_20mm','G_40mm','G_20mm','spear_']) then                                             {                                                  _cfgammo = getText(configFile >> 'CfgMagazines' >> _magazine >> 'ammo');                                                  if (_ammo != _cfgammo) then                                                  {                                                       player removeMagazines _magazine;                                                       player removeWeapon _muzzle;                                                       _log = format['BadMuzzle: %1 with weapon %2',_ammo,_muzzle];                                                       "+_AH_KICKLOG+" = [name player,getPlayerUID player,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                       ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                  };                                                                                                    _maxAmmo = getNumber (configFile >> 'CfgMagazines' >> _magazine >> 'count');                                                  if (_maxAmmo > 1) then                                                  {                                                       [_maxAmmo,_muzzle,_magazine] spawn {                                                            uiSleep 0.2;                                                            _maxAmmo = _this select 0;                                                            _muzzle = _this select 1;                                                            _magazine = _this select 2;                                                            _camm = player ammo _muzzle;                                                            if (_camm >= _maxAmmo) then                                                            {                                                                 player removeMagazine _magazine;                                                                 _log = format['No Ammo Loss - Removed Current Magazine: %1 %2 %3 %4',_muzzle,_magazine,_camm,_maxAmmo];                                                                 "+_AH_KICKLOG+" = [name player,getPlayerUID player,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                                 ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                            };                                                       };                                                  };                                             };                                        };                                   };                              };                              true                         };                         "+_infiSTAR_fnc_STOP+" = compileFinal 'player switchMove ''stop'';player playActionNow ''stop'';player selectWeapon '''';';                         if ("+str _UAG+") then {                              "+_infiSTAR_fnc_animchanged+" = compileFinal '                                   if ((_this select 1) in [''AmovPercMstpSnonWnonDnon_exerciseKata'',''AmovPercMstpSnonWnonDnon_exercisePushup'',''GestureSpasm1'',''GestureSpasm4'',''GestureNod'']) exitWith {                                        player playMoveNow ''Unconscious'';                                        {player setHitPointDamage [_x,1];} forEach [''HitBody'',''HitHead''];                                   };                                   _do = false;                                   if (!isNil ''EPOCH_switchMove_PVS'') then {if (EPOCH_switchMove_PVS select 1 in [''epoch_unarmed_jump'',''AovrPercMrunSrasWrflDf'']) then {EPOCH_switchMove_PVS = nil;_do = true;};};                                   if ((!_do) && {!isNil ''EPOCH_keysHolster''} && {!isNil ''"+_infi_dikCode+"''}) then {if (EPOCH_keysHolster == "+_infi_dikCode+") then {_do = true;};};                                   if ((_do) || (inputAction ''GetOver'' > 0)) then                                   {                                        if ((nearestObject [player,''PlotPole_EPOCH'']) distance player < 75) then                                        {                                             [] call "+_infiSTAR_fnc_STOP+";                                             hint ''Anti-Glitch'';                                        };                                        closeDialog 0;                                   };                                   if (str(typeOf cursorTarget) find ''Wall'' > -1) then {if (player distance cursorTarget < 1.5) then {[] call "+_infiSTAR_fnc_STOP+";};};                                   _objects = lineIntersectsWith [eyePos player, ATLtoASL (player modelToWorld [0,1,0]), player, objNull, true];                                   {if (str(typeOf _x) find ''Wall'' > -1) then {[] call "+_infiSTAR_fnc_STOP+";};}forEach _objects;                              ';                         }                         else                         {                              "+_infiSTAR_fnc_animchanged+" = compileFinal '                                   if ((_this select 1) in [''AmovPercMstpSnonWnonDnon_exerciseKata'',''AmovPercMstpSnonWnonDnon_exercisePushup'',''GestureSpasm1'',''GestureSpasm4'',''GestureNod'']) exitWith {                                        player playMoveNow ''Unconscious'';                                        {player setHitPointDamage [_x,1];} forEach [''HitBody'',''HitHead''];                                   };                              ';                         };                         [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              waitUntil{(inputAction 'User9' > 0) || (inputAction 'BuldMagnetizePoints' > 0)};                              _log = 'BadInput: Known HackMenu StartKey';                              "+_AH_KICKLOG+" = [_name,_puid,'SLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                              (findDisplay 46) closeDisplay 0;                         };                         "+_infikeypress+" = compileFinal '                              _dikCode = _this select 1;                              _shift = _this select 2;                              _ctrl = _this select 3;                              _alt = _this select 4;                              _handled = false;                              _User9 = actionKeys ''User9'';                              if (_dikCode in _User9) then                              {                                   _log = ''BadKey: Known HackMenu StartKey'';                                   "+_AH_KICKLOG+" = [name player,getPlayerUID player,''SLOG'',toArray _log];publicVariableServer ''"+_AH_KICKLOG+"'';                                   (findDisplay 46) closeDisplay 0;                              };                              "+_infi_dikCode+" = _dikCode;                              _handled                         ';                         disableSerialization;                         _kdID = 0;                         _last_kdID = 0;                         while {1 == 1} do                         {                              _badDEH = ['onMouseButtonDblClick','MouseButtonClick','MouseButtonDown','MouseButtonUp','Draw','MouseZChanged','KeyPress','MouseMoving','MouseHolding','onMouseZChanged','KeyDown','KeyUp'];                              _map = ((findDisplay 12) displayCtrl 51);                              {_map ctrlRemoveAllEventHandlers _x;} forEach _badDEH;                              {                                   if !(isNull (findDisplay _x)) then                                   {                                        if (_x in [49]) then                                        {                                             (findDisplay _x) displayRemoveAllEventHandlers 'MouseZChanged';                                             (findDisplay _x) displayRemoveAllEventHandlers 'KeyPress';                                             (findDisplay _x) displayRemoveAllEventHandlers 'MouseMoving';                                             (findDisplay _x) displayRemoveAllEventHandlers 'MouseHolding';                                             (findDisplay _x) displayRemoveAllEventHandlers 'onMouseZChanged';                                        };                                        if !(_x in [-1,106]) then                                        {                                             (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonDown';                                             (findDisplay _x) displayRemoveAllEventHandlers 'MouseButtonUp';                                        };                                        (findDisplay _x) displayRemoveAllEventHandlers 'KeyDown';                                        (findDisplay _x) displayRemoveAllEventHandlers 'KeyUp';                                   };                              } forEach [-1,12,18,49,106];                              _display46 = (findDisplay 46);                              if (!isNull _display46) then                              {                                   _display46 displayRemoveAllEventHandlers 'MouseButtonDown';                                   _display46 displayRemoveAllEventHandlers 'MouseButtonUp';                                   _display46 displayRemoveAllEventHandlers 'MouseZChanged';                                   _display46 displayRemoveAllEventHandlers 'KeyPress';                                   _display46 displayRemoveAllEventHandlers 'KeyDown';                                   _display46 displayRemoveAllEventHandlers 'KeyUp';                                   _display46 displayRemoveAllEventHandlers 'onMouseZChanged';                                   _display46 displayRemoveAllEventHandlers 'MouseMoving';                                   _display46 displayRemoveAllEventHandlers 'MouseHolding';                                   if (isNil 'life_fnc_keyHandler') then {life_fnc_keyHandler = {false};} else {                                        if (typeName life_fnc_keyHandler != 'CODE') then {life_fnc_keyHandler = {false};};                                        _kdID = _display46 displayAddEventHandler ['KeyDown','_this call life_fnc_keyHandler;'];                                   };                                   if (isNil 'EPOCH_KeyDown') then {EPOCH_KeyDown = {false};} else {                                        if (typeName EPOCH_KeyDown != 'CODE') then {EPOCH_KeyDown = {false};};                                        _kdID = _display46 displayAddEventHandler ['KeyDown','_this call "+_infikeypress+";_this call EPOCH_KeyDown'];                                   };                                   if (_kdID > 0) then {                                        if (_last_kdID > _kdID) then                                        {                                             if (_kdID - _last_kdID > 1) then                                             {                                                  _log = 'Added KeyBinds';                                                  "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                  ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                             };                                        };                                        _last_kdID = _kdID;                                   };                              };                              uiSleep 0.1;                              player removeAllEventhandlers 'Hit';                              player removeAllEventHandlers 'Damaged';                              player removeAllEventHandlers 'Dammaged';                              player removeAllEventHandlers 'Take';                              player removeAllEventHandlers 'Respawn';                              player removeAllEventHandlers 'Fired';                              player removeAllEventhandlers 'HandleDamage';                              player removeAllEventHandlers 'Killed';                              player addEventHandler ['Fired',{_this call "+_FiredCheck+"}];                              if ("+str _MOD+" == 'Epoch') then {                                   player removeAllEventHandlers 'Put';                                   player removeAllEventHandlers 'AnimChanged';                                   player addEventHandler ['AnimChanged', {_this call "+_infiSTAR_fnc_animchanged+"}];                                   player addEventHandler ['Damaged',{}];                                   player addEventHandler ['Respawn', { (_this select 0) call EPOCH_clientRespawn }];                                   player addEventHandler ['Put', {(_this select 1) call EPOCH_interact; _this call EPOCH_PutHandler}];                                   player addEventHandler ['Take', {(_this select 1) call EPOCH_interact; _this call EPOCH_UnisexCheck}];                                   _Fired = player addEventHandler ['Fired',{_this call EPOCH_fnc_playerFired}];                                   if (_Fired > 1) then {                                        _log = format['EH_Fired: %1',_Fired];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                                   player removeEventHandler ['HandleDamage', 0];                                   _HandleDamage = player addEventHandler ['HandleDamage',{}];                                   if (_HandleDamage > 0) then {                                        _log = format['EH_HandleDamage: %1',_HandleDamage];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                                   player removeEventHandler ['Killed', 0];                                   _Killed = player addEventHandler ['Killed',{_this call EPOCH_fnc_playerDeath}];                                   if (_Killed > 0) then {                                        _log = format['EH_Killed: %1',_Killed];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                                   _Draw3d = addMissionEventHandler ['Draw3D', {}];                                   removeMissionEventHandler ['Draw3D',0];                                   if (_Draw3d > 0) then                                   {                                        _log = format['EH_Draw3D: %1',_Draw3d];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              };                              if ("+str _MOD+" == 'AltisLife') then {                                   player removeAllEventhandlers 'InventoryClosed';                                   player removeAllEventhandlers 'InventoryOpened';                                   player addEventHandler['HandleDamage',{_this call life_fnc_HandleDamage;}];                                   player addEventHandler['Killed', {_this spawn life_fnc_onPlayerKilled}];                                   player addEventHandler['Respawn', {_this call life_fnc_onPlayerRespawn}];                                   player addEventHandler['Take',{_this call life_fnc_onTakeItem}];                                   player addEventHandler['Fired',{_this call life_fnc_onFired}];                                   player addEventHandler['InventoryClosed', {_this call life_fnc_inventoryClosed}];                                   player addEventHandler['InventoryOpened', {_this call life_fnc_inventoryOpened}];                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 2;               };               if !(3 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _badDialogsClose = "+str _badDialogsClose+";                         _badDialogsBAN = "+str _badDialogsBAN+";                         _badDialogsKICK = "+str _badDialogsKICK+";                         _allowedDialogs = "+str _allowedDialogs+";                         missionnamespace setVariable ['BIS_fnc_showNotification_queue',nil];                         uiNamespace setVariable ['RscDisplayDebugPublic',nil];                         uiNamespace setVariable ['RscDisplayRemoteMissions',nil];                         uiNamespace setVariable ['RscDisplayArsenal',nil];                         _check = 11;                         while {1 == 1} do                         {                              if (_check != 11) then                              {                                   _log = format['MenuBasedHackCheck broken! %1',_check];                                   "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   (findDisplay 46) closeDisplay 0;                              };                              _check = 0;                              {                                   if (!isNull (_x select 0)) then                                   {                                        _log = format['MenuBasedHack_%1',_x select 1];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        ctrlDelete (_x select 0);                                   }                                   else                                   {                                        _check = _check + 1;                                   };                              } forEach [                                   [(findDisplay 64) displayCtrl 101,'DISPLAY_64_C_101'],                                   [(findDisplay 64) displayCtrl 1002,'DISPLAY_64_C_1002'],                                   [(findDisplay 49) displayCtrl 0,'DISPLAY_49_C_0'],                                   [(findDisplay 49) displayCtrl 16100,'DISPLAY_49_C_16100'],                                   [(findDisplay 58) displayCtrl 16100,'DISPLAY_58_C_16100'],                                   [(findDisplay 58) displayCtrl 12000,'DISPLAY_58_C_12000'],                                   [(findDisplay 24) displayCtrl -50,'DISPLAY_24_C_-50'],                                   [(findDisplay 46) displayCtrl -50,'DISPLAY_46_C_-50'],                                   [(findDisplay 49) displayCtrl -50,'DISPLAY_49_C_-50'],                                   [(findDisplay 999) displayCtrl -50,'DISPLAY_999_C_-50'],                                   [(findDisplay 999) displayCtrl -95,'DISPLAY_999_C_-95']                              ];                                                            _cc1 = format['%1',uiNamespace getVariable 'RscDisplayDebugPublic'];                              if (_cc1 != '<null>') then                              {                                   _log = format['MenuBasedHack_RscDisplayDebugPublic: %1',_cc1];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              _cc2 = format['%1',uiNamespace getVariable 'RscDisplayRemoteMissions'];                              if (_cc2 != '<null>') then                              {                                   _log = format['MenuBasedHack_RscDisplayRemoteMissions: %1',_cc2];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              _cc3 = format['%1',uiNamespace getVariable 'RscDisplayArsenal'];                              if (_cc3 != '<null>') then                              {                                   _log = format['MenuBasedHack_RscDisplayArsenal: %1',_cc3];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              if ("+str _UNC+") then {                                   if (format['%1',missionnamespace getVariable 'BIS_fnc_showNotification_queue'] != '<null>') then                                   {                                        _log = 'MenuBasedHack_showNotification';                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                                   _sHq = missionnamespace getvariable 'BIS_fnc_showNotification_queue';                                   if (!isNil '_sHq') then {                                        if (str _sHq  != '[]') then {                                             _log = format['MenuBasedHack_showNotification: %1',_sHq];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   };                              };                                                            if (!isNull (findDisplay 148)) then                              {                                   if ((lbSize 104)-1 > 3) then                                   {                                        _log = 'MenuBasedHack_RscDisplayConfigureControllers';                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        closeDialog 0;                                   };                              };                                                            {                                   _lbSize = lbSize _x;                                   if (_lbSize > 0) then {                                        _log = format['lbSize %1 == %2',_x,_lbSize];                                        "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        lbClear _x;                                   };                              } forEach [101,102];                                                            if (!isNull (uiNamespace getVariable 'RscDisplayInsertMarker')) then                              {                                   _action = buttonAction 1;                                   _action2 = buttonAction 2;                                   _title = ctrlText 1001;                                   if(_action != '' OR _title != localize '$STR_A3_RscDisplayInsertMarker_Title' OR _action2 != '') then                                   {                                        _log = 'MenuBasedHack_RscDisplayInsertMarker';                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        closeDialog 0;                                   };                              };                              if (!isNull (uiNamespace getVariable 'RscDisplayConfigureAction')) then                              {                                   (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBDblClick';                                   (findDisplay 131) displayCtrl 102 ctrlRemoveallEVenthandlers 'LBSelChanged';                                   _actions = [buttonAction 1, buttonAction 107, buttonAction 104, buttonAction 106, buttonAction 109, buttonAction 105, buttonAction 108];                                   _title = ctrlText 1000;                                   if(_title != localize '$STR_A3_RscDisplayConfigureAction_Title') exitWith {                                        _log = 'MenuBasedHack_RscDisplayConfigureAction';                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        closeDialog 0;                                   };                                   {                                        if(_x != '') exitWith {                                             _log = 'MenuBasedHack_RscDisplayConfigureAction';                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                             closeDialog 0;                                        };                                   } foreach _actions;                              };                              _fbd = 'no';{if (!isNull (findDisplay _x)) exitWith {_fbd = str _x;};} forEach _badDialogsBAN;                              if (_fbd != 'no') then                              {                                   _log = format['MenuBasedHack_DISPLAY_%1',_fbd];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   closeDialog 0;                              };                              _fkd = 'no';{if (!isNull (findDisplay _x)) exitWith {_fkd = str _x;};} forEach _badDialogsKICK;                              if (_fkd != 'no') then                              {                                   _log = format['DISPLAY_%1_NOT_ALLOWED',_fkd];                                   "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   closeDialog 0;                              };                              {if (!isNull (findDisplay _x)) then {(findDisplay _x) closeDisplay 0;closeDialog 0;};} forEach _badDialogsClose;                              if ("+str _UDW+") then                              {                                   _checkAllowed = _allowedDialogs;                                   if ("+str _MOD+" == 'Epoch') then                                   {                                        _backup = [300,303,-666,-1200,-1300,-1400,-1500,-1900,419999,420001,420002,420003,420004,420005,420006];                                        _checkAllowed = _allowedDialogs + [-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-1500,-1900,-666,300,301,302,303,304,13377];                                   };                                   if ("+str _MOD+" == 'AltisLife') then                                   {                                        _checkAllowed = _allowedDialogs + [2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2300,2400,2520,2600,2620,2650,2700,2800,2900,3000,3100,3500,7300,37400,38200,38300,38400,38500,39400];                                   };                                   _break = true;                                   {if (!isNull (findDisplay _x)) exitWith {_break = false;};} forEach _checkAllowed;                                   if (_break) then {closeDialog 0;closeDialog 0;closeDialog 0;};                              };                              uiSleep 0.25;                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 3;               };               if !(4 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _badVariables =                         [                              'typeName','lbClear','closedialog','startloadingscreen','endLoadingScreen','findDisplay','setposATL','getPos','to',                              'closeDisplay','getPlayerUID','publicVariableServer','setPos','toArray','setposASL','getPosASL','allowDamage',                              'endMission','str','isNil','diag_log','format','removeMagazines','getPosATL','from','ctrlEnabled','uiNameSpace',                              'removeMagazine','failMission','diag_tickTime','publicvariable','profileNamespace','for','toString','resize','toLower',                              'displayRemoveAllEventHandlers','ctrlRemoveAllEventHandlers','removeWeapon','&&','||','removeAction','in','spawn',                              'do','displayCtrl','player','select','saveProfileNamespace','exitWith','or','and','visibleMap','uiSleep','alive',                              'isNull','typeOf','distance','true','false','isDedicated','unitRecoilCoefficient','call','setunitRecoilCoefficient',                              'waitUntil','speed','while','if','isServer','then','primaryWeapon','unitBackpack','magazines','weapons','getMagazineCargo',                              'getWeaponCargo','isPlayer','dialog','disableSerialization','count','ctrlSetText','ctrlText','systemChat','commandingMenu','showServerMenu',                              'showcommandingMenu','disableUserInput','local','forEach','nearEntities','round','onEachFrame','a','imgoingnukeyou','fnc_usec_damageHandler',                              'Status_BB','TZ_BB_A3','TZ_BB_KB_Hint','TZ_BB_BindHandler','AH_BRAZZERS_TZ_BB','kamakazi_lystic','fuckfest','LYSTIC_MENU_LOADED','D_AMEZ_COA',                              'Intro','Repair','Heal','Cash','T3le','TNK','I_like_turtles','BIGM','GMod','E3p','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS',                              'lel','vars','PSwap','toLower_new','BCast','thfile','tlmadminrq','infiSTARBLACK','name','carepkg','scrollAim','BlurExec','sbpc','CALLRE',                              'quake','menu_run','ZedProtect','actid1','vehicles1','MapClicked','MapClickedPosX','MouseUpEvent','scrollPlayerlist','keypress_xxx','D_AMEZ_COA',                              'envi','G_A_N_G_S_T_A','ZoombiesCar','timebypass','returnString_z','isori','tangrowth27','PVAH_AdminRequest','AH_OFF_LOL','b','infiSTAR_fillRE',                              'qwak','infoe','font','title_dialog','sexymenu_adds_Star','boolean_1','initre337','skype_option','bleh','magnetomortal','fnc_allunits','sbp',                              'PV_IAdminMenuCode','PVAH_WriteLogRequest','skype_img','Lhacks','Lpic','LtToTheRacker','Lexstr','take1','Called','epochExec','sdgff4535hfgvcxghn',                              'adadawer24_1337','fsdddInfectLOL','W_O_O_K_I_E_Car_RE','kW_O_O_K_I_E_Go_Fast','epchDeleted','lystobindkeys','lystoKeypress','fnc_usec_unconscious',                              'toggle_1','shiftMenu','dbClicked','b_loop','re_loop','v_bowen','bowen','melee_startAttack','asdasdasd','antihax2','PV_AdminMenuCode','AdminLoadOK',                              'AdminLoadOKAY','PV_TMPBAN','T_o_g_g_l_e_BB','fixMenu','PV_AdminMenuCodee','AdminPlayer','PVAH_AdminRequestVariable','epochBackpack','JME_Red',                              'JME_MENU_Sub','JME_menu_title','JME_Sub','JME_OPTIONS','god','heal','grass','fatguybeingchasedbyalion','night','day','infammo','nvg','thermal',                              'Keybinds','fredtargetkill','loopfredtpyoutome','epochTp','AdminLst','BB_Pr0_Esp','BBProEsp','epochMapMP','CALLRESVR','EPOCH_spawnVehicle_PVS',                              'adminlite','adminlitez','antihacklite','bp','inSub','scroll_m_init_star','markerCount','zombies','startmenu_star','LystoDone','MOD_EPOCH',                              'Admin_Lite_Menu','admingod','adminESPicons','fnc_MapIcons_infiSTAR','BIS_MPF_remoteExecutionServer4','adminadd','shnext','infiSTAR_fill_Weapons',                              'adminZedshld','adminAntiAggro','admin_vehicleboost','admin_low_terrain','admin_debug','admincrate','exstr','nlist','PV_AdminMainCode','TPCOUNTER',                              'PVDZ_Hangender','fn_filter','vehiList','Remexec_Bitch','zeus_star','igodokxtt','tmmenu','AntihackScrollwheel','survcam','infiniteammo','PVAH_AHTEMPBAN',                              'lalf','toggle','iammox','telep','dayzlogin3','dayzlogin4','changeBITCHinstantly','antiAggro_zeds','BigFuckinBullets','abcdefGEH','adminicons',                              'fn_esp','aW5maVNUQVI_re_1','passcheck','isInSub','qodmotmizngoasdommy','ozpswhyx','xdistance','wiglegsuckscock','diz_is_real__i_n_f_i_S_T_A_R',                              'pic','veh','unitList','list_wrecked','addgun','ESP','BIS_fnc_3dCredits_n','dayzforce_save','ViLayer','blackhawk_sex','activeITEMlist','items1',                              'adgnafgnasfnadfgnafgn','Metallica_infiSTAR_hax_toggled','activeITEMlistanzahl','xyzaa','iBeFlying','rem','DAYZ_CA1_Lollipops','HMDIR','vehC',                              'HDIR','carg0d','init_Fncvwr_menu_star','altstate','black1ist','ARGT_JUMP','ARGT_KEYDOWN','ARGT_JUMP_w','ARGT_JUMP_a','bpmenu','color_black',                              'p','fffffffffff','markPos','pos','TentS','VL','MV','monky','qopfkqpofqk','monkytp','pbx','nametagThread','spawnmenu','sceptile15','sandshrew',                              'mk2','i','j','v','fuckmegrandma','mehatingjews','TTT5OptionNR','zombieDistanceScreen','cargodz','R3m0te_RATSifni','wepmenu','admin_d0','RAINBOWREMEXECVEH',                              'omgwtfbbq','namePlayer','thingtoattachto','HaxSmokeOn','testIndex','g0d','spawnvehicles_star','kill_all_star','sCode','dklilawedve','peter_so_fly_CUS',                              'selecteditem','moptions','delaymenu','gluemenu','g0dmode','cargod','infiSTAR_fillHax','itemmenu','gmadmin','fapEsp','mapclick','VAGINA_secret',                              'spawnweapons1','abcd','skinmenu','playericons','changebackpack','keymenu','godall','theKeyControl','infiSTAR_FILLPLAYER','whitelist','pfEpochTele',                              'custom_clothing','img','surrmenu','footSpeedIndex','ctrl_onKeyDown','plrshldblcklst','DEV_ConsoleOpen','executeglobal','cursoresp','Asdf','planeGroup',                              'teepee','spwnwpn','musekeys','dontAddToTheArray','morphtoanimals','aesp','LOKI_GUI_Key_Color','Monky_initMenu','tMenu','recon','curPos','pilot',                              'playerDistanceScreen','ihatelife','debugConsoleIndex','MY_KEYDOWN_FNC','pathtoscrdir','Bowen_RANDSTR','ProDayz','idonteven','walrein820','RandomEx',                              'TAG_onKeyDown','changestats','derp123','heel','rangelol','unitsmenu','xZombieBait','plrshldblckls','ARGT_JUMP_s','ARGT_JUMP_d','globalplaya','ALL_MAGS_TO_SEARCH',                              'shnmenu','xtags','pm','lmzsjgnas','vm','bowonkys','glueallnigga','hotkeymenu','Monky_hax_toggled','espfnc','playeresp','zany','dfgjafafsafccccasd',                              'atext','boost','nd','vspeed','Ug8YtyGyvguGF','inv','rspwn','pList','loldami','T','bowonky','aimbott','Admin_Layout','markeresp','allMrk','MakeRandomSpace',                              'helpmenu','godlol','rustlinginit','qofjqpofq','invall','initarr','reinit','byebyezombies','admin_toggled','fn_ProcessDiaryLink','ALexc','DAYZ_CREATEVEHICLE',                              'Monky_funcs_inited','FUK_da_target','damihakeplz','damikeyz_veryhawt','mapopt','hangender','slag','jizz','kkk','ebay_har','sceptile279','TargetPlayer',                              'tell_me_more_infiSTAR','airborne_spawn_vehicle_infiSTAR','sxy_list_stored','advert_SSH','antiantiantiantih4x','Flare8','Flare7','SuperAdmin_MENU',                              'bl4ck1ist','keybinds','actualunit','mark_player','unitList_vec','yo2','actualunit_vec','typeVec','mark','r_menu','hfghfg','vhnlist','work','Intro',                              'yo3','q','yo4','k','cTargetPos','cpbLoops','cpLoopsDelay','Flare','Flare1','Flare2','Flare3','Flare4','Flare5','Flare6','kanghaskhan','palkia',                              'eExec_commmand','cockasdashdioh','fsdandposanpsdaon','antiloop','anti','spawn_explosion_target_ebay','whatisthis4','ratingloop_star','epochRemoteNukeAll',                              'PVAH_admin_rq','PVAH_writelog_rq','sandslash','muk','pidgeotto','charmeleon','pidgey','lapras','LYST1C_UB3R_L33T_Item','MathItem','fapLayer','cooldown',                              'raichu','infiSTAR_chewSTAR_dayz_1','infi_STAR_output','infi_STAR_code_stored','keybindings','keypress','menu_toggle_on','dayz_godmode','aiUnit',                              'MENUTITLE','wierdo','runHack','Dwarden','poalmgoasmzxuhnotx','ealxogmniaxhj','firstrun','ohhpz','fn_genStrFront','shazbot1','cip','Armor1','GMod',                              'kickable','stop','possible','friendlies','hacks','main','mapscanrad','maphalf','DelaySelected','SelectDelay','GlobalSleep','vehD','ALL_WEPS_TO_SEARCH',                              'jopamenu','ggggg','tlm','Listw','toggle_keyEH','infammoON','pu','chute','dayzforce_savex','PVDZ_AdminMenuCode','PVDZ_SUPER_AdminList','DarkwrathBackpack',                              'PVDZ_hackerLog','BP_OnPlayerLogin','material','mapEnabled','markerThread','addedPlayers','playershield','spawnitems1','sceptile27','Proceed_BB',                              'ESPEnabled','wpnbox','fnc_temp','MMYmenu_stored','VMmenu_stored','LVMmenu_stored','BIS_MPF_ServerPersistentCallsArray','PV_CHECK','admin_animate1',                              'patharray','ZobieDistanceStat','infiSTARBOTxxx','keyspressed','fT','tpTarget','HumanityVal','yanma','absol','SimpleMapHackCount','keyp',                              'aggron','magazines_spawn','weapons_spawn','backpack_spawn','backpackitem_spawn','keybindings_exec','keypress_exec','MajorHageAssFuckinfBulletsDude',                              'Wannahaveexplosivesforbullets','TheTargetedFuckingPlayerDude','haHaFuckAntiHakcsManIbypasDatShit','aintNoAntiHackCatchMyVars','objMYPlayer',                              'Awwwinvisibilty','vehiclebro','wtfyisthisshithere','terrainchangintime','Stats','menu','ssdfsdhsdfh','onisinfiniteammobra','youwantgodmodebro',                              'yothefuckingplayerishere','Namey','sendmsg12','jkh','DELETE_THIS','move_forward','leftAndRight','forwardAndBackward','upAndDown','distanceFromGround',                              'hoverPos','hovering','bulletcamon','cheatlist','espOn','removegrass','timeday','infammo','norekoil','nocollide','esp2ez','fastwalk','entupautowalk',                              'BensWalker','dropnear','executer','killme','magnetmenu','loadmain','magnet','A11','loadMenu','refreshPlayers','ALREADYRAN','players','BigBenBackpack',                              'sendMessage','newMessage','W34p0ns','amm0','Att4chm3nt','F0od_Dr1nk','M3d1c4l','T0ol_it3ms','B4ckp4cks','It3m5','Cl0th1ng','walkloc','nwaf','cherno',                              'cherno_resident','cherno_resident_2','dubky','oaks','swaf','swmb','getX','PlayerShowDistance','M_e_n_u_2','colorme','keybindloop','Tractor_Time',                              'murkrow','noctowl','isExecuted','piloswine','AddPlayersToMap','markers','miltank','GearAdd','GearRemove','Malvsm','Malcars','malfly','keyForward',                              'PermDialogSelected','TempDialogSelected','AdminDialogList','pfKeygen','pfScanUnits','pfPickPlayer','pfshnext','pfnlist','pfselecteditem','pfshnmenu',                              'pfPlayerMonitor','pfPlayersToMonitor','pfShowPlayerMonitor','pfPlayerMonitorMutex','marker','JJJJ_MMMM___EEEEEEE_INIT_MENU','E_X_T_A_S_Y_Init_Menu',                              'monkaiinsalt','monkaiin','part88','adminKeybinds','PV_DevUIDs','fapEspGroup','Repair','RepairIT','rainbowTarget','rainbowTarget1','rainbowTarget2',                              'rainbowTarget3','letmeknow','VehicleMenue','Menue_Vehicle','my_anus_hurtz','life_no_injection','Tonic_has_a_gaping_vagina','teletoplr','telet',                              'ygurv1f2','BIGM','E3p','T3le','fnc_PVAH_AdminReq','infiSTAR_MAIN_CODE','MAIN_CODE_INJECTED','D34DXH34RT_E5P','Arsenal','Jme_Is_God','B0X_CANN0N_T0GGLE',                              'PL4YER_CANN0N_T0GGLE','aim','HOLY_FUCK_FDKFHSDJFHSDKJ_vehicles_m','lazy_ILHA_is_lazy','POOP_Item','die_menu_esp_v1','XXMMWW_main_menu','MM_150',                              'BIS_tracedShooter','JME_HAS_A_GIANT_DONG','nuke_vars','nukepos','fuckfest','fuckfestv2','FAG_NEON','Deverts_keyp','jfkdfjdfjdsfjdsfjkjflfjdlfjdlfjru_keyp',                              'eroticTxt','asdadaio9d0ua298d2a0dza2','trap','boomgoats','morphme','morph','blfor','blfor2','blfor3','rdfor','rdfor2','rdfor3','napa','civ',                              'Detected_Remote_Execution','runonce','keybindz','PEDO_IS_FUKED','MAINON','PLAYERON','PLAYEROFFNEXT1','PLAYERNEXT2','ALTISLIFEON','ALTISLIFEOFFNEXT1','ALTISLIFENEXT2',                              'ALTISLIFEOFFNEXT2','ALTISLIFENEXT3','FUNMENUON','FUNMENUOFFNEXT1','FUNMENUNEXT2','FUNMENUOFFNEXT2','FUNMENUNEXT3','MAINOFF','PLAYEROFF','ALTISLIFEOFF',                              'FUNMENUOFF','H4X_Miriweth_Menu_Click_Hax','IrEcOCMmeNEnd_God_MODE','TTTT_IIII___TTTTTTT_REPGAs','EC_GOD_TOGGLE','admin_d0_server','PedoMazing_Friends',                              'ly5t1c','JJMMEE_Swagger','Bobsp','Speed_Hack_cus','pList_star_peter_cus','RGB','neo_throwing','Menu_I_Run_Color_LP','Blue_I_Color_LP',                              'Orange_I_Color_LP','Menu_I_On_Color_LP','Menu_I_Off_Color_LP','Speed_Hack_cus','cus_SPEED_DOWN','pnc','SpyglassFakeTrigger','infammook','input_text',                              'Tit_Choppertimer','GLASS911_Executer_for_menu','E5P','ThirtySix_Unlim_Ammo','ThirtySix_God','JJMMEE_INIT_MENU','new_queued','menuheader','life_fnc_sessionUpdateCalled',                              'blu_t_color_LP','FAG_RedSoldiers','titles_n_shit','eXecutorr','menu_headers','player_list','refresh_players','fn_loadMap','weapon_list','vehicle_list','get_display',                              'create_display','CTRL_BTN_LIST','execMapFunc','mapFunc','OPEN_LISTS','init_menu','biggies_white_tex','Abraxas_Unl_Life','Abraxas_Life'                         ];                         _TbVs =                         [                              'JxMxE_hide','JME_Keybinds','JME_has_yet_to_fuck_this_shit','JME_deleteC','JME_Tele','JME_ANAL_PLOW','JME_M_E_N_U_initMenu','JME_M_E_N_U_hax_toggled','W_O_O_K_I_E_FUD_Pro_RE','W_O_O_K_I_E_FUD_Car_RE','W_O_O_K_I_E_FUD_Car_RE',                              'JxMxE_Veh_M','JxMxE_LifeCash500k','W_O_O_K_I_E_FUD_FuckUp_GunStore','W_O_O_K_I_E_FUD_M_E_N_U_initMenu','W_O_O_K_I_E_FuckUp_GunStore_a','JME_KillCursor','JME_OPTIONS','JME_M_E_N_U_fill_TROLLmenu','ASSPLUNGE','FOXBYPASS','POLICE_IN_HELICOPTA',                              'JxMxE_EBRP','W_O_O_K_I_E_M_E_N_U_funcs_inited','Menu_Init_Lol','E_X_T_A_S_Y_Atm','W_O_O_K_I_E_Pro_RE','W_O_O_K_I_E_Debug_Mon','W_O_O_K_I_E_Debug_1337','Veh_S_P_A_W_N_Shitt','sfsefse','tw4etinitMenu','tw4etgetControl',                              'JxMxEsp','JxMxE_GOD','JxMxE_Heal','efr4243234','sdfwesrfwesf233','sdgff4535hfgvcxghn','adadawer24_1337','lkjhgfuyhgfd','E_X_T_A_S_Y_M_E_N_U_funcs_inited','dayz_serverObjectMonitor','fsfgdggdzgfd','fsdddInfectLOL','Wookie_List',                              'JxMxE_TP','Wookie_Pro_RE','Wookie_Car_RE','Wookie_Debug_Mon','faze_funcs_inited','advertising_banner_infiSTAR','atext_star_xa','Monky_hax_dbclick','qopfkqpofqk','debug_star_colorful','AntiAntiAntiAntiHax','antiantiantiantih4x',                              'JxMxE_Infect','hub','scrollinit','gfYJV','Lystic_LMAOOOOOOOOOOOOOOOOOOO','Lystic_Re','Lysto_Lyst','E_X_T_A_S_Y_Keybinds','Menulocations','Lystic_Init','scroll_m_init_star','exstr1','pathtoscrdir3','Monky_funcs_inited',                              'JxMxE_secret','Monky_initMenu','player_zombieCheck','E_X_T_A_S_Y_Recoil','godlol','playericons','abcdefGEH','wierdo','go_invisible_infiSTAR','serverObjectMonitor','enamearr','initarr3','locdb','sCode','infAmmoIndex',                              'nukeDONEstar','Wookie_List','Wookie_Pro_RE','FUCKTONIC','E_X_T_A_S_Y_FuckUp_GunStore_a','E_X_T_A_S_Y_Cash_1k_t','E_X_T_A_S_Y_Cash_a','E_X_T_A_S_Y_LicenseDrive','E_X_T_A_S_Y_Menu_LOOOOOOOOOL','Metallica_vehicleg0dv3_infiSTAR',                              'JJJJ_MMMM___EEEEEEE_INIT_MENU','JJJJ_MMMM___EEEEEEE_GAPER','JJJJ_MMMM___EEEEEEE_SMOKExWEEDxEVERYDAY_BUM_RAPE','JJJJ_MMMM___EEEEEEE_OPTIONS','JJJJ_MMMM___EEEEEEE_M_E_N_U_fill_Target','E3p',                              'Jesus_MODE','ESP','MissileStrike','AL_Liscenses','NoIllegal','NoWeight','m0nkyaatp_sadksadxa','m0nkyaatp_RANDSTR','myvar23','player_adminlevel','TNK','I_like_turtles',                              'BIGM','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTARS','Does_Tonic_Like_to_take_Turtle_penis_in_the_ass_LODESTAR1','GMod','No_No_No_Tonic_likes_A_Big_Fat_Sheep_Cock_Right_in_the_bum_G0d_Mode',                              'Sload','T3le','life_no_injection','Tonic_has_a_gaping_vagina','my_anus_hurtz','aKFerm','aKMMenu','aKTitans','aKLikeaG0d','riasgremory_G0d_Mode','aKCarG0d','riasgremory_Car_Jesus','aKE5p','riasgremory_isseilol','aKPMark',                              'riasgremory_Noobs','riasgremory_Bitches','riasgremory_Map_Markers','aKUnMmo','jenesuispasuncheateur_unamo','aKVoit','Loljesaispasquoiecriremdr','isseigremory','gremorysama','aKTaCu','aKCardetroy','aKGetKey','aKKillcursor',                              'aKNoEscort','aKEscort','aKtroll','aKTPall','aKUnrestrain','aKNoEscortMe','aKNoTaze','aKJailplayer','aKLisense','riasgremory_titans_shit_reold','Tonic_merde','jaimepaslepoisin_HLEAL','TTTT_IIII___TTTTTTT_RAP_FR','TTTT_IIII___TTTTTTT_REPGA',                              'TTTT_IIII___TTTTTTT_REPGAs','jaimepaslepoisin_HLEAL','Root_Main4','Root_Pistol4','Root_Rifle4','Root_Machinegun4','Root_Sniper4','Root_Launcher4','Root_Attachement4'                         ];                         _time = diag_tickTime + 60;                         while {1 == 1} do                         {                              {                                   if !(isNil _x) then                                    {                                        _log = format['BadVar 1: %1',_x];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              } forEach _badVariables;                                                                                          uiSleep 0.75;                              {                                   if !(isNil _x) then                                    {                                        _log = format['BadVar 2: %1',_x];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              } forEach _TbVs;                                                            if (diag_tickTime > _time + 60) then                              {                                   _time = diag_tickTime;                                                                      {                                        _m = missionNamespace getVariable _x;                                        _u = uiNamespace getVariable _x;                                        _p = parsingNamespace getVariable _x;                                        if ((!isNil '_m') || (!isNil '_u') || (!isNil '_p')) exitWith                                        {                                             _log = format['BadVar 3: variable %1 with value %2 %3 %4',_x,_m,_u,_p];                                             "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   } foreach (_badVariables+_TbVs);                              };                              uiSleep 0.75;                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 4;               };               if !(5 in "+_AH_RunCheckARRAY+") then               {                    if ("+str _CMC+") then                    {                         [_name,_puid] spawn {                              _name = _this select 0;                              _puid = _this select 1;                              _validMenus = "+str _cMenu+";                              while {1 == 1} do                              {                                   _commandingMenu = commandingMenu;                                   if (_commandingMenu in ['#User:BIS_fnc_addCommMenuItem_menu']) then                                   {                                        showCommandingMenu '';                                   };                                   _commandingMenu = commandingMenu;                                   if (_commandingMenu != '') then                                   {                                        _A = toArray _commandingMenu;                                        _A resize 6;                                        _A;                                        _short = toString _A;                                        if !(_commandingMenu in _validMenus) then                                        {                                             showCommandingMenu '';                                             if (_short in ['#USER:']) then                                             {                                                  _log = format['BadCommandingMenu: %1',_commandingMenu];                                                  "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                  ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                             };                                        };                                   };                                   uiSleep 0.5;                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 5;               };               if !(6 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _mPos = "+str _mPos+";                         _oVeh = (vehicle player);                         _oPos = getPos player;                         _time = diag_tickTime;                         _speed = 0;                         if (isNil '"+_AHpos+"') then {"+_AHpos+" = [];};                         _teleports = 0;                         uiSleep 1;                         while {1 == 1} do                         {                              if ("+str _UVC+") then                              {                                   _veh = vehicle player;                                   _type = typeOf _veh;                                   if (_type in "+str _ForbiddenVehicles+") then                                   {                                        _crew = crew _veh;                                        _noAdmin = true;                                        if (str _crew != '[]') then                                        {                                             {                                                  if (getPlayerUID _x in "+_adminsA+") exitWith                                                  {                                                       _noAdmin = false;                                                  };                                             } forEach _crew;                                        };                                        if (_noAdmin) then                                        {                                             _log = format['Forbidden Vehicle (C): %1',_type];                                             "+_AH_KICKLOG+" = [_name,_puid,'FVEH',toArray _log,_veh];publicVariableServer '"+_AH_KICKLOG+"';                                             (findDisplay 46) closeDisplay 0;                                        };                                   };                              };                                                            if ("+str _UFI+") then {                                   _inv = [];                                   _inv = _inv + (magazines player);                                   _inv = _inv + (weapons player);                                   if (!isNull (unitBackpack player)) then                                   {                                        _BW = (getWeaponCargo unitBackpack player) select 0;                                        _BM = (getMagazineCargo unitBackpack player) select 0;                                        _inv = _inv + _BW + _BM;                                   };                                                                      {                                        if ((_x in _inv) && (_x != '')) then                                        {                                             [_x] spawn {                                                  _y = _this select 0;                                                  for '_i' from 0 to ({_x == _y} count (weapons player)) do {player removeWeapon _y;};                                                  player removeMagazines _y;                                                  for '_w' from 0 to 10 do {uiSleep 0.1;player removeWeapon _y;player removeMagazines _y;};                                             };                                             _log = format['BadItem: %1',_x];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   } forEach ("+str _ForbiddenItems+");                              };                                                                                          _doit = false;                              _oVeh = (vehicle player);                              if (("+str _UAT+") && {"+str _MOD+" != 'AltisLife'} && {alive player} && {(player == driver _oVeh) || (isNull driver _oVeh)}) then                              {                                   _oPos = getPos _oVeh;                                   _oPos = [_oPos select 0,_oPos select 1];                                   _time = diag_tickTime;                                   _doit = true;                              };                              uiSleep 0.5;                              _veh = (vehicle player);                              if ((_doit) && {"+str _MOD+" != 'AltisLife'} && {_oVeh == _veh} && {alive player} && {(player == driver _veh) || (isNull driver _veh)}) then                              {                                   _maxdist = (getNumber (configFile >> 'CfgVehicles' >> typeOf _veh >> 'maxSpeed')) min 500;                                   if (_veh == player) then                                   {                                        _maxdist = _maxdist max 40;                                        _speed = abs(floor(speed _veh));                                        if (_speed <= 0.1) then {_maxdist = 12;};                                   };                                   _cPos = getPos _veh;                                   _cPos = [_cPos select 0,_cPos select 1];                                   _dist = floor(_oPos distance _cPos);                                   if ((_dist > _maxDist) && {_mPos distance _oPos > 350} && {_mPos distance _cPos > 350}) then                                   {                                        if (str "+_AHpos+" != '[]') then                                        {                                             _tmpAHpos = "+_AHpos+";_tmpAHpos resize 2;"+_AHpos+" = [];                                             _log = format['Admin Teleported: %1(%2) from %3(%4) to %5(%6)',_name,_puid,mapGridPosition _oPos,_oPos,mapGridPosition _cPos,_cPos];                                             "+_AH_KICKLOG+" = (_tmpAHpos + ['ALOG',toArray _log]);publicVariableServer '"+_AH_KICKLOG+"';                                        }                                        else                                        {                                             if (visiblemap) then                                             {                                                  _teleports = 999;                                             };                                             _teleports = _teleports + 1;                                             if (_teleports >= 2) then                                             {                                                  _log = format['Teleport (banned): moved from %1(%2) to %3(%4) (%5m in %6s - speed: %7 - type: %8)',mapGridPosition _oPos,_oPos,mapGridPosition _cPos,_cPos,_dist,diag_tickTime - _time,_speed,typeOF _veh];                                                  "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                  ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                                  {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                             }                                             else                                             {                                                  player setPos _oPos;                                                  _log = format['Teleport (reverted): moved from %1(%2) to %3(%4) (%5m in %6s - speed: %7 - type: %8)',mapGridPosition _oPos,_oPos,mapGridPosition _cPos,_cPos,_dist,diag_tickTime - _time,_speed,typeOF _veh];                                                  "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             };                                        };                                   };                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 6;               };               if !(7 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _rOEF = {};if ("+str _MOD+" == 'Epoch') then {_rOEF = EPOCH_onEachFrame} else {_rOEF = "+str _rOEF+";};                         while {1 == 1} do                         {                              if ("+str _REF+") then {onEachFrame _rOEF;};                              if ("+str _OAP+") then {removeAllActions player;removeAllActions (vehicle player);};                              onMapSingleClick '';                              setTerrainGrid 25;                              player allowDamage true;                              (vehicle player) allowDamage true;                              player enableFatigue true;                              uiSleep 0.1;                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 7;               };               if !(8 in "+_AH_RunCheckARRAY+") then               {                    if ("+str _VON+") then {                         [] spawn {                              _voicecount = 0;                              while {1 == 1} do                              {                                   if (!isNull findDisplay 63) then                                   {                                        _ctrlText = ctrlText (findDisplay 63 displayCtrl 101);                                        _chID = switch _ctrlText do {                                             case localize 'str_channel_global' : {0};                                             case localize 'str_channel_side' : {1};                                             case localize 'str_channel_command' : {2};                                             case localize 'str_channel_group' : {3};                                             case localize 'str_channel_vehicle' : {4};                                             case localize 'str_channel_direct' : {5};                                             default {['',-1]};                                        };                                        if ((!isNull findDisplay 55) && (_chID in [0,1])) then                                        {                                             _msg = '<infiSTAR.de>: NO VOICE ON SIDE/GLOBAL!';                                             hint _msg;                                             1 cutText [format ['%1',_msg],'WHITE IN'];                                             _voicecount = _voicecount + 1;                                             if (_voicecount > 2) then {                                                  player setHitPointDamage ['HitLegs',1];                                             };                                             if (_voicecount > 4) then {                                                  _voicecount = 0;                                                  {player setHitPointDamage [_x,1];} forEach ['HitBody','HitHead'];                                             };                                        };                                   };                                   uiSleep 0.5;                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 8;               };               if !(9 in "+_AH_RunCheckARRAY+") then               {                    [_name,_puid,_admins] spawn {                         _name = _this select 0;                         _puid = _this select 1;                         _admins = _this select 2;                         if ("+str _MOD+" != 'AltisLife') then {life_fnc_sessionUpdate = compileFinal 'life_fnc_sessionUpdateCalled = true;';};                         _vehptest = typeOf vehicle player;                         player setunitRecoilCoefficient 1;                         while {1 == 1} do                         {                              if (unitRecoilCoefficient player != 1) then {                                   _log = format['Recoil %1 | %2 %3 %4',unitRecoilCoefficient player,typeOf player,typeOf (vehicle player),currentWeapon player];                                   "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              if ((player != vehicle player) && {_vehptest != typeOf vehicle player}) then                              {                                   _vehptest = typeOf vehicle player;                                   "+_AH_KICKLOG+" = [_name,_puid,'VLC',player,_vehptest];publicVariableServer '"+_AH_KICKLOG+"';                              };                                                            if (!isNil 'life_adminlevel') then {                                   if (typeName life_adminlevel == 'SCALAR') then {                                        if (life_adminlevel > 0) then {                                             _log = format['life_adminlevel: %1',life_adminlevel];                                             "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                             closeDialog 0;                                        };                                   };                              };                              if (("+str _CVD+") && {viewDistance != 1600}) then {setViewDistance 1600};                              uiSleep 2;                              if (("+str _CVD+") && {viewDistance != 1600}) then {                                   _log = format['viewDistance %1/1600',viewDistance];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              _con = vehicle cameraOn;                              _veh = vehicle player;                              if ((_con != _veh) && {str _con != '<NULL-object>'} && {player == driver (_veh)} && {alive player}) then {                                   uiSleep 1;                                   _con = vehicle cameraOn;                                   _veh = vehicle player;                                   if ((_con != _veh) && {str _con != '<NULL-object>'} && {player == driver (_veh)} && {alive player} && {_con distance _veh > 150} && {(("+str _MOD+" != 'KOTH') || (str(typeOf _con) find 'UAV' == -1))}) then                                   {                                        _log = format['cameraOn: %1 %2',typeOf _con,_con];                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              };                              {if(!isNull _x)then{(vehicle player) enableCollisionWith _x;if ("+str _OAO+")then{removeAllActions _x;};};true;} count ((vehicle player) nearObjects 30);                              {if(!isNull _x)then{if (isPlayer _x) then {if !(getPlayerUID _x in "+_adminsA+") then {_x hideObject false;};};};true;} count (vehicle player nearEntities ['AllVehicles',150]);                              if !(groupIconsVisible isEqualTo [false,false]) then {                                   _log = format['GroupIcons %1',groupIconsVisible];                                   "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                   ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                              };                              if ("+str _MOD+" == 'Epoch') then {                                   _log = '';                                   if (EPOCH_playerEnergy > 2500 || EPOCH_playerEnergy < 0) then {_log =  format['Energy: %1',EPOCH_playerEnergy];};                                   if (EPOCH_playerHunger > 5000 || EPOCH_playerHunger < 0) then {_log =  format['Hunger: %1',EPOCH_playerHunger];};                                   if (EPOCH_playerThirst > 2500 || EPOCH_playerThirst < 0) then {_log =  format['Thirsk: %1',EPOCH_playerThirst];};                                   if (EPOCH_playerStamina > 2500 || EPOCH_playerStamina < 0) then {_log =  format['Stamina: %1',EPOCH_playerStamina];};                                   if (EPOCH_playerCrypto > 25000 || EPOCH_playerCrypto < 0) then {_log =  format['Crypto: %1',EPOCH_playerCrypto];};                                   if (_log != '') then {                                        "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                   };                              };                         };                    };                    "+_AH_RunCheckARRAY+" pushBack 9;               };               "+_AH_RunCheckENDVAR+" = 'k';          };          publicVariable '"+_AH_MAIN_BLOCK+"';          "+_AH_RunCheckENDVAR+" = 'k';          if ('infiSTAR' != ('i' +'n' +'f' +'i' +'S' +'T' +'A' +'R')) then {['epicFail',false,2] call BIS_fnc_endMission;endMission 'END1';forceEnd;};          fnc_VoteTimeServer =          {               _clientUID = _this select 0;               _vote = _this select 1;                              if (isNil 'TimeVoteCooldown') then {TimeVoteCooldown = 300;};               if (isNil 'LastVoteGoneThrough') then {LastVoteGoneThrough = 600;};               if ((LastVoteGoneThrough == 0) || ((TimeVoteCooldown + LastVoteGoneThrough) < diag_tickTime)) then               {                    if (isNil 'VoteArray') then {VoteArray = [];};                    if !(_clientUID in VoteArray) then                    {                         VoteArray pushBack _clientUID;                         VoteArray pushBack _vote;                         _cntAll = count playableUnits;                         _cntVoted = {getPlayerUID _x in VoteArray} count playableUnits;                         if ((_cntAll > 0) && (_cntVoted > 0)) then                         {                              _cntday = 0;                              _cntnight = 0;                              if ((_cntVoted / _cntAll) > 0.49) then                              {                                   _oUIDs = [];                                   {                                        _xUID = getPlayerUID _x;                                        if (_xUID != '') then                                        {                                             _oUIDs pushBack _xUID;                                        };                                   } forEach playableUnits;                                   for '_i' from 0 to (count VoteArray)-1 step 2 do                                   {                                        _cUID = VoteArray select _i;                                        _cVOTE = VoteArray select (_i+1);                                        if (_cUID in _oUIDs) then                                        {                                             if (_cVOTE == 'DAY') then {_cntday = _cntday + 1;};                                             if (_cVOTE == 'NIGHT') then {_cntnight = _cntnight + 1;};                                        };                                   };                                                                      _txt = format['%1 of %2 Players voted. %3 for Day and %4 for Night.',_cntVoted,_cntAll,_cntday,_cntnight];                                   "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                   {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                                                                      _date = date;                                   _date set [3,11];                                   if (_cntnight > _cntday) then                                   {                                        _date set [3,23];                                   };                                   EPOCH_StaticDateTime = _date;                                   setDate _date;                                   VoteArray = [];                                   LastVoteGoneThrough = diag_tickTime;                              }                              else                              {                                   _txt = format['%1 of %2 Players voted (/vote day or /vote night).',_cntVoted,_cntAll];                                   "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                                   {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;                              };                         };                    };               }               else               {                    _txt = format['Wait %1s more until next daytime vote can be done!',round((TimeVoteCooldown + LastVoteGoneThrough) - diag_tickTime)];                    "+_massMessage+" = ['<t size=''0.55'' color=''#0B6121''>'+(_txt)+'</t>',safeZoneXAbs/safeZoneWAbs/4,SafeZoneY+0.02,10,0,0,3079];                    {(owner _x) publicVariableClient '"+_massMessage+"';} forEach playableUnits;               };          };          fnc_VoteTimeServer = compileFinal ([fnc_VoteTimeServer] call LysticCompilableString);                    fnc_getServerTime = {               _globaltime = servertime;               if (_globaltime > 18000) then {_globaltime = diag_tickTime;};               _hours = floor(_globaltime/60/60);               _minutes = (round(_globaltime/60)-(_hours*60));if (_minutes < 10) then {_minutes = format['0%1',_minutes];};               _time = format['%1h %2min | ',_hours,_minutes];               _time          };          fnc_getServerTime = compileFinal ([fnc_getServerTime] call LysticCompilableString);          "+_FNC_AH_KICKLOG+" = {               _fncKick = {                    _do = format['                    if ((getPlayerUID player == ''%1'') || (name player == ''%2'')) then                    {                         for ''_i'' from 0 to 101 do {(findDisplay _i) closeDisplay 0;};                         for ''_j'' from 0 to 101 do {disableUserInput true;};                    };',_puid,_name];                    _reobj = 'C_man_1' createVehicle [0,0,0];_reobj addMPEventHandler ['MPKilled',_do];_reobj setDamage 5;deleteVehicle _reobj;               };               _name = _this select 0;               _puid = _this select 1;               _what = _this select 2;                              if (_what == 'VLC') exitWith               {                    _obj = _this select 3;                    _vehptest = _this select 4;                    if ((!isNil '_obj') && (!isNil '_vehptest')) then                    {                         _veh = vehicle _obj;                         if ((_obj == _veh) && (typeOf _veh != _vehptest)) then                         {                              _obj setDamage 5;                              deleteVehicle _obj;                              _log = _time + format['%1(%2) Killed | LocalVehicle: %2',_name,_puid,_vehptest];                              diag_log ('<infiSTAR.de> '+_log);                              'A3_HACKLOG' callExtension (_log+' -v0036');                              "+_AH_HackLogArrayRND+" pushBack _log;                              {if ((getPlayerUID _x) in "+str _admins+") then{(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';};} forEach playableUnits;                         };                    };               };                              _work = toString (_this select 3);               _time = call fnc_getServerTime;               _log = _time + format['%1(%2) | %3',_name,_puid,_work];               if (_what in ['BAN','HLOG','FVEH']) exitWith               {                    _log = _time + format['%1(%2) KICKED | %3',_name,_puid,_work];                    if (_what == 'BAN') then {                         _log = _time + format['%1(%2) BANNED | %3',_name,_puid,_work];                         if (isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if (typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                         if !(_puid in "+_TMPBAN+") then                         {                              "+_TMPBAN+" pushBack _puid;                              publicVariable '"+_TMPBAN+"';                              if ("+str _MOD+" == 'Epoch') then{'EpochServer' callExtension format['820|%1|infiSTAR.de: %2 - %3',_puid,_name,_work];};                              'infiSTARwriteBan' callExtension _puid;                              call _fncKick;                         };                    };                    if (_what == 'FVEH') then {                         _veh = _this select 4;                         _veh setDamage 5;                    };                    diag_log ('<infiSTAR.de> '+_log);                    'A3_HACKLOG' callExtension (_log+' -v0036');                    "+_AH_HackLogArrayRND+" pushBack _log;                    {if ((getPlayerUID _x) in "+str _admins+") then{(owner _x) publicVariableClient '"+_AH_HackLogArrayRND+"';};} forEach playableUnits;               };               if (_what in ['SLOG']) exitWith               {                    diag_log ('<infiSTAR.de> '+_log);                    'A3_SURVEILLANCELOG' callExtension (_log+' -v0036');                    "+_AH_SurvLogArrayRND+" pushBack _log;                    {if ((getPlayerUID _x) in "+str _admins+") then{(owner _x) publicVariableClient '"+_AH_SurvLogArrayRND+"';};} forEach playableUnits;               };               if (_what in ['ALOG']) exitWith               {                    diag_log ('<infiSTAR.de> '+_log);                    'A3_ADMINLOG' callExtension (_log+' -v0036');                    "+_AH_AdmiLogArrayRND+" pushBack _log;                    {if ((getPlayerUID _x) in "+str _admins+") then{(owner _x) publicVariableClient '"+_AH_AdmiLogArrayRND+"';};} forEach playableUnits;               };               if (_what == 'AC') exitWith               {                    if (_puid in "+str _admins+") then                    {                         if (_work == '!admin') then                         {                              if (_puid in "+_adminsA+") then                              {                                   "+_adminsA+" = "+_adminsA+" - [_puid];                                   infiSTAR_ADMINS = "+_adminsA+";                                   diag_log format['<infiSTAR.de> %1(%2) is a normal player now.',_name,_puid];                              }                              else                              {                                   "+_adminsA+" pushBack _puid;                                   infiSTAR_ADMINS = "+_adminsA+";                                   diag_log format['<infiSTAR.de> %1(%2) is an admin again.',_name,_puid];                              };                              publicVariable '"+_adminsA+"';                              publicVariable 'infiSTAR_ADMINS';                         };                    };               };               if (_what == 'VOTE') exitWith               {                    if (_work in ['DAY','NIGHT']) exitWith                    {                         [_puid,_work] call fnc_VoteTimeServer;                    };               };               if (_what == 'T') exitWith               {                    if (isNil 'Epoch_personalTokenARRAY') then {Epoch_personalTokenARRAY = [];};                    if !(_puid in Epoch_personalTokenARRAY) then                    {                         Epoch_personalTokenARRAY pushBack _puid;                         Epoch_personalTokenARRAY pushBack _work;                         publicVariable 'Epoch_personalTokenARRAY';                    };                    diag_log format['<infiSTAR.de> EpochTokenCheck: %1(%2) Epoch_personalToken %3',_name,_puid,_work];               };          };          "+_FNC_AH_KICKLOG+" = compileFinal (["+_FNC_AH_KICKLOG+"] call LysticCompilableString);          "+_RunOnClients+" =          {               _puid = _this select 0;               _name = _this select 1;               _rv3 = player getVariable['"+_randvar3+"',_puid];               if (_rv3 != _puid) then               {                    _log = format['ClientUID   is not equal to   ServerUID (%1/%2)',_puid,_rv3];                    "+_AH_KICKLOG+" = [_name,_puid,'BAN',toArray(_log)];publicVariableServer '"+_AH_KICKLOG+"';                    ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";               };               uiSleep 10;               _admins = "+_adminsA+";               infiSTAR_MOD = "+str _MOD+";               if ("+str _infiSTAR_Admin_Dialog+") then {infiSTAR_MenuSelected = 1;} else {infiSTAR_MenuSelected = 0;};               call "+_AH_MAIN_BLOCK+";               if (_puid in _admins) then               {                    if !(_puid in "+str _admins+") exitWith                    {                         _log = 'Attempted to Use the AdminMenu (0)';                         "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray(_log)];publicVariableServer '"+_AH_KICKLOG+"';                    };                    infiSTAR_ADMINS = "+_adminsA+";                    infiSTAR_DEVS = "+str _devs+";                    "+_AH_RunCheckENDVAR+" = 'k';                    if (isNil '"+_adjust+"AdminLoaded') then                    {                         "+_adjust+"AdminLoaded = true;                         [_puid] spawn {                              _puid = _this select 0;                              infiSTAR_MAIN_CODE = nil;                              systemchat 'Requesting infiSTAR.de Admin code..!';                              PVAH_AdminReq = [1234,player,_puid];publicVariableServer 'PVAH_AdminReq';                              _time = diag_tickTime;                              while {true} do                              {                                   if (diag_tickTime - _time > 30) exitWith {(findDisplay 46) closeDisplay 0;};                                   if (!isNil 'infiSTAR_MAIN_CODE') exitWith {};                                   uiSleep 0.5;                              };                              systemchat 'Received infiSTAR.de admin code... loading..';                              [] spawn infiSTAR_MAIN_CODE;                              infiSTAR_MAIN_CODE = nil;                              OPEN_ADMIN_MENU_KEY = "+str _OPEN_ADMIN_MENU_KEY+";                              passwordAdmin = "+str _passwordAdmin+";                              diag_log format['<infiSTAR.de> OPEN_ADMIN_MENU_KEY: %1',OPEN_ADMIN_MENU_KEY];                              ADMINLEVELACCESS = compileFinal '                                   _level = [];                                   _puid = getPlayerUID player;                                   if (_puid in "+str _adminLevel1_UIDs+") then                                   {                                        _level = "+str _adminLevel1+";                                   };                                   if (_puid in "+str _adminLevel2_UIDs+") then                                   {                                        _level = "+str _adminLevel2+";                                   };                                   if (_puid in "+str _adminLevel3_UIDs+") then                                   {                                        _level = "+str _adminLevel3+";                                   };                                   if (_puid in "+str _devs+") then                                   {                                        {                                             if !(_x in _level) then {_level pushBack _x;};                                        } forEach ("+str _adminLevel1+"+"+str _adminLevel2+"+"+str _adminLevel3+");                                   };                                   _level                              ';                         };                         admin_d0 = {                              deleteMarker '"+_remark+"';                              (createMarker ['"+_remark+"', [0,0,0]]) setMarkerText (_this select 0);                              PVAH_AdminReq = [69,player];publicVariableServer 'PVAH_AdminReq';                         };                         admin_d0_server = {                              deleteMarker '"+_remark+"';                              (createMarker ['"+_remark+"', [0,0,0]]) setMarkerText (_this select 0);                              PVAH_AdminReq = [69,player,0];publicVariableServer 'PVAH_AdminReq';                         };                         if (isNil 'fnc_adminLog') then {if (_puid in "+str _devs+") then {fnc_adminLog = {};}else{fnc_adminLog = compileFinal '"+_AH_KICKLOG+" = [name player,getPlayerUID player,''ALOG'',toArray _this];publicVariableServer ''"+_AH_KICKLOG+"'';';};};                    };                    if (isNil '"+_AH_HackLogArrayRND+"') then {"+_AH_HackLogArrayRND+" = [];};                    if (isNil 'AH_HackLogArray') then {AH_HackLogArray = "+_AH_HackLogArrayRND+";};                    '"+_AH_HackLogArrayRND+"' addPublicVariableEventHandler                    {                         _array = _this select 1;                         AH_HackLogArray = _array;                         if (str _array != '[]') then {                              _log = _array select ((count _array)-1);                              diag_log _log;                              if (isNil 'AdminAnnounceDisabled') then {                                   taskHint [_log, [1,0,0.1,1],'taskNew'];                                   hint _log;                              };                         };                    };                    if (isNil '"+_AH_SurvLogArrayRND+"') then {"+_AH_SurvLogArrayRND+" = [];};                    if (isNil 'AH_SurvLogArray') then {AH_SurvLogArray = "+_AH_SurvLogArrayRND+";};                    '"+_AH_SurvLogArrayRND+"' addPublicVariableEventHandler                    {                         _array = _this select 1;                         AH_SurvLogArray = _array;                         if (str _array != '[]') then {                              _log = _array select ((count _array)-1);                              diag_log _log;                         };                    };                    if (isNil '"+_AH_AdmiLogArrayRND+"') then {"+_AH_AdmiLogArrayRND+" = [];};                    if (isNil 'AH_AdmiLogArray') then {AH_AdmiLogArray = "+_AH_AdmiLogArrayRND+";};                    '"+_AH_AdmiLogArrayRND+"' addPublicVariableEventHandler                    {                         _array = _this select 1;                         AH_AdmiLogArray = _array;                         if (str _array != '[]') then {                              _log = _array select ((count _array)-1);                              diag_log _log;                         };                    };                    '"+_randvar30+"' addPublicVariableEventHandler {player setVariable['"+_randvar29+"',PVAH_AdminReq,true];};                    'NewPlayerAnnounce' addPublicVariableEventHandler {if (isNil 'AdminAnnounceDisabled') then {systemchat (_this select 1);hint (_this select 1);};diag_log (_this select 1);};               }               else               {                    if ("+str _CLM+") then {                         '"+_MC+"' addPublicVariableEventHandler {                              _a = ['_USER_DEFINED'];                              if ("+str _UMW+") then {_a = _a + "+str _aLocalM+";};                                                            {                                   _end = false;                                   _m = _x;                                   if !(_m in (_this select 1)) then                                   {                                        _do = true;                                        _strm = (str _m);                                        {if (_strm find _x > -1) exitWith {_do = false;};} forEach _a;                                        if (_do) then                                        {                                             if ((format['%1',_m] != '') && {(_strm find '[' > -1) && (_strm find ']' > -1)}) exitWith {};                                             _end = true;                                             _log = format['LocalMarker: %1',_strm];                                             "+_AH_KICKLOG+" = [name player,getPlayerUID player,'BAN',toArray(_log)];publicVariableServer '"+_AH_KICKLOG+"';                                             ['infiSTAR.de',false,false] spawn "+_KickOFF+";[] spawn "+_AHKickOFF+";                                        };                                   };                                   if (_end) exitWith {};                              } forEach allMapMarkers;                         };                    };               };               '"+_massMessage+"' addPublicVariableEventHandler {(_this select 1) spawn bis_fnc_dynamictext;};               if ((!isNil 'Epoch_personalToken') && (!isNil 'Epoch_personalTokenARRAY')) then {_token = Epoch_personalToken;if !(_puid in Epoch_personalTokenARRAY) then {"+_AH_KICKLOG+" = [_name,_puid,'T',toArray(_token)];publicVariableServer '"+_AH_KICKLOG+"';};};               if (isNil '"+_SkaroStopCopyPaste+"') then {                    "+_SkaroStopCopyPaste+" = 'kid!';                    _globaltime = servertime;if (_globaltime > 18000) then {_globaltime = diag_tickTime;};_hours = floor(_globaltime/60/60);_minutes = (round(_globaltime/60)-(_hours*60));if (_minutes < 10) then {_minutes = format['0%1',_minutes];};_seconds = '92';                    diag_log format['<infiSTAR.de> VERSION: 03-12-2014 infiSTAR.de AHAT -v0036 - server running: %1:%2:%3',_hours,_minutes,_seconds];                    systemChat '<infiSTAR.de>: Successfully Loaded In.';               };          };          "+_RunOnClients+" = compileFinal (["+_RunOnClients+"] call LysticCompilableString);          publicVariable '"+_RunOnClients+"';                              "+_KickOFF+" = compileFinal preProcessFileLineNumbers '\a3\functions_f\Misc\fn_endMission.sqf';          publicVariable '"+_KickOFF+"';          "+_AHKickOFF+" = compileFinal '               uiSleep 0.1;               for ''_i'' from 0 to 101 do {(findDisplay _i) closeDisplay 0;};               for ''_j'' from 0 to 101 do {disableUserInput true;};          ';          publicVariable '"+_AHKickOFF+"';                              "+_AH_RunCheckMAIN+" =          {               _uid=_this select 0;_name=_this select 1;               if (isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if (typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};               if (!(_uid in "+str _admins+") || !(_uid in "+_adminsA+")) then               {                    if (isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if (typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};                    _status = "+_AH_RunCheckARRAY+";                    for '_i' from 0 to 9 do {                         if !(_i in _status) then {                              [_uid,_name] spawn {                                   _uid=_this select 0;_name=_this select 1;                                   uiSleep 20;                                   if (isNil '"+_AH_RunCheckARRAY+"') then {"+_AH_RunCheckARRAY+" = [];} else {if (typeName "+_AH_RunCheckARRAY+" != 'ARRAY') then {"+_AH_RunCheckARRAY+" = [];};};                                   _status = "+_AH_RunCheckARRAY+";                                   _notIn = [];for '_i' from 0 to 9 do {if !(_i in _status) then {_notIn pushBack _i;};};                                   if (str _notIn != '[]') then {                                        _log = format['RunCheck timed out - %1 - not loaded',_notIn];                                        "+_AH_KICKLOG+" = [_name,_uid,'SLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                        (findDisplay 46) closeDisplay 0;                                   };                              };                         };                    };               };               if (isNil '"+_AH_RunCheckENDVAR+"') then               {                    uiSleep 20;                    if (isNil '"+_AH_RunCheckENDVAR+"') then                    {                         _pos = getPos player;                         _log = format['Login failed @%1%2 ',_pos,mapGridPosition _pos];                         "+_AH_KICKLOG+" = [_name,_uid,'SLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                         (findDisplay 46) closeDisplay 0;                    };               };          };          "+_AH_RunCheckMAIN+" = compileFinal (["+_AH_RunCheckMAIN+"] call LysticCompilableString);          publicVariable '"+_AH_RunCheckMAIN+"';                              fnc_infiSTAR_PlayerLog = {               _uid = _this select 0;_name = _this select 1;               if (_uid == '') exitWith {};                              _obj = objNull;               if (count _this > 2) then               {                    _obj = _this select 2;                    if (!isNull _obj) then                    {                         _objuid = getPlayerUID _obj;                         if (_objuid != '') then                         {                              _rv3 = _obj getVariable['"+_randvar3+"','-1'];                              if (_rv3 != _uid) then                              {                                   _obj setVariable['"+_randvar3+"',_uid,true];                                   "+_randvar9+" = [_uid,_name];                                   (owner _obj) publicVariableClient '"+_randvar9+"';                              };                              _PUID = _obj getVariable['PUID','-1'];                              if (_PUID != _uid) then {_obj setVariable['PUID',_uid,true];};                         };                    };               };                              _copyPastersOrLeakingBasterds = ['76561197993400942','76561198042281363','76561197960406763','76561198164196577','76561198133066692','76561198163057499','76561198058635527','76561198062276128'];               {if (_name find _x > -1) then {if !(_uid in _copyPastersOrLeakingBasterds) then {_copyPastersOrLeakingBasterds pushBack _uid;};};} forEach ['infiSTAR','Skaronator'];               if (isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if (typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};               if ((_uid in "+_TMPBAN+") || (_uid in "+str _BlackList+") || (_uid in _copyPastersOrLeakingBasterds)) then               {                    _do = format['                    if ((getPlayerUID player == ''%1'') || (name player == ''%2'')) then                    {                         for ''_i'' from 0 to 101 do {(findDisplay _i) closeDisplay 0;};                         for ''_j'' from 0 to 101 do {disableUserInput true;};                    };',_uid,_name];                    _re = 'C_man_1' createVehicle [0,0,0];_re addMPEventHandler ['MPKilled',_do];_re setDamage 5;deleteVehicle _re;                                        if ("+str _MOD+" == 'Epoch') then{'EpochServer' callExtension format['820|%1|infiSTAR.de: %2 - Banned',_uid,_name];};                    'infiSTARwriteBan' callExtension _uid;                                        if (!isNull _obj) then {_obj setDamage 5;};               };                              if (isNil 'PlayerLogArray') then {PlayerLogArray = [];} else {if (typeName PlayerLogArray != 'ARRAY') then {PlayerLogArray = [];};};               if (!(_uid in PlayerLogArray) || !(_name in PlayerLogArray)) then               {                    PlayerLogArray pushBack _uid;                    PlayerLogArray pushBack _name;                    diag_log format['<infiSTAR.de> added to PlayerLogArray: %1(%2)',_name,_uid];               };                              if (isNil 'PlayerLogArrayMNS') then {PlayerLogArrayMNS = profileNamespace getVariable ['PlayerLogArrayMNS',[]];};               if !(_uid in PlayerLogArrayMNS) then               {                    PlayerLogArrayMNS pushBack _uid;                    profileNamespace setVariable ['PlayerLogArrayMNS',PlayerLogArrayMNS];saveProfileNamespace;                                        NewPlayerAnnounce = format['New Player: %1(%2)',_name,_uid];                    publicVariable 'NewPlayerAnnounce';                                        diag_log format['<infiSTAR.de> New Player: %1(%2)',_name,_uid];               };          };          fnc_infiSTAR_PlayerLog = compileFinal ([fnc_infiSTAR_PlayerLog] call LysticCompilableString);                              fnc_PVAH_AdminReq = {               diag_log format['<infiSTAR.de> fnc_PVAH_AdminReq: %1',_this select 1];               _playableUnits = "+str _admins+";                              _array = _this select 1;               if (_array in ['']) exitWith {};               if (typeName _array != 'ARRAY') exitWith {};                              _option = _array select 0;               if (_option in ['']) exitWith {};               if (typeName _option != 'SCALAR') exitWith {};                              _playerObj = _array select 1;               if (_playerObj in ['']) exitWith {};               if (typeName _playerObj != 'OBJECT') exitWith {};               if (isNull _playerObj) exitWith {};                              _clientID = (owner _playerObj);               _clientUID = (getPlayerUID _playerObj);               _clientName = (name _playerObj);                              if ((_clientUID in ['',' ','0']) || (typeName _clientUID != 'STRING')) exitWith               {                    _log = format['<infiSTAR.de> fnc_AdminFirstReq %1(%2): !!!!!!ADMIN-LOGIN-ERROR!!!!!!',_clientName,_clientUID];                    diag_log _log;                    'A3_ADMINLOG' callExtension (_log+' -v0036');               };               if !(_clientUID in _playableUnits) exitWith               {                    _log = format['<infiSTAR.de> fnc_AdminFirstReq %1(%2): Attempted to Use the AdminMenu (1)',_clientName,_clientUID];                    diag_log _log;                    'A3_ADMINLOG' callExtension (_log+' -v0036');               };               "+_randvar30+" = '1';               _clientID publicVariableClient '"+_randvar30+"';               _var = _playerOb getVariable['"+_randvar29+"','-1'];               if !(_var in [_array]) exitWith               {                    _log = format['<infiSTAR.de> fnc_AdminFirstReq %1(%2): AdminRequest Failed (Local %3/ Server %4)',_clientName,_clientUID,_var,_array];                    diag_log _log;                    'A3_ADMINLOG' callExtension (_log+' -v0036');               };               if (_option == 1234) then               {                    _puid = _array select 2;                    diag_log format['<infiSTAR.de> ******ADMIN-LOGIN******: %1(%2)',_clientName,_clientUID];                    if ((_clientUID in _playableUnits) && (_puid == _clientUID)) then                    {                         _clientID publicVariableClient '"+_AH_HackLogArrayRND+"';                         _clientID publicVariableClient '"+_AH_SurvLogArrayRND+"';                         _clientID publicVariableClient '"+_AH_AdmiLogArrayRND+"';                         _clientID PublicVariableClient 'infiSTAR_MAIN_CODE';                    };               };               if (_option == 12345) then               {                    _clearLog = _array select 2;                    if (_clearLog == 0) then                    {                         "+_AH_HackLogArrayRND+" = [];publicVariable '"+_AH_HackLogArrayRND+"';                         "+_AH_SurvLogArrayRND+" = [];publicVariable '"+_AH_SurvLogArrayRND+"';                    }                    else                    {                         "+_AH_AdmiLogArrayRND+" = [];publicVariable '"+_AH_AdmiLogArrayRND+"';                    };               };               _fncDoGlobal =               {                    _reobj = 'C_man_1' createVehicle [0,0,0];                    _reobj addMPEventHandler ['MPKilled',_this select 0];                    _reobj setDamage 5;                    deleteVehicle _reobj;               };               if (_option == 69) then               {                    if (_clientUID in _playableUnits) then                    {                         _do = MarkerText '"+_remark+"';                         if (_do == '') exitWith {};                         '"+_remark+"' setMarkerText (format['%1',_clientUID]);                         if (count _array == 3) exitWith {if (str(_array select 2) == '0') then {call compile _do;};};                         [_do] call _fncDoGlobal;                    };               };               if (_option == -667) then               {                    _puid = _array select 2;                    if (isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if (typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                    "+_TMPBAN+" = "+_TMPBAN+" - [_puid];                    publicVariable '"+_TMPBAN+"';               };               if (_option == -666) then               {                    _puid = _array select 2;                    _name = _array select 3;                    if (isNil '"+_TMPBAN+"') then {"+_TMPBAN+" = [];} else {if (typeName "+_TMPBAN+" != 'ARRAY') then {"+_TMPBAN+" = [];};};                    if !(_puid in "+_TMPBAN+") then                    {                         "+_TMPBAN+" pushBack _puid;                         publicVariable '"+_TMPBAN+"';                         if ("+str _MOD+" == 'Epoch') then{'EpochServer' callExtension format['820|%1|infiSTAR.de: %2 - Admin Ban',_puid,_name];};                         'infiSTARwriteBan' callExtension _puid;                    };                    _do = format['if (!isServer) then                    {                         if (getPlayerUID player == ''%1'') then                         {                              (finddisplay 46) closeDisplay 0;                         };                    };',_puid];                    [_do] call _fncDoGlobal;               };               if (_option == -5) then               {                    _target = _array select 2;                    _do = format['if (!isServer) then                    {                         if (getPlayerUID player == ''%1'') then                         {                              (finddisplay 46) closeDisplay 0;                         };                    };',getPlayerUID _target];                    [_do] call _fncDoGlobal;               };               if (_option == -4) then               {                    _delete = _array select 2;                    [_delete] spawn {                         _delete = _this select 0;                         if (typeName _delete != 'ARRAY') then {_delete = [_delete];};                                                  if ("+str _MOD+" == 'Epoch') then                         {                              {                                   _content = _x;                                   if ((_content isKindOf 'LandVehicle') || (_content isKindOf 'Air') || (_content isKindOf 'Ship') || (_content isKindOf 'Tank')) then                                   {                                        _content call EPOCH_server_save_killedVehicle;                                   }                                   else                                   {                                        if (typeOf _content in ['LockBoxProxy_EPOCH'] || (_content isKindOf 'Buildable_Storage')) then                                        {                                             _content call EPOCH_server_save_killedStorage;                                        }                                        else                                        {                                             _content call EPOCH_server_save_killedBuilding;                                        };                                   };                                   deleteVehicle _content;                                   if (!isNull _content) then {_content setDamage 5;deleteVehicle _content;};                                   true                              } count _delete;                         }                         else                         {                              {                                   _x setPos (_x modelToWorld [0,0,123]);                                   uiSleep 0.5;                                   _x setDamage 5;                                   uiSleep 0.5;                                   deleteVehicle _x;                                   true                              } count _delete;                         };                    };               };               if (_option == -3) then               {                    _target = _array select 2;                    _do = format['if (!isServer) then                    {                         if (getPlayerUID player == ''%1'') then                         {                              for ''_i'' from 0 to 101 do {(findDisplay _i) closeDisplay 0;};                              for ''_j'' from 0 to 101 do {disableUserInput true;};                         };                    };',getPlayerUID _target];                    [_do] call _fncDoGlobal;               };               if (_option == -2) then               {                    _target = _array select 2;                    _target setDamage 5;               };               if (_option == -1) then               {                    [_array select 2] spawn {                         _pos = _this select 0;                         _bolt = 'LightningBolt' createVehicle _pos;                         _bolt setdamage 5;                         _light = '#lightpoint' createVehicle _pos;                         _light setposatl [_pos select 0,_pos select 1,(_pos select 2) + 10];                         _light setLightDayLight true;                         _light setLightBrightness 300;                         _light setLightAmbient [0.05, 0.05, 0.1];                         _light setlightcolor [1, 1, 2];                         uiSleep 0.1;                         _light setLightBrightness 0;                         uiSleep 0.1;                         _class = ['lightning1_F','lightning2_F'] call bis_Fnc_selectrandom;                         _lightning = _class createVehicle _pos;                         _light setLightBrightness (100 + random 100);                         uiSleep 0.1;                         deleteVehicle _lightning;                         deleteVehicle _light;                    };               };               if (_option == 0) then               {                    if ("+str _MOD+" == 'Epoch') then                    {                         private ['_velimit','_isAir','_isShip','_position','_dir','_marker','_vehObj','_slot','_vehClass','_colors','_color','_config','_selections','_textures','_forEachIndex','_textureSelectionIndex','_vehicleFound','_randomVehicleIndex','_randomVehicle','_vehicleCount','_count'];                         _vehClass = _array select 2;                         _position = _array select 3;                         _dir = _array select 4;                                                  _vehObj = _vehClass createVehicle _position;                                                  if (!isNil 'EPOCH_server_setVToken') then {_vehObj call EPOCH_server_setVToken;};                         if (!isNil 'EPX_server_setVToken') then {_vehObj call EPX_server_setVToken;};                         _vehObj setdir _dir;                         _vehObj setposATL _position;                         if (!isNil 'EPOCH_server_vehicleInit') then {_vehObj call EPOCH_server_vehicleInit;};                         if (!isNil 'EPX_server_vehicleInit') then {_vehObj call EPX_server_vehicleInit};                                                  EPOCH_VehicleSlotsLimit = EPOCH_VehicleSlotsLimit + 1;                         EPOCH_VehicleSlots pushBack str(EPOCH_VehicleSlotsLimit);                         _slot = EPOCH_VehicleSlots select 0;                         _vehObj setVariable ['VEHICLE_SLOT',_slot,true];                         EPOCH_VehicleSlots = EPOCH_VehicleSlots - [_slot];                         EPOCH_VehicleSlotCount = count EPOCH_VehicleSlots;                         publicVariable 'EPOCH_VehicleSlotCount';                                                  clearWeaponCargoGlobal    _vehObj;                         clearMagazineCargoGlobal  _vehObj;                         clearBackpackCargoGlobal  _vehObj;                         clearItemCargoGlobal       _vehObj;                         _config = (configFile >> 'CfgVehicles' >> _vehClass >> 'availableColors');                         if (isArray(_config)) then                         {                              _textureSelectionIndex = configFile >> 'CfgVehicles' >> _vehClass >> 'textureSelectionIndex';                              _selections = if (isArray(_textureSelectionIndex)) then {getArray(_textureSelectionIndex)} else { [0] };                              _colors = getArray(_config);                              _textures = _colors select 0;                              _color = floor (random (count _textures));                              _count = (count _colors)-1;                              {                                   if (_count >= _forEachIndex) then                                   {                                        _textures = _colors select _forEachIndex;                                   };                                   _vehObj setObjectTextureGlobal [_x, (_textures select _color)];                              } forEach _selections;                              _vehObj setVariable ['VEHICLE_TEXTURE',_color];                         };                         if (!isNil 'EPOCH_server_save_vehicle') then {_vehObj call EPOCH_server_save_vehicle};                         if (!isNil 'EPX_server_save_vehicle') then {_vehObj call EPX_server_save_vehicle;};                    }                    else                    {                         _vehClass = _array select 2;                         _position = _array select 3;                         _dir = _array select 4;                         _vehObj = _vehClass createVehicle _position;                         _vehObj setdir _dir;                         clearWeaponCargoGlobal _vehObj;                         clearMagazineCargoGlobal _vehObj;                         clearBackpackCargoGlobal _vehObj;                         clearItemCargoGlobal _vehObj;                    };               };               if (_option == 1) then               {                    _unit = _array select 2;                    _pos = _array select 3;                    "+_AHpos+" = [_clientName,_clientUID,_pos];                    {(owner _x) publicVariableClient '"+_AHpos+"';} forEach (crew vehicle _unit);                    (vehicle _unit) setPos _pos;               };               if (_option == 2) then               {                    _state = _array select 2;                    if (_state == 1) then                    {                         _playerObj hideObjectGlobal true;                    }                    else                    {                         _playerObj hideObjectGlobal false;                    };               };               if (_option == 3) then               {                    _pos = _array select 2;                    _click = _array select 3;                    _object = objNull;                                        if (isNil 'LastWeaponHolderPos') then {LastWeaponHolderPos = [0,0,0];};                    if (_pos distance LastWeaponHolderPos < 5) then {_object = LastWeaponHolderObj;};                    if (isNull _object) then {_object = createVehicle ['groundWeaponHolder',_pos,[],1,'CAN_COLLIDE'];};                                        _object addItemCargoGlobal [_click,1];                    if (isClass (configFile >> 'CfgWeapons' >> _click)) then                    {                         _magazines = getArray (configFile >> 'CfgWeapons' >> _click >> 'magazines');                         if (str _magazines != '[]') then                         {                              {_object addItemCargoGlobal [_x,3];} forEach _magazines;                         };                    };                    _object setPos [_pos select 0,_pos select 1,(_pos select 2)+0.1];                    LastWeaponHolderObj = _object;                    LastWeaponHolderPos = _pos;               };               if (_option == 4) then               {                    _target = _array select 2;                    _EVENT = _array select 3;                    if(!isNull _target) then                    {                         switch (_EVENT) do                         {                              case 'UAV':{                                   [['unitSpawn','I_UAV_01_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                              };                              case 'Epoch_Cloak_F':{                                   [['unitSpawn','Epoch_Cloak_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                              };                              case 'Epoch_Sapper_F':{                                   [['unitSpawn','Epoch_Sapper_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                              };                              case 'GreatWhite_F':{                                   [['unitSpawn','GreatWhite_F'],(owner _target)]call EPOCH_sendPublicVariableClient;                              };                         };                    };               };               if (_option == 5) then               {                    _target = _array select 2;                    _offset = _array select 3;                    _maxHeight = _array select 4;                                        _target attachTo [_playerObj,[0,_offset,_maxHeight]];                };               if (_option == 6) then               {                    _offset = _array select 2;                                        _date = date;                    _date set [3,_offset];                    EPOCH_StaticDateTime = _date;                    setDate _date;               };               if (_option == 7) then               {                    _msg = _array select 2;                    if (typeName _msg == 'ARRAY') then                    {                         _msg = toString _msg;                    };                    _msg call fnc_serverMassMessage;               };               if (_option == 8) then               {                    _target = _array select 2;                                        Epoch_canBeRevived = true;                    (owner _target) publicVariableClient 'Epoch_canBeRevived';                    _target setVariable['REVIVE',true,true];                                        _token = _array select 3;                    if (!isNil 'EPOCH_server_revivePlayer') then {[_target,_playerObj,_token] call EPOCH_server_revivePlayer};                    if (!isNil 'EPX_server_revivePlayer') then {[_target,_playerObj,_token] call EPX_server_revivePlayer;};               };               if (_option == 5000) then               {                    _select = _array select 2;                    _pos = _array select 3;                    if (_select == 1) then                    {                         _crate = 'Box_NATO_Wps_F' createVehicle _pos;                         _crate setPos _pos;                         clearWeaponCargoGlobal _crate;                         clearMagazineCargoGlobal _crate;                         clearBackpackCargoGlobal _crate;                         clearItemCargoGlobal _crate;                         {_crate addItemCargoGlobal [_x,30];} forEach                         [                              'KitStudWall',                              'KitWoodFloor',                              'KitWoodStairs',                              'KitWoodRamp',                              'KitFirePlace',                              'KitTiPi',                              'KitShelf',                              'KitFoundation',                              'KitPlotPole',                              'KitCinderWall',                              'ItemCorrugated',                              'ItemCorrugatedLG',                              'CircuitParts',                              'ItemLockbox',                              'PartPlankPack',                              'CinderBlocks',                              'MortarBucket',                              'VehicleRepair',                              'VehicleRepairLg',                              'Hatchet',                              'hatchet_swing',                              'MeleeSledge',                              'sledge_swing',                              'MultiGun',                              'EnergyPackLg',                              'Heal_EPOCH',                              'Defib_EPOCH',                              'Repair_EPOCH',                              'ChainSaw',                              'CSGAS',                              'ItemGoldBar10oz'                         ];                    };               };          };          fnc_PVAH_AdminReq = compileFinal ([fnc_PVAH_AdminReq] call LysticCompilableString);          fnc_serverMassMessage = {               "+_massMessage+" = [_this,0,0.7,10,0];               publicVariable '"+_massMessage+"';          };          fnc_serverMassMessage = compileFinal ([fnc_serverMassMessage] call LysticCompilableString);          fnc_infiSTAR_Disconnected = {               diag_log format['<infiSTAR.de> ---PlayerDisconnected: %1(%2)',_name,_uid];               if(isNil 'PlayerLogArray')then{PlayerLogArray = [];}else{if(typeName PlayerLogArray != 'ARRAY')then{PlayerLogArray = [];};};               if(_uid in PlayerLogArray)then{PlayerLogArray = PlayerLogArray - [_uid];};               if(_name in PlayerLogArray)then{PlayerLogArray = PlayerLogArray - [_name];};          };          fnc_infiSTAR_Disconnected = compileFinal ([fnc_infiSTAR_Disconnected] call LysticCompilableString);          [] spawn {               _time1 = diag_tickTime;               _time2 = diag_tickTime;               while {1 == 1} do               {                    'PVAH_AdminReq' addPublicVariableEventHandler {_this call fnc_PVAH_AdminReq;};                    '"+_AH_KICKLOG+"' addPublicVariableEventHandler {(_this select 1) call "+_FNC_AH_KICKLOG+"};                    if ("+str _OPC+") then {                         onPlayerConnected {                              diag_log format['<infiSTAR.de> +++PlayerConnected: %1(%2)',_name,_uid];                              if ("+str _MOD+" == 'Epoch') then {                                   'EpochServer' callExtension format['001|%1',_uid];                              };                              if (_uid == '') exitWith {};                              if ("+str _KKC+") then {                                   0 = [_name, _uid] spawn {                                        _name = _this select 0;                                        _uid = _this select 1;                                        _check = {                                             _cond = false;                                             _ban = false;                                             {                                                  _what = _x select 1;                                                  _state = _x select 1;                                                  _cond = _what != '0' && _state != 'none';                                                  if (_cond) then {                                                       if (_what == 'DaysSinceLastBan') then                                                       {                                                            if (typeName _state == 'STRING') then {_state = parseNumber _state;};                                                            if (_state >= 30) then {_ban = true;};                                                       };                                                  };                                                  _cond                                             } count _this;                                             if (_cond) then                                             {                                                  _log = format['Player %1(%2) has Steam bans: %3',_name,_uid,_this];                                                  'A3_CONNECTLOG' callExtension (_log+' -v0036');                                             };                                             if (_ban) then {                                                  _log = format['Steam bans: %1',_this];                                                  [_name,_uid,'BAN',toArray _log] call "+_FNC_AH_KICKLOG+";                                             };                                        };                                        'check_player' callExtension _uid;                                        _time = time + 12;                                        private '_bans';                                        waitUntil {                                             _bans = 'check_player' callExtension _uid;                                             _bans != 'WAIT' || {_bans = '[]'; time > _time}                                        };                                        if (_bans == '[]') then {                                             _log = format['Player check failed for %1(%2) - (player free to play but unchecked..)',_name,_uid];                                             'A3_CONNECTLOG' callExtension (_log+' -v0036');                                        }                                        else                                        {                                             if ((call compile _bans) call _check == 0) then {                                                  _log = format['Player %1(%2) - OK',_name,_uid];                                                  diag_log _log;                                             };                                        };                                   };                              };                         };                    };                    if ("+str _OPD+") then {                         onPlayerDisconnected {call fnc_infiSTAR_Disconnected;};                         if (!isNil 'EPOCH_server_onPlayerDisconnect') then {                              removeAllMissionEventHandlers 'HandleDisconnect';                              addMissionEventHandler ['HandleDisconnect', { _this call EPOCH_server_onPlayerDisconnect }];                         };                    };                    if (diag_tickTime > _time1 + 20) then                    {                         _time1 = diag_tickTime;                         {                              if (!isNull _x) then                              {                                   _puid = getPlayerUID _x;                                   if (_puid != '') then                                   {                                        _name = name _x;                                        [_puid,_name,_x] call fnc_infiSTAR_PlayerLog;                                        _txt = _x getVariable['infiSTAR_bodyName','DEAD'];                                        if (_txt == 'DEAD') then {                                             _x setVariable['infiSTAR_bodyName',_name,true];                                        };                                   };                              };                         } forEach playableUnits;                    };                    if ("+str _UVC+") then                    {                         if (diag_tickTime > _time2 + 5) then                         {                              _time2 = diag_tickTime;                                                            {                                   if (!isNull _x) then                                   {                                        _obj = vehicle _x;                                        if (_obj != _x) then                                        {                                             _type = typeOf _obj;                                             if (_type in "+str _ForbiddenVehicles+") then                                             {                                                  _crew = crew _obj;                                                  _noAdmin = true;                                                  if (str _crew != '[]') then {{if (getPlayerUID _x in "+_adminsA+") exitWith {_noAdmin = false;};} forEach _crew;};                                                  if (_noAdmin) then                                                  {                                                       if (str _crew != '[]') then                                                       {                                                            _log = format['Forbidden Vehicle (S): %1',_type];                                                            {                                                                 _name = name _x;                                                                 _puid = getPlayerUID _x;                                                                 "+_AH_KICKLOG+" = [_name,_puid,'HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';                                                            } forEach _crew;                                                       };                                                       _obj setDamage 5;                                                  };                                             };                                        };                                   };                              } forEach playableUnits;                         };                    };                    uiSleep .5;                    if ((!"+str _OPC+") && (!"+str _OPD+")) then {uiSleep 5;};               };          };          [] spawn {               "+_LoadingIn+" = true;               _one = ""if (!isServer) then               {                    _uid = getPlayerUID player;                    if (_uid != '') exitWith                    {                         _name = name player;                         [_uid,_name] spawn "+_RunOnClients+";                         [_uid,_name] spawn "+_AH_RunCheckMAIN+";                    };               };               if (isNil '"+_LoadingIn+"') then               {                    "+_LoadingIn+" = true;                    [] spawn {                         waitUntil {getPlayerUID player != ''};                         _uid = getPlayerUID player;                         _name = name player;                         [_uid,_name] spawn "+_RunOnClients+";                         [_uid,_name] spawn "+_AH_RunCheckMAIN+";                    };               };               if ((!isNil '"+_randvar9+"') && {!isServer}) then {"+_randvar9+" spawn "+_RunOnClients+";"+_randvar9+" spawn "+_AH_RunCheckMAIN+";};"";               while {1 == 1} do               {                    _obj = 'C_man_1' createVehicle [0,0,0];_obj addMPEventHandler ['MPKilled',_one];_obj setDamage 5;deleteVehicle _obj;                    if ("+str _CLM+") then {"+_MC+" = allMapMarkers;publicVariable '"+_MC+"';};                    uiSleep 20;               };               _log = format['<infiSTAR.de> %1 - _RunOnClients LOOP - BROKEN!',diag_tickTime];               diag_log _log;               "+_AH_KICKLOG+" = ['SERVER','SERVER','HLOG',toArray _log];publicVariableServer '"+_AH_KICKLOG+"';          };     ");     diag_log format['<infiSTAR.de> %1 - AntiHack loaded!',diag_tickTime];     /* ********************************************************************************* */     /* *********************************www.infiSTAR.de********************************* */     /* *******************Developed by infiSTAR (infiSTAR23@gmail.com)****************** */     /* ******************Copyright © 2014 infiSTAR all rights reserved****************** */     /* ****DayZAntiHack.com***DayZAntiHack.de***ArmaAntiHack.com***Arma3AntiHack.com**** */