/*            File: A3AT.sqf            Author: Chris(tian) "infiSTAR" Lorenzen            Contact: infiSTAR23@gmail.com                        Description:            Arma AntiHack & AdminTools - infiSTAR.de      */      /* *******************Developer : infiSTAR (infiSTAR23@gmail.com)******************* */      /* ******************Copyright © 2014 infiSTAR all rights reserved****************** */      /* *********************************www.infiSTAR.de********************************* */      comment 'Antihack & AdminTools - Christian Lorenzen - www.infiSTAR.de - License: (CC)';      infiSTAR_MAIN_CODE = {            systemchat 'Loading Menu...';            ALT_IS_PRESSED=false;FILLMAINSTATE=0;            if (isNil 'AH_HackLogArray') then {AH_HackLogArray = [];};            if (isNil 'AH_SurvLogArray') then {AH_SurvLogArray = [];};            if (isNil 'AH_AdmiLogArray') then {AH_AdmiLogArray = [];};            if (isNil 'infiSTAR_toggled_A') then {infiSTAR_toggled_A = ['==== OnTarget ====','==== Toggleable ===='];};            if (isNil 'ALL_VEHS_TO_SEARCH') then            {                  ALL_VEHS_TO_SEARCH = [];                  _cfgvehicles = configFile >> 'cfgVehicles';                  for '_j' from 0 to (count _cfgvehicles)-1 do                  {                        _vehicle = _cfgvehicles select _j;                        if (isClass _vehicle) then                        {                              _veh_type = configName _vehicle;                              if ((getNumber (_vehicle >> 'scope') == 2) && (getText (_vehicle >> 'picture') != '') && ((_veh_type isKindOf 'Air') || (_veh_type isKindOf 'LandVehicle') || (_veh_type isKindOf 'Ship'))) then                              {                                    if !((_veh_type isKindOf 'ParachuteBase') || (_veh_type isKindOf 'BIS_Steerable_Parachute')) then                                    {                                          ALL_VEHS_TO_SEARCH pushBack _veh_type;                                    };                              };                        };                  };            };            if (isNil 'ALL_WEPS_TO_SEARCH') then            {                  ALL_WEPS_TO_SEARCH = [];                  _CfgWeapons = configFile >> 'CfgWeapons';                  for '_i' from 0 to (count _CfgWeapons)-1 do                  {                        _weapon = _CfgWeapons select _i;                        if (isClass _weapon) then                        {                              _wpn_type = configName _weapon;                              if (((getNumber (_weapon >> 'scope') == 0) || (getNumber (_weapon >> 'scope') == 2)) && (getText (_weapon >> 'picture') != '')) then                              {                                    if !(_wpn_type in ALL_WEPS_TO_SEARCH) then                                    {                                          ALL_WEPS_TO_SEARCH pushBack _wpn_type;                                    };                              };                        };                  };            };            if (isNil 'ALL_MAGS_TO_SEARCH') then            {                  ALL_MAGS_TO_SEARCH = [];                  _CfgWeapons = configFile >> 'cfgmagazines';                  for '_i' from 0 to (count _CfgWeapons)-1 do                  {                        _weapon = _CfgWeapons select _i;                        if (isClass _weapon) then                        {                              _wpn_type = configName(_weapon);                              if (((getNumber (_weapon >> 'scope') == 0) || (getNumber (_weapon >> 'scope') == 2)) && (getText (_weapon >> 'picture') != '')) then                              {                                    if !(_wpn_type in ALL_MAGS_TO_SEARCH) then                                    {                                          ALL_MAGS_TO_SEARCH pushBack _wpn_type;                                    };                              };                        };                  };            };            fnc_setFocus = {                  disableSerialization;                  ctrlSetFocus ((findDisplay MAIN_DISPLAY_ID) displayCtrl LEFT_CTRL_ID);                  ctrlSetFocus ((findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID);            };            fnc_addMenuMapHandler =            {                  disableSerialization;                  _MenuMap = ((findDisplay MAIN_DISPLAY_ID) displayCtrl 7);                  _MenuMap ctrlRemoveAllEventHandlers 'Draw';                  _MenuMap ctrlSetEventHandler ['Draw', '_this call fnc_draw_MapIcons'];                  _MenuMap ctrlRemoveAllEventHandlers 'MouseButtonDown';                  _MenuMap ctrlAddEventHandler ['MouseButtonDown','                  if (_this select 1 == 0) then                  {                        _pos = ((_this select 0) posScreenToWorld [_this select 2, _this select 3]);                        if (ALT_IS_PRESSED) then                        {                              _object = vehicle player;                              if (_object isKindOf ''AIR'') then                              {                                    _posObj = getPosATL _object;                                    _pos = [_pos select 0,_pos select 1,_posObj select 2];                              };                              if (str(crew _object) == str([player])) then                              {                                    _object setPosATL _pos;                              }                              else                              {                                    PVAH_AdminReq = [1,player,_object,_pos];publicVariableServer ''PVAH_AdminReq'';                              };                              ALT_IS_PRESSED = false;                              {player reveal _x;} foreach (position player nearObjects 50);                        };                        if (!isNil ''CALLED_EMP'') then                        {                              CALLED_EMP = nil;                              [_pos] call fnc_callEMP;                        };                  };'];            };            SortRangePlease = nil;SortAlphaPlease = true;            if (isNil 'infiSTAR_MenuSelected') then {infiSTAR_MenuSelected = 0;};            fnc_FULLinit =            {                  disableSerialization;                  if (infiSTAR_MenuSelected == 0) then                  {                        MAIN_DISPLAY_ID = 2727;                        LEFT_CTRL_ID = 1500;                        RIGHT_CTRL_ID = 1501;                        if (isNull findDisplay MAIN_DISPLAY_ID) then {createdialog 'RscDisplayLocWeaponInfo';uiSleep 0.15;};                  }                  else                  {                        MAIN_DISPLAY_ID = -1338;                        LEFT_CTRL_ID = 1500;                        RIGHT_CTRL_ID = 1501;                        if (isNull findDisplay MAIN_DISPLAY_ID) then {createdialog 'infiSTAR_AdminMenu';[] call fnc_addMenuMapHandler;};                  };                  [] call fnc_add_adminMainMapMovement;                  waitUntil {!isNull findDisplay MAIN_DISPLAY_ID};                  if (isNil 'infiSTAR_Layout_Selected') then {infiSTAR_Layout_Selected = 1};                  infiSTAR_add_weapons = nil;                  infiSTAR_add_magazines = nil;                  infiSTAR_add_vehicles = nil;                  [] spawn fnc_initMenu;            };            fnc_initMenu =            {                  disableSerialization;                  _display = findDisplay MAIN_DISPLAY_ID;                                    _ctrlL = _display displayCtrl LEFT_CTRL_ID;                  _ctrlL ctrlSetEventHandler ['LBDblClick', 'call fnc_LBDblClick_LEFT;[] call fnc_setFocus;'];                  _ctrlL ctrlSetEventHandler ['LBSelChanged', 'call fnc_LBSelChanged_LEFT;[] call fnc_setFocus;'];                  [] spawn fnc_fill_infiSTAR_Player;                                    _ctrlR = _display displayCtrl RIGHT_CTRL_ID;                  _ctrlR ctrlSetEventHandler ['LBDblClick', 'call fnc_LBDblClick_RIGHT;[] call fnc_setFocus;'];                  _ctrlR ctrlSetEventHandler ['LBSelChanged', 'call fnc_LBSelChanged_RIGHT;[] call fnc_setFocus;'];                  [0] call fnc_fill_infiSTAR_MAIN;                                    [] call fnc_setFocus;                  if (infiSTAR_MenuSelected == 0) then {                        if (infiSTAR_Layout_Selected == 1) exitWith                        {                              if (infiSTAR_MenuSelected == 0) then {                                    ctrlSetText [1000,'AntiHack & AdminsTools by infiSTAR.de'];                                    if (infiSTAR_MOD == 'AltisLife') then {ctrlSetText [1000,format['by infiSTAR.de | CASH: %1K - BANK: %2K',life_cash/1000,life_atmcash/1000]];};                                    ctrlSetText [1001,format['Alive Players: %1',count playableUnits]];                                    ctrlSetText [1002,'Functions --- by infiSTAR.de'];                                    ctrlSetText [1100,''];                                    ctrlSetText [1101,''];                                    ctrlSetText [1400,''];                                    ctrlSetText [1401,''];                                                                        _btnClose = (findDisplay MAIN_DISPLAY_ID) displayCtrl 2;                                    _btnClose ctrlShow false;                                    _btnClose ctrlEnable false;                                    _btnClose ctrlCommit 0;                              };                        };                        if (infiSTAR_Layout_Selected == 2) exitWith                        {                              _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl LEFT_CTRL_ID;                              _ctrl ctrlSetPosition [SafeZoneX,SafeZoneY+0.03,0.4,SafeZoneH-1.125];                              _ctrl ctrlCommit 0;                                                            _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID;                              _ctrl ctrlSetPosition [SafeZoneX+0.4,SafeZoneY+0.03,2,SafeZoneH-1.125];                              _ctrl ctrlCommit 0;                                                            if (infiSTAR_MenuSelected == 0) then {                                    _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1000;                                    _ctrl ctrlSetBackgroundColor [0,0,0,0.9];                                    _ctrl ctrlSetPosition [SafeZoneX,SafeZoneY,SafeZoneW,0.03];                                    _ctrl ctrlCommit 0;                                                                        ctrlSetText [1400,''];                                    _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1400;                                    _ctrl ctrlSetPosition [SafeZoneX,(SafeZoneY+0.03)+(SafeZoneH-1.125),SafeZoneW/2,0.04];                                    _ctrl ctrlCommit 0;                                                                        ctrlSetText [1401,''];                                    _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1401;                                    _ctrl ctrlSetPosition [SafeZoneX+(SafeZoneW/2),(SafeZoneY+0.03)+(SafeZoneH-1.125),SafeZoneW/2,0.04];                                    _ctrl ctrlCommit 0;                                                                        _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1100;                                    _ctrl ctrlSetBackgroundColor [0,0,0,0.5];                                    _ctrl ctrlSetPosition [SafeZoneX,SafeZoneY+0.03,0.4,SafeZoneH-1.125];                                    _ctrl ctrlEnable false;                                    _ctrl ctrlCommit 0;                                                                        _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1101;                                    _ctrl ctrlSetBackgroundColor [0,0,0,0.5];                                    _ctrl ctrlSetPosition [SafeZoneX+0.4,SafeZoneY+0.03,SafeZoneW - 0.4,SafeZoneH-1.125];                                    _ctrl ctrlEnable false;                                    _ctrl ctrlCommit 0;                                                                        ctrlSetText [1000,'AntiHack & AdminsTools by infiSTAR.de'];                                    if (infiSTAR_MOD == 'AltisLife') then {ctrlSetText [1000,format['by infiSTAR.de | CASH: %1K - BANK: %2K',life_cash/1000,life_atmcash/1000]];};                                                                        {                                          _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl _x;                                          if (!isNull _ctrl) then                                          {                                                _ctrl ctrlShow false;                                                _ctrl ctrlEnable false;                                                _ctrl ctrlSetPosition [0,0,0,0];                                                _ctrl ctrlCommit 0;                                          };                                    } forEach [2,1001,1002,11000,11001,11002,11100,11200,11201];                              };                        };                  }                  else                  {                        _hours = floor(servertime/60/60);                        _minutes = (round(serverTime/60)-(_hours*60));                        _ctrl = _display displayCtrl 2;                        _ctrl ctrlSetText format['Players %1 of %2               infiSTAR.de - Admin Menu - SERVER UP FOR: %3h %4min',count playableUnits,playersNumber civilian,_hours,_minutes];                                                _ctrl = _display displayCtrl LEFT_CTRL_ID;                        if (isNil 'ctrlpos1') then {ctrlpos1 = ctrlPosition _ctrl;};                                                _ctrl = _display displayCtrl 3;                        if (isNil 'ctrlpos3') then {ctrlpos3 = ctrlPosition _ctrl;};                                                _idk = _display displayCtrl 7;                        _idk ctrlSetEventHandler ['MouseButtonClick', '[] call fnc_setFocus;'];                        _idk ctrlSetEventHandler ['MouseMoving', '[] call fnc_setFocus;'];                        _idk ctrlSetEventHandler ['MouseHolding', '[] call fnc_setFocus;'];                        _idk ctrlSetEventHandler ['MouseZChanged', '[] call fnc_setFocus;'];                                                _btnSortRange = _display displayCtrl 10;                        _btnSortRange buttonSetAction 'SortAlphaPlease = nil;SortRangePlease = true;[] spawn fnc_fill_infiSTAR_Player;[] call fnc_setFocus;';                                                _btnSortAlpha = _display displayCtrl 11;                        _btnSortAlpha buttonSetAction 'SortRangePlease = nil;SortAlphaPlease = true;[] spawn fnc_fill_infiSTAR_Player;[] call fnc_setFocus;';                                                _btnMainMenu = _display displayCtrl 20;                        _btnMainMenu buttonSetAction '[0] call fnc_fill_infiSTAR_MAIN;[] call fnc_setFocus;';                                                _btnAntiSpawnMenu = _display displayCtrl 21;                        _btnAntiSpawnMenu buttonSetAction '[1] call fnc_fill_infiSTAR_MAIN;[] call fnc_setFocus;';                                                _btnAntiHackLog = _display displayCtrl 23;                        _btnAntiHackLog ctrlSetText (format['AHLogs: %1',count AH_HackLogArray + count AH_SurvLogArray + count PVAH_AHTMPBAN]);                        _btnAntiHackLog buttonSetAction 'FILLMAINSTATE = 3;[] call fnc_fill_HackLog;[] call fnc_setFocus;';                                                _btnAdminLog = _display displayCtrl 24;                        _btnAdminLog ctrlSetText (format['AdminLogs: %1',count AH_AdmiLogArray]);                        _btnAdminLog buttonSetAction 'FILLMAINSTATE = 4;[] call fnc_fill_AdminLog;[] call fnc_setFocus;';                                                                        _backgroundInputBox = _display displayCtrl 30;                        _backgroundInputBox ctrlEnable false;                        _backgroundInputBox ctrlShow false;                                                _rscinputbox = _display displayCtrl 31;                        _rscinputbox ctrlEnable false;                        _rscinputbox ctrlShow false;                                                _rscbtnOK = _display displayCtrl 32;                        _rscbtnOK ctrlEnable false;                        _rscbtnOK ctrlShow false;                                                _rscbtnCANCEL = _display displayCtrl 33;                        _rscbtnCANCEL ctrlEnable false;                        _rscbtnCANCEL ctrlShow false;                                                _rsctext = _display displayCtrl 34;                        _rsctext ctrlEnable false;                        _rsctext ctrlShow false;                  };            };            fnc_colorizeMain =            {                  disableSerialization;                  _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID;                  _lsize = lbSize RIGHT_CTRL_ID;                  for '_i' from 0 to _lsize do                  {                        _lbtxt = lbtext [RIGHT_CTRL_ID,_i];                        if (_lbtxt in infiSTAR_Toggleable) then                        {                              if (_lbtxt in infiSTAR_toggled_A) then                              {                                    _ctrl lbSetColor [_i,[0,1,0,1]];                              }                              else                              {                                    _ctrl lbSetColor [_i,[1,0,0,1]];                              };                        };                        if (_lbtxt in infiSTAR_SubMenus) then                        {                              _ctrl lbSetColor [_i,[0.2,0.4,1,1]];                        };                        if (_lbtxt in infiSTAR_OnTargetNICE) then                        {                              _ctrl lbSetColor [_i,COLORNICE];                        };                        if (_lbtxt in infiSTAR_OnTargetEVIL) then                        {                              _ctrl lbSetColor [_i,COLOREVIL];                        };                  };            };            fnc_colorButtons =            {                  disableSerialization;                  _display = findDisplay MAIN_DISPLAY_ID;                  _btnMainMenu = _display displayCtrl 20;                  if (FILLMAINSTATE == 0) then {_btnMainMenu ctrlSetTextColor [0,1,0,1];} else {_btnMainMenu ctrlSetTextColor [1,1,1,1];};                  _btnAntiSpawnMenu = _display displayCtrl 21;                  if (FILLMAINSTATE == 1) then {_btnAntiSpawnMenu ctrlSetTextColor [0,1,0,1];} else {_btnAntiSpawnMenu ctrlSetTextColor [1,1,1,1];};                  _btnAntiHackLog = _display displayCtrl 23;                  if (FILLMAINSTATE == 3) then {_btnAntiHackLog ctrlSetTextColor [0,1,0,1];} else {_btnAntiHackLog ctrlSetTextColor [1,1,1,1];};                  _btnAdminLog = _display displayCtrl 24;                  if (FILLMAINSTATE == 4) then {_btnAdminLog ctrlSetTextColor [0,1,0,1];} else {_btnAdminLog ctrlSetTextColor [1,1,1,1];};                                    _ctrlMAP = _display displayCtrl 7;                  _ctrlR = _display displayCtrl RIGHT_CTRL_ID;                  if (isNil 'ctrlposMap') then {ctrlposMap = ctrlPosition _ctrlMAP;};                  if (isNil 'ctrlposR') then {ctrlposR = ctrlPosition _ctrlR;};                  _time = 0.3;                  if ((FILLMAINSTATE == 3) || (FILLMAINSTATE == 4)) then                  {                        _ctrlR ctrlSetPosition [(ctrlposR select 0),(ctrlposR select 1),(ctrlposR select 2)*2.75,(ctrlposR select 3)];                        _ctrlR ctrlCommit _time;                                                _ctrlMAP ctrlSetPosition [(ctrlposMap select 2)+(ctrlposMap select 2),(ctrlposMap select 1),(ctrlposMap select 2),(ctrlposMap select 3)];                        _ctrlMAP ctrlCommit _time;                  }                  else                  {                        _ctrlMAP ctrlSetPosition ctrlposMap;                        _ctrlMAP ctrlCommit _time;                                                _ctrlR ctrlSetPosition ctrlposR;                        _ctrlR ctrlCommit _time;                  };            };            fnc_fill_HackLog =            {                  disableSerialization;                  _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID;                  lbclear _ctrl;                  _ctrl lbAdd 'clear ingame HackLog';                  _ctrl lbAdd 'DBL-CLICK TO SYSTEMCHAT';                  _ctrl lbAdd '--------------------';                                    _ctrl lbAdd format['HackLog: %1',count AH_HackLogArray];                  {_ctrl lbAdd _x;} forEach AH_HackLogArray;                                    _ctrl lbAdd '';                  _ctrl lbAdd format['SurveillanceLog: %1',count AH_SurvLogArray];                  {_ctrl lbAdd _x;} forEach AH_SurvLogArray;                                    _ctrl lbAdd '';                  _ctrl lbAdd format['BanLog: %1',count PVAH_AHTMPBAN];                  if (str PVAH_AHTMPBAN != '[]') then                  {                        _ctrl lbAdd 'DBL-CLICK TO REMOVE';                        {_ctrl lbAdd _x;} forEach PVAH_AHTMPBAN;                  };                  [] call fnc_colorButtons;            };            fnc_fill_AdminLog =            {                  disableSerialization;                  _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID;                  lbclear _ctrl;                  _ctrl lbAdd 'clear ingame AdminLog';                  _ctrl lbAdd 'DBL-CLICK TO SYSTEMCHAT';                  {_ctrl lbAdd _x;} forEach AH_AdmiLogArray;                  [] call fnc_colorButtons;            };            fnc_fill_infiSTAR_MAIN =            {                  disableSerialization;                  FILLMAINSTATE = _this select 0;                  if (infiSTAR_MenuSelected != 0) then {[] call fnc_colorButtons;};                                    _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl RIGHT_CTRL_ID;                  lbclear _ctrl;                  _ADMINLEVELACCESS = call ADMINLEVELACCESS;                                    COLORNICE = [0,0.8,1,1];                  COLOREVIL = [0.99,0.8,0.8,1];                  SHOWHACKLOG = format['==== AHLogs: %1 ====',count AH_HackLogArray + count AH_SurvLogArray + count PVAH_AHTMPBAN];                  SHOWTADMINLOG = format['==== AdminLogs: %1 ====',count AH_AdmiLogArray];                                    infiSTAR_SubMenus =                  [                        SHOWHACKLOG,SHOWTADMINLOG,                        '==== Weapons ====','==== Magazines ====','==== Vehicles ====',                        '==== Loadouts ====','==== OnTarget ====','==== Toggleable ====',                        '==== AltisLife Misc ====','==== AltisLife Money ===='                  ];                  infiSTAR_OnTargetNICE =                  [                        'Teleport Target To Me','Teleport To','Copy Gear',                        'Revive','Heal','Repair',                        'Move In My Vehicle','Move In Target Vehicle'                  ];                  if (infiSTAR_MOD != 'Epoch') then                  {                        {                              infiSTAR_OnTargetNICE = infiSTAR_OnTargetNICE - [_x];                        } forEach ['Revive'];                  };                  infiSTAR_OnTargetEVIL =                  [                        'Spawn UAV','Spawn Epoch_Cloak_F','Spawn Sapper_F','Spawn GreatWhite_F',                        'Eject','Eject Crew','Kill','Zeus','Delete Vehicle',                        'Force Disconnect','Kick','Ban'                  ];                  if (infiSTAR_MOD != 'Epoch') then                  {                        {                              infiSTAR_OnTargetEVIL = infiSTAR_OnTargetEVIL - [_x];                        } forEach ['Spawn UAV','Spawn Epoch_Cloak_F','Spawn Sapper_F','Spawn GreatWhite_F'];                  };                  infiSTAR_OnTarget = infiSTAR_OnTargetNICE + infiSTAR_OnTargetEVIL;                  infiSTAR_Toggleable =                  [                        'Box-ESP','Map-Icons','PlotPole Marker','Vehicle Marker','Construction Marker','DeadPlayer Marker',                        'God Mode','Vehicle God Mode','Lower Terrain','Vehboost','UnlimAmmo','noRecoil','FastFire',                        'Stealth / Invisible','Disable Announces','Show FPS'                  ];                  if (infiSTAR_MOD != 'Epoch') then                  {                        {                              infiSTAR_Toggleable = infiSTAR_Toggleable - [_x];                        } forEach ['PlotPole Marker','Construction Marker'];                  };                  if (infiSTAR_MOD == 'AltisLife') then                  {                        {                              infiSTAR_Toggleable = infiSTAR_Toggleable - [_x];                        } forEach ['noRecoil'];                  };                  infiSTAR_AltisLifeMisc =                  [                        'Give All Liscenses'                  ];                  infiSTAR_AltisLifeMoney =                  [                        'CASH','BANK',                        '---',                        '50K Cash','100K Cash','250K Cash','500K Cash','750K Cash','1.150K Cash','2.500K Cash','5.000K Cash','10.000K Cash',                        '50K Bank','100K Bank','250K Bank','500K Bank','750K Bank','1.150K Bank','2.500K Bank','5.000K Bank','10.000K Bank'                  ];                  infiSTAR_Loadouts =                  [                        'Epoch 1','Epoch 2',                        'Sub Machinegun Kit','Light Infantry Kit','Heavy Infantry Kit','DMR Sniper Kit','LLR Sniper Kit',                        'Lynx Sniper Kit'                  ];                  if (infiSTAR_MOD != 'Epoch') then                  {                        {                              infiSTAR_Loadouts = infiSTAR_Loadouts - [_x];                        } forEach ['Epoch 1','Epoch 2'];                  };                                    if (infiSTAR_MenuSelected == 0) then                  {                        _ctrl lbAdd SHOWHACKLOG;                        if (!isNil 'infiSTAR_add_HackLog') then                        {                              _ctrl lbAdd 'clear ingame HackLog';                              _ctrl lbAdd 'DBL-CLICK TO SYSTEMCHAT';                              _ctrl lbAdd '--------------------';                                                            _ctrl lbAdd format['HackLog: %1',count AH_HackLogArray];                              {_ctrl lbAdd _x;} forEach AH_HackLogArray;                                                            _ctrl lbAdd '';                              _ctrl lbAdd format['SurveillanceLog: %1',count AH_SurvLogArray];                              {_ctrl lbAdd _x;} forEach AH_SurvLogArray;                                                            _ctrl lbAdd '';                              _ctrl lbAdd format['BanLog: %1',count PVAH_AHTMPBAN];                              if (str PVAH_AHTMPBAN != '[]') then                              {                                    _ctrl lbAdd 'DBL-CLICK TO REMOVE';                                    {_ctrl lbAdd _x;} forEach PVAH_AHTMPBAN;                              };                        };                                                _ctrl lbAdd SHOWTADMINLOG;                        if (!isNil 'infiSTAR_add_Admin') then                        {                              _ctrl lbAdd 'clear ingame AdminLog';                              _ctrl lbAdd 'DBL-CLICK TO SYSTEMCHAT';                                                            {                                    _ctrl lbAdd _x;                              } forEach AH_AdmiLogArray;                        };                  };                  if ((FILLMAINSTATE == 1) || (infiSTAR_MenuSelected == 0)) then                  {                        if ('==== Weapons ====' in _ADMINLEVELACCESS) then                        {                              _ctrl lbAdd '==== Weapons ====';                              if (!isNil 'infiSTAR_add_weapons') then                              {                                    {                                          _ctrl lbAdd _x;                                          _ctrl lbSetPicture [(lbsize _ctrl)-1,(getText (configFile >> 'CfgWeapons' >> _x >> 'picture'))];                                    } forEach ALL_WEPS_TO_SEARCH;                              };                        };                                                if ('==== Magazines ====' in _ADMINLEVELACCESS) then                        {                              _ctrl lbAdd '==== Magazines ====';                              if (!isNil 'infiSTAR_add_magazines') then                              {                                    {                                          _ctrl lbAdd _x;                                          _ctrl lbSetPicture [(lbsize _ctrl)-1,(getText (configFile >> 'CfgMagazines' >> _x >> 'picture'))];                                    } forEach ALL_MAGS_TO_SEARCH;                              };                        };                                                if ('==== Vehicles ====' in _ADMINLEVELACCESS) then                        {                              _ctrl lbAdd '==== Vehicles ====';                              if (!isNil 'infiSTAR_add_vehicles') then                              {                                    {                                          _ctrl lbAdd _x;                                          _ctrl lbSetPicture [(lbsize _ctrl)-1,(getText (configFile >> 'CfgVehicles' >> _x >> 'picture'))];                                    } forEach ALL_VEHS_TO_SEARCH;                              };                        };                                                if ('==== Loadouts ====' in _ADMINLEVELACCESS) then                        {                              _ctrl lbAdd '==== Loadouts ====';                              if (!isNil 'infiSTAR_add_Loadouts') then                              {                                    {                                          _ctrl lbAdd _x;                                    } forEach infiSTAR_Loadouts;                              };                        };                  };                  if ((FILLMAINSTATE == 0) || (infiSTAR_MenuSelected == 0)) then                  {                        _ctrl lbAdd '==== OnTarget ====';                        if (isNil 'infiSTAR_add_OnTarget') then                        {                              {                                    if (_x in _ADMINLEVELACCESS) then                                    {                                          _ctrl lbAdd _x;                                    };                              } forEach infiSTAR_OnTargetNICE;                              _ctrl lbAdd '---';                              {                                    if (_x in _ADMINLEVELACCESS) then                                    {                                          _ctrl lbAdd _x;                                    };                              } forEach infiSTAR_OnTargetEVIL;                        };                                                _ctrl lbAdd '==== Toggleable ====';                        if (isNil 'infiSTAR_add_Toggleable') then                        {                              {                                    if (_x in _ADMINLEVELACCESS) then                                    {                                          _ctrl lbAdd _x;                                    };                              } forEach infiSTAR_Toggleable;                        };                                                if (infiSTAR_MOD == 'AltisLife') then                        {                              _ctrl lbAdd '==== AltisLife Misc ====';                              if (!isNil 'infiSTAR_add_AltisLife') then                              {                                    {                                          if (_x in _ADMINLEVELACCESS) then                                          {                                                _ctrl lbAdd _x;                                          };                                    } forEach infiSTAR_AltisLifeMisc;                              };                              if ('==== AltisLife Money ====' in _ADMINLEVELACCESS) then                              {                                    _ctrl lbAdd '==== AltisLife Money ====';                                    if (!isNil 'infiSTAR_add_AltisLifeMoney') then                                    {                                          {                                                _ctrl lbAdd _x;                                          } forEach infiSTAR_AltisLifeMoney;                                          _ctrl lbAdd '';                                    };                              };                        };                                                if ('Call EMP' in _ADMINLEVELACCESS) then {_ctrl lbAdd 'Call EMP'};                        if ('Mass Message' in _ADMINLEVELACCESS) then {_ctrl lbAdd 'Mass Message';};                        if ('DayTime' in _ADMINLEVELACCESS) then {_ctrl lbAdd 'DayTime';};                        if ('NightTime' in _ADMINLEVELACCESS) then {_ctrl lbAdd 'NightTime';};                        if ('Add 2500 Crypto' in _ADMINLEVELACCESS) then {if (infiSTAR_MOD == 'Epoch') exitWith {_ctrl lbAdd 'Add 2500 Crypto';};};                        if ('Spawn Epoch-Box' in _ADMINLEVELACCESS) then {if (infiSTAR_MOD == 'Epoch') exitWith {_ctrl lbAdd 'Spawn Epoch-Box';};};                        if ('Spawn Ammo' in _ADMINLEVELACCESS) then {_ctrl lbAdd 'Spawn Ammo';};                                                if (infiSTAR_MenuSelected == 0) then                        {                              _ctrl lbAdd '---';                              _ctrl lbAdd 'Menu Layout 1';                              _ctrl lbAdd 'Menu Layout 2';                        };                                                _ctrl lbAdd '---';                        _ctrl lbAdd 'Self Disconnect';                        _ctrl lbAdd '---';                        _target = lbtext [LEFT_CTRL_ID, (lbCurSel LEFT_CTRL_ID)];                        if (isNil 'serverCommandLoginDone') then {_ctrl lbAdd 'Login';};                        _ctrl lbAdd format['#kick %1',_target];                        _ctrl lbAdd format['#exec ban %1',str _target];                  };                  [] call fnc_colorizeMain;            };            fnc_infiSTAR_get_LeftClicks = {                  _y = playableUnits+allDeadMen;                  _y            };            fnc_fill_infiSTAR_Player =            {                  disableSerialization;                  if (!isNil 'filling_infiSTAR_Player') exitWith {};                  filling_infiSTAR_Player = true;                  _ctrl = (findDisplay MAIN_DISPLAY_ID) displayCtrl LEFT_CTRL_ID;                  lbclear _ctrl;                  _puid = getPlayerUID player;                  _fnc_testFill = {                        _x = _unit;                        _PUIDX = getPlayerUID _x;                        if (_PUIDX != '') then                        {                              _txt = name _x;                              if (infiSTAR_MOD != 'Epoch') then {_txt = format['%1 [%2]',name _x,side _x]};                              _ctrl lbAdd _txt;                              _ctrl lbSetData [(lbsize _ctrl)-1,'1'];                              _clr = [1,1,1,1];                              _veh = vehicle _x;                              _plrpic = getText (configFile >> 'CfgVehicles' >> (typeOf _veh) >> 'picture');                              if (alive _x) then                              {                                    _clr = [0.2,0.2,0.9,1];                                    if (_x == _veh) then                                    {                                          _clr = [1,0.17,0.17,1];                                          _wpnstate = weaponState _x;                                          _cwep = _wpnstate select 0;                                          if (_cwep != '') then                                          {                                                _plrpic = getText (configFile >> 'CfgWeapons' >> _cwep >> 'picture');                                          };                                    };                              };                              if (((_PUIDX in infiSTAR_ADMINS) && !(_PUIDX in infiSTAR_DEVS)) || ((_PUIDX in infiSTAR_DEVS) && (_puid in infiSTAR_DEVS)) || (_PUIDX == _puid)) then                              {                                    _clr = [0,1,0,1];                              };                              _ctrl lbSetColor [(lbsize _ctrl)-1,_clr];                              _ctrl lbSetPicture [(lbsize _ctrl)-1,_plrpic];                        };                  };                  _unsorted = call fnc_infiSTAR_get_LeftClicks;                  lbclear _ctrl;                  if (!isNil 'SortRangePlease') then {                        {                              _closest = _unsorted select 0;                              {if ((_x distance player) < (_closest distance player)) then {_closest = _x}} forEach _unsorted;                              _unsorted = _unsorted - [_closest];                              _unit = _closest;                              call _fnc_testFill;                              true                        } count _unsorted;                  }                  else                  {                        {_unit=_x;call _fnc_testFill;true} count _unsorted;                  };                  if (!isNil 'SortAlphaPlease') then {lbSort _ctrl;};                  _ctrl lbAdd '--------------------';                  if (infiSTAR_MenuSelected == 0) then {                        _ctrl lbAdd 'Sort by Range';if (!isNil 'SortRangePlease') then {_ctrl lbSetColor [(lbsize _ctrl)-1,[0,1,0,1]];} else {_ctrl lbSetColor [(lbsize _ctrl)-1,[1,1,1,1]];};                        _ctrl lbAdd 'Sort by Name';if (!isNil 'SortAlphaPlease') then {_ctrl lbSetColor [(lbsize _ctrl)-1,[0,1,0,1]];} else {_ctrl lbSetColor [(lbsize _ctrl)-1,[1,1,1,1]];};                        _ctrl lbAdd '--------------------';                  }                  else                  {                        _display = findDisplay MAIN_DISPLAY_ID;                        _btnSortRange = _display displayCtrl 10;                        if (!isNil 'SortRangePlease') then {_btnSortRange ctrlSetTextColor [0,1,0,1];} else {_btnSortRange ctrlSetTextColor [1,1,1,1];};                        _btnSortAlpha = _display displayCtrl 11;                        if (!isNil 'SortAlphaPlease') then {_btnSortAlpha ctrlSetTextColor [0,1,0,1];} else {_btnSortAlpha ctrlSetTextColor [1,1,1,1];};                  };                  _ctrl lbAdd 'Green -> Admin';_ctrl lbSetColor [(lbsize _ctrl)-1,[0,1,0,1]];                  _ctrl lbAdd 'Red -> Player';_ctrl lbSetColor [(lbsize _ctrl)-1,[1,0.17,0.17,1]];                  _ctrl lbAdd 'Blue -> Player in Vehicle';_ctrl lbSetColor [(lbsize _ctrl)-1,[0.2,0.2,0.9,1]];                  _ctrl lbAdd 'White -> Dead Player';_ctrl lbSetColor [(lbsize _ctrl)-1,[1,1,1,1]];                  filling_infiSTAR_Player = nil;            };            fnc_LBDblClick_LEFT =            {                  _target = lbtext [LEFT_CTRL_ID, (lbCurSel LEFT_CTRL_ID)];                                    if (_target == 'Sort by Range') then {SortAlphaPlease = nil;SortRangePlease = true;[] spawn fnc_fill_infiSTAR_Player;[] call fnc_setFocus;};                  if (_target == 'Sort by Name') then {SortRangePlease = nil;SortAlphaPlease = true;[] spawn fnc_fill_infiSTAR_Player;[] call fnc_setFocus;};                                    SELECTED_DOUBLECLICK_TARGET = objNull;                  if (!isNil 'SELECTED_TARGET_PLAYER') then                  {                        if (!isNull SELECTED_TARGET_PLAYER) then                        {                              SELECTED_DOUBLECLICK_TARGET = SELECTED_TARGET_PLAYER;                        };                  };                  if (isNull SELECTED_DOUBLECLICK_TARGET) then                  {                        _break = false;                        {                              _puid = getPlayerUID _x;                              if (_puid != '') then                              {                                    _search = name _x;                                    if (infiSTAR_MOD != 'Epoch') then {_search = format['%1 [%2]',name _x,side _x]};                                    if (_search == _target) then                                    {                                          _break = true;                                          SELECTED_DOUBLECLICK_TARGET = _x;                                    };                              };                              if (_break) exitWith {true};                              true;                        } count (call fnc_infiSTAR_get_LeftClicks);                  };                  _ADMINLEVELACCESS = call ADMINLEVELACCESS;                  if ('spectating' in _ADMINLEVELACCESS) then {[] spawn adminspec;};            };            fnc_LBSelChanged_LEFT =            {                  _target = lbtext [LEFT_CTRL_ID, (lbCurSel LEFT_CTRL_ID)];                                    _break = false;                  _health = '';                  _distance = '';                  _data = '';                  _puid = '';                  SELECTED_TARGET_PLAYER = objNull;                  {                        _puid = getPlayerUID _x;                        if (_puid != '') then                        {                              _search = name _x;                              if (infiSTAR_MOD != 'Epoch') then {_search = format['%1 [%2]',name _x,side _x]};                              if (_search == _target) then                              {                                    _break = true;                                    SELECTED_TARGET_PLAYER = _x;                              };                        };                        if (_break) exitWith {true};                        true;                  } count (call fnc_infiSTAR_get_LeftClicks);                                    if (isNil 'SELECTED_TARGET_PLAYER') then {SELECTED_TARGET_PLAYER = objNull;};                  if (!isNull SELECTED_TARGET_PLAYER) then                  {                        _health = round(100 - ((damage SELECTED_TARGET_PLAYER)*100));                        _distance = round(SELECTED_TARGET_PLAYER distance player);                        if (infiSTAR_MenuSelected == 0) then {                              _log = format['%1m - HP: %2 - UID: %3',_distance,_health,_puid];                              ctrlSetText [1400,_log];                        };                  };            };            fnc_LBDblClick_RIGHT =            {                  _click = lbtext [RIGHT_CTRL_ID, (lbCurSel RIGHT_CTRL_ID)];                  if (_click == '') exitWith {};                  if (_click in AH_HackLogArray) exitWith {systemchat _click;hint _click;diag_log _click;};                  if (_click in AH_SurvLogArray) exitWith {systemchat _click;hint _click;diag_log _click;};                  if (_click in AH_AdmiLogArray) exitWith {systemchat _click;hint _click;diag_log _click;};                  if (_click in PVAH_AHTMPBAN) exitWith {                        PVAH_AdminReq = [-667,player,_click];publicVariableServer 'PVAH_AdminReq';                        systemchat format['Removed  %1  from TempBan Variable',_click];                        systemchat '(might still be banned in ban.txt/bans.txt)';                        if (infiSTAR_MenuSelected != 0) then {[] call fnc_fill_AdminLog;[] call fnc_setFocus;};                  };                  if (_click in infiSTAR_Toggleable) then                  {                        if (_click == 'Box-ESP') then {[] spawn infiSTAR_fnc_boxesp;};                        if (_click == 'Map-Icons') then {[] spawn infiSTAR_A3MAPICONS;};                        if (_click == 'PlotPole Marker') then {[] spawn adminPlotPole;};                        if (_click == 'Vehicle Marker') then {[] spawn adminVehicleMarker;};                        if (_click == 'Construction Marker') then {[] spawn adminConstructions;};                        if (_click == 'DeadPlayer Marker') then {[] spawn adminDeadPlayer;};                        if (_click == 'God Mode') then {[] spawn infiSTAR_A3Invulnerability;};                        if (_click == 'Vehicle God Mode') then {[] spawn fnc_infiSTAR_A3cargod;};                        if (_click == 'Lower Terrain') then {[] spawn fnc_LowerTerrain;};                        if (_click == 'Vehboost') then {[] spawn infiSTAR_VehicleBoost;};                        if (_click == 'UnlimAmmo') then {[] spawn fnc_infiSTAR_A3UnlAmmo;};                        if (_click == 'noRecoil') then {[] spawn fnc_infiSTAR_A3noRecoil;};                        if (_click == 'FastFire') then {[] spawn fnc_infiSTAR_A3FF;};                        if (_click == 'Stealth / Invisible') then {[] spawn fnc_infiSTARHIDE;};                        if (_click == 'Disable Announces') then {[] spawn fnc_DisableAnnouncements;};                        if (_click == 'Show FPS') then {[] call infiSTAR_A3showfps;};                                                if (_click in infiSTAR_toggled_A) then                        {                              lbSetColor [RIGHT_CTRL_ID, _click, [1,0,0,1]];                              infiSTAR_toggled_A = infiSTAR_toggled_A - [_click];                              format['%1 - 0',_click] call fnc_adminLog;                        }                        else                        {                              lbSetColor [RIGHT_CTRL_ID,_click,[0,1,0,1]];                              infiSTAR_toggled_A pushBack _click;                              format['%1 - 1',_click] call fnc_adminLog;                        };                  };                  if (_click in infiSTAR_OnTarget) then                  {                        _target = lbtext [LEFT_CTRL_ID, (lbCurSel LEFT_CTRL_ID)];                        if (_target == '') then                        {                              hint 'You did not select a Target!';                        }                        else                        {                              if (isNil 'SELECTED_TARGET_PLAYER') then {SELECTED_TARGET_PLAYER = objNull;};                              _unit = SELECTED_TARGET_PLAYER;                              if (isNull _unit) then                              {                                    _unit = objNull;                                    _break = false;                                    {                                          if (getPlayerUID _x != '') then                                          {                                                _search = name _x;                                                if (infiSTAR_MOD != 'Epoch') then {_search = format['%1 [%2]',name _x,side _x]};                                                if (_search == _target) then                                                {                                                      _break = true;                                                      _unit = _x;                                                };                                          };                                          if (_break) exitWith {true};                                          true                                    } count (call fnc_infiSTAR_get_LeftClicks);                              };                              if (!isNull _unit) then                              {                                    if (_click == 'Teleport Target To Me') then {[_unit] call fnc_TP2ME;};                                    if (_click == 'Teleport To') then {[_unit] call fnc_TPME2;};                                    if (_click == 'Copy Gear') then {[_unit] call fnc_copyGear;};                                    if (_click == 'Revive') then {[_unit] call fnc_ReviveTarget;};                                    if (_click == 'Heal') then {[_unit] call fnc_HealTarget;};                                    if (_click == 'Repair') then {[_unit] call fnc_RepairTarget;};                                    if (_click == 'Move In My Vehicle') then {[_unit] call fnc_MoveInMyVehicle;};                                    if (_click == 'Move In Target Vehicle') then {[_unit] call fnc_MoveInTargetVehicle;};                                                                        if (_click == 'Spawn UAV') then {[_unit,'UAV'] call fnc_spawn_EVENT;};                                    if (_click == 'Spawn Epoch_Cloak_F') then {[_unit,'Epoch_Cloak_F'] call fnc_spawn_EVENT;};                                    if (_click == 'Spawn Sapper_F') then {[_unit,'Epoch_Sapper_F'] call fnc_spawn_EVENT;};                                    if (_click == 'Spawn GreatWhite_F') then {[_unit,'GreatWhite_F'] call fnc_spawn_EVENT;};                                    if (_click == 'Eject') then {[_unit] call fnc_EjectTargetVeh;};                                    if (_click == 'Eject Crew') then {[_unit] call fnc_EjectCrewTargetVeh;};                                    if (_click == 'Kill') then {[_unit] call fnc_Kill_selected;};                                    if (_click == 'Zeus') then {[_unit] spawn zeus_attack;};                                    if (_click == 'Delete Vehicle') then {[_unit] call fnc_deleteVeh_selected;};                                    if (_click == 'Force Disconnect') then {[_unit] call fnc_Disconnect_selected;};                                    if (_click == 'Kick') then {[_unit] call fnc_Kick_selected;};                                    if (_click == 'Ban') then {[_unit] call fnc_Ban_selected;};                                                                        _log = format['%1 - %2',_click,_target];_log call fnc_adminLog;                              };                        };                  };                  if (infiSTAR_MOD == 'AltisLife') then                  {                        if (_click in infiSTAR_AltisLifeMisc) then                        {                              if (_click == 'Give All Liscenses') then {{missionnamespace setVariable[(_x select 0),true];} foreach life_licenses;};                              _click call fnc_adminLog;                        };                        if (_click in infiSTAR_AltisLifeMoney) then                        {                              if (_click == '50K Cash') then {['cash',50000] call fnc_AltisLife_cash;};                              if (_click == '100K Cash') then {['cash',100000] call fnc_AltisLife_cash;};                              if (_click == '250K Cash') then {['cash',250000] call fnc_AltisLife_cash;};                              if (_click == '500K Cash') then {['cash',500000] call fnc_AltisLife_cash;};                              if (_click == '750K Cash') then {['cash',750000] call fnc_AltisLife_cash;};                              if (_click == '1.150K Cash') then {['cash',1150000] call fnc_AltisLife_cash;};                              if (_click == '2.500K Cash') then {['cash',2500000] call fnc_AltisLife_cash;};                              if (_click == '5.000K Cash') then {['cash',5000000] call fnc_AltisLife_cash;};                              if (_click == '10.000K Cash') then {['cash',10000000] call fnc_AltisLife_cash;};                                                            if (_click == '50K Bank') then {['bank',50000] call fnc_AltisLife_cash;};                              if (_click == '100K Bank') then {['bank',100000] call fnc_AltisLife_cash;};                              if (_click == '250K Bank') then {['bank',250000] call fnc_AltisLife_cash;};                              if (_click == '500K Bank') then {['bank',500000] call fnc_AltisLife_cash;};                              if (_click == '750K Bank') then {['bank',750000] call fnc_AltisLife_cash;};                              if (_click == '1.150K Bank') then {['bank',1150000] call fnc_AltisLife_cash;};                              if (_click == '2.500K Bank') then {['bank',2500000] call fnc_AltisLife_cash;};                              if (_click == '5.000K Bank') then {['bank',5000000] call fnc_AltisLife_cash;};                              if (_click == '10.000K Bank') then {['bank',10000000] call fnc_AltisLife_cash;};                              _click call fnc_adminLog;                        };                  };                  if (_click in infiSTAR_Loadouts) then                  {                        if (_click == 'Epoch 1') then {[0] call fnc_add_loadout;};                        if (_click == 'Epoch 2') then {[1] call fnc_add_loadout;};                        if (_click == 'Sub Machinegun Kit') then {[2] call fnc_add_loadout;};                        if (_click == 'Light Infantry Kit') then {[3] call fnc_add_loadout;};                        if (_click == 'Heavy Infantry Kit') then {[4] call fnc_add_loadout;};                        if (_click == 'DMR Sniper Kit') then {[5] call fnc_add_loadout;};                        if (_click == 'LLR Sniper Kit') then {[6] call fnc_add_loadout;};                        if (_click == 'Lynx Sniper Kit') then {[7] call fnc_add_loadout;};                        _click call fnc_adminLog;                  };                  if (_click == '==== OnTarget ====') then {if (isNil 'infiSTAR_add_OnTarget') then {infiSTAR_add_OnTarget = true;} else {infiSTAR_add_OnTarget = nil;};};                  if (_click == '==== Toggleable ====') then {if (isNil 'infiSTAR_add_Toggleable') then {infiSTAR_add_Toggleable = true;} else {infiSTAR_add_Toggleable = nil;};};                  if (_click == '==== AltisLife Misc ====') then {if (isNil 'infiSTAR_add_AltisLife') then {infiSTAR_add_AltisLife = true;} else {infiSTAR_add_AltisLife = nil;};};                  if (_click == '==== AltisLife Money ====') then {if (isNil 'infiSTAR_add_AltisLifeMoney') then {infiSTAR_add_AltisLifeMoney = true;} else {infiSTAR_add_AltisLifeMoney = nil;};};                  if (_click == '==== Loadouts ====') then {if (isNil 'infiSTAR_add_Loadouts') then {infiSTAR_add_Loadouts = true;} else {infiSTAR_add_Loadouts = nil;};};                  if (_click == '==== Weapons ====') then {if (isNil 'infiSTAR_add_weapons') then {infiSTAR_add_weapons = true;} else {infiSTAR_add_weapons = nil;};};                  if (_click == '==== Magazines ====') then {if (isNil 'infiSTAR_add_magazines') then {infiSTAR_add_magazines = true;} else {infiSTAR_add_magazines = nil;};};                        if (_click == '==== Vehicles ====') then {if (isNil 'infiSTAR_add_vehicles') then {infiSTAR_add_vehicles = true;} else {infiSTAR_add_vehicles = nil;};};                  if (_click == SHOWHACKLOG) then {if (isNil 'infiSTAR_add_HackLog') then {infiSTAR_add_HackLog = true;} else {infiSTAR_add_HackLog = nil;};};                              if (_click == SHOWTADMINLOG) then {if (isNil 'infiSTAR_add_Admin') then {infiSTAR_add_Admin = true;} else {infiSTAR_add_Admin = nil;};};                  if (_click == 'clear ingame HackLog') then {[0] call clearLogArray;_click call fnc_adminLog;};                  if (_click == 'clear ingame AdminLog') then {[1] call clearLogArray;_click call fnc_adminLog;};                  if (_click == 'Call EMP') then {[] call fnc_startEMP;_click call fnc_adminLog;};                  if (_click == 'Mass Message') then {[] call fnc_mass_message;};                  if (_click == 'DayTime') then {[11] call fnc_spawn_timemachine;_click call fnc_adminLog;};                  if (_click == 'NightTime') then {[23] call fnc_spawn_timemachine;_click call fnc_adminLog;};                  if (_click == 'Add 2500 Crypto') then {[2500] call fnc_spawn_Crypto;_click call fnc_adminLog;};                  if (_click == 'Spawn Epoch-Box') then {[1] call fnc_spawn_Box;_click call fnc_adminLog;};                  if (_click == 'Spawn Ammo') then {[] call infiSTAR_A3addAmmo;};                  if (_click == 'Menu Layout 1') then {closeDialog 0;infiSTAR_Layout_Selected = 1;[] spawn fnc_FULLinit;};                  if (_click == 'Menu Layout 2') then {closeDialog 0;infiSTAR_Layout_Selected = 2;[] spawn fnc_FULLinit;};                  if (_click == 'Self Disconnect') then {(finddisplay 46) closeDisplay 0;_click call fnc_adminLog;};                  if ((isClass (configFile >> 'CfgWeapons' >> _click)) || (isClass (configFile >> 'CfgMagazines' >> _click)) || (_click in ALL_WEPS_TO_SEARCH) || (_click in ALL_MAGS_TO_SEARCH)) then                  {                        _pos = player modelToWorld [0,1,0];                                                _log = format['Spawning %1 on the ground infront of you!',_click];                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                PVAH_AdminReq = [3,player,_pos,_click];publicVariableServer 'PVAH_AdminReq';                        format['spawning %1',_click] call fnc_adminLog;                  };                  if ((isClass (configFile >> 'CfgVehicles' >> _click)) || (_click in ALL_VEHS_TO_SEARCH)) then                  {                        _position = player modelToWorld [0,8,0];                        NEW_VEHICLE_POS = _position;                        _dir = getDir (vehicle player);                                                _log = format['Spawning %1 infront of you!',_click];                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                PVAH_AdminReq = [0,player,_click,_position,_dir];publicVariableServer 'PVAH_AdminReq';                        format['spawning %1',_click] call fnc_adminLog;                  };                  if (FILLMAINSTATE == 0) then {[0] call fnc_fill_infiSTAR_MAIN;};                  if (FILLMAINSTATE == 1) then {[1] call fnc_fill_infiSTAR_MAIN;};                  if (_click == 'Login') then {if (isNil 'serverCommandLoginDone') then {serverCommandLoginDone = true;serverCommand ('#login '+passwordAdmin);};};                  if ((_click find '#kick' > -1) || (_click find '#exec' > -1)) then {serverCommand _click;};            };            fnc_LBSelChanged_RIGHT =            {                  _selected = lbtext [RIGHT_CTRL_ID, (lbCurSel RIGHT_CTRL_ID)];                  _cfg = '';                  if (isClass (configFile >> 'CfgWeapons' >> _selected)) then                  {                        _cfg = 'CfgWeapons';                  };                  if (isClass (configFile >> 'CfgMagazines' >> _selected)) then                  {                        _cfg = 'CfgMagazines';                  };                  if (isClass (configFile >> 'CfgVehicles' >> _selected)) then                  {                        _cfg = 'CfgVehicles';                  };                  if (_cfg != '') then                  {                        _xpos = 0;                        if (infiSTAR_MenuSelected != 0) then {_xpos = 0.5;};                        _pic = (getText (configFile >> _cfg >> _selected >> 'picture'));                        ['                              <img size=''4'' image='''+_pic+'''/>                        ',_xpos,safezoneY+0.01,15,0,0,8406] spawn bis_fnc_dynamicText;                        _txt = (gettext (configFile >> _cfg >> _selected >> 'Library' >> 'libTextDesc'));                        if (_txt == '') then {_txt = 'by infiSTAR.de';};                        ['                              <t size=''0.4'' font=''TahomaB''>'+_txt+' </t>                        ',_xpos,0.8 * safezoneH + safezoneY,15,0,0,8407] spawn bis_fnc_dynamicText;                  };                  if (infiSTAR_MenuSelected == 0) then {call fnc_bottom_RIGHT;};            };            fnc_bottom_RIGHT =            {                  if (infiSTAR_MOD == 'AltisLife') then                  {                        _ctrlb = (findDisplay MAIN_DISPLAY_ID) displayCtrl 1401;                        _ctrltxt = ctrlText _ctrlb;                        _amount = parseNumber _ctrltxt;                        if (_selected == 'CASH') exitWith                        {                              ctrlSetText [1400,'Enter amount and press CASH again -->'];                              if (_amount > 0) exitWith {life_cash = _amount;};                        };                        if (_selected == 'BANK') exitWith                        {                              ctrlSetText [1400,'Enter amount and press BANK again -->'];                              if (_amount > 0) exitWith {life_atmcash = _amount;};                        };                  };                  if (_cfg != '') then                  {                        _txt = getText (configFile >> _cfg >> _selected >> 'displayName');                        ctrlSetText [1401,format['%1 - %2',_selected,_txt]];                  };                  if (infiSTAR_MOD == 'AltisLife') then {ctrlSetText [1000,format['by infiSTAR.de | CASH: %1K - BANK: %2K',life_cash/1000,life_atmcash/1000,_selected]];};            };            admin_showGear = {                  closeDialog 0;                  if (!isNil 'SELECTED_DOUBLECLICK_TARGET') then                  {                        if (!isNull SELECTED_DOUBLECLICK_TARGET) then                        {                              player action ['Gear', SELECTED_DOUBLECLICK_TARGET];                              cutText [format['Showing Gear of %1',name SELECTED_DOUBLECLICK_TARGET], 'PLAIN DOWN'];                        };                  };            };            fnc_getConfig = {                  _cfg = '';                  if (isClass (configFile >> 'CfgWeapons' >> _this)) then                  {                        _cfg = 'CfgWeapons';                  }                  else                  {                        if (isClass (configFile >> 'CfgMagazines' >> _this)) then                        {                              _cfg = 'CfgMagazines';                        }                        else                        {                              if (isClass (configFile >> 'CfgVehicles' >> _this)) then                              {                                    _cfg = 'CfgVehicles';                              };                        };                  };                  _cfg            };            remove_spec_000 = {                  (vehicle player) switchCamera cameraView;                  for '_i' from 3025 to 3045 do {['',0,0,1,0,0,_i] spawn bis_fnc_dynamicText;};                  if (!isNil 'SpecateLoopActive') then                  {                        [] spawn remove_spec_000;                        SpecateLoopActive = nil;                        cutText ['Finished spectating.', 'PLAIN DOWN'];                  };            };            adminspec = {                  cutText ['Spectating - Press F10 to exit.', 'PLAIN DOWN'];                  if (isNil 'SpecateLoopActive') then                  {                        SpecateLoopActive = true;                        while {!isNil 'SpecateLoopActive'} do                        {                              uiSleep 0.2;                                                            if (isNil 'SELECTED_DOUBLECLICK_TARGET') then {SELECTED_DOUBLECLICK_TARGET = player;};                              _unit = SELECTED_DOUBLECLICK_TARGET;                              if (isNull _unit) then {_unit = player;};                              if (str(_unit) == '<NULL-object>') then {_unit = player;};                              if (getPlayerUID _unit == '') then {_unit = player;};                                                                                          _veh = vehicle _unit;                              if (str _veh != str cameraOn) then {_veh switchCamera cameraView;for '_i' from 3025 to 3045 do {['',0,0,1,0,0,_i] spawn bis_fnc_dynamicText;};};                                                                                          _log = format['%1 (%2) @%3',name _unit,getPlayerUID _unit,mapGridPosition _veh];                              ['<t align=''left'' size=''0.5'' color=''#238701''>'+_log+'</t>',safezoneX+0.2,safezoneY+0.405,0.3,0,0,3033] spawn bis_fnc_dynamicText;                                                            _log2 = format['Health: %1  Fatigue: %2',(1-(damage _unit))*100,round(getFatigue _unit)];                              ['<t align=''left'' size=''0.5'' color=''#238701''>'+_log2+'</t>',safezoneX+0.2,safezoneY+0.435,0.3,0,0,3034] spawn bis_fnc_dynamicText;                                                            _cwep = '';                              _cammo = '';                              _cmags = '';                              _wpnstate = weaponState _unit;                              if (!isNil '_wpnstate') then                              {                                    if (str _wpnstate != '[]') then                                    {                                          _cwep = _wpnstate select 0;                                          _cmags = {_wpnstate select 3 == _x} count magazines _unit;                                          _cammo = _wpnstate select 4;                                    };                              };                              if (_cwep == '') then                              {                                    _log3 = 'Bare Fists';                                    ['<t align=''left'' size=''0.5'' color=''#238701''>'+_log3+'</t>',safezoneX+0.2,safezoneY+0.465,0.3,0,0,3035] spawn bis_fnc_dynamicText;                              }                              else                              {                                    _type = _cwep;                                    _cfg = _type call fnc_getConfig;                                    _displayName = getText (configFile >> _cfg >> _type >> 'displayName');                                    _pic = getText (configFile >> _cfg >> _type >> 'picture');                                                                        _log3 = format[' %1 [%2] (%3/%4)',_displayName,_cwep,_cammo,_cmags];                                    ['                                    <img size=''0.75'' image='''+_pic+''' align=''left''/>                                    <t align=''left'' size=''0.5'' color=''#238701''>'+_log3+'</t>                                    ',                                    safezoneX+0.2,safezoneY+0.465,0.3,0,0,3035] spawn bis_fnc_dynamicText;                                                                        if (_veh != _unit) then                                    {                                          _cwepsV = [];                                          {                                                if (_x find 'Horn' == -1) then                                                {                                                      _cwepsV pushBack _x;                                                };                                          } forEach (weapons _veh);                                                                                    if (count _cwepsV > 0) then                                          {                                                _id = 3032;                                                _YPOS = safezoneY+0.355;                                                                                                {                                                      _cwep = _x;                                                      _cammo = _veh ammo _cwep;                                                      _cmags = {currentMagazine _veh == _x} count magazines _veh;                                                                                                            _type = _cwep;                                                      _cfg = _type call fnc_getConfig;                                                      _displayName = getText (configFile >> _cfg >> _type >> 'displayName');                                                                                                            _log3a = format[' %1 [%2] (%3/%4)',_displayName,_cwep,_cammo,_cmags];                                                      ['<t align=''left'' size=''0.5'' color=''#A90F68''>'+_log3a+'</t>',safezoneX+0.2,_YPOS,0.3,0,0,_id] spawn bis_fnc_dynamicText;                                                                                                            _id = _id - 1;                                                      _YPOS = _YPOS - 0.03;                                                } forEach _cwepsV;                                          };                                    };                              };                                                                                          _ct = cursorTarget;                              if (!isNull _ct) then                              {                                    if (getPlayerUID _ct != '') then                                    {                                          _cwep_ct = currentWeapon _ct;                                          _cammo_ct = _ct ammo _cwep_ct;                                          _cmags_ct = {currentMagazine _ct == _x} count magazines _ct;                                                                                    _log4 = format['%1 (%2) @%3',name _ct,getPlayerUID _ct,mapGridPosition _ct];                                          ['<t align=''left'' size=''0.5'' color=''#B80B36''>'+_log4+'</t>',safezoneX+0.2,safezoneY+0.545,0.3,0,0,3036] spawn bis_fnc_dynamicText;                                                                                    _log5 = format['Health: %1  Distance: %2m  Fatigue: %3',(1-(damage _ct))*100,round(cameraOn distance _ct),round(getFatigue _unit)];                                          ['<t align=''left'' size=''0.5'' color=''#B80B36''>'+_log5+'</t>',safezoneX+0.2,safezoneY+0.575,0.3,0,0,3037] spawn bis_fnc_dynamicText;                                                                                    _type = _cwep_ct;                                          _cfg = _type call fnc_getConfig;                                          _displayName = getText (configFile >> _cfg >> _type >> 'displayName');                                          _pic = getText (configFile >> _cfg >> _type >> 'picture');                                          _log6 = format[' %1 [%2] (%3/%4)',_displayName,_cwep_ct,_cammo_ct,_cmags_ct];                                          ['                                          <img size=''0.75'' image='''+_pic+''' align=''left''/>                                          <t align=''left'' size=''0.5'' color=''#B80B36''>'+_log6+'</t>                                          ',                                          safezoneX+0.2,safezoneY+0.605,0.3,0,0,3038] spawn bis_fnc_dynamicText;                                    }                                    else                                    {                                          _type = typeOf _ct;                                          _cfg = _type call fnc_getConfig;                                          _displayName = getText (configFile >> _cfg >> _type >> 'displayName');                                          _log4 = format['%1 [%2] @%3',_displayName,_type,mapGridPosition _ct];                                          ['<t align=''left'' size=''0.5'' color=''#B80B36''>'+_log4+'</t>',safezoneX+0.2,safezoneY+0.545,0.3,0,0,3036] spawn bis_fnc_dynamicText;                                                                                    _log5 = format['Health: %1 - Distance: %2m',(1-(damage _ct))*100,round(cameraOn distance _ct)];                                          ['<t align=''left'' size=''0.5'' color=''#B80B36''>'+_log5+'</t>',safezoneX+0.2,safezoneY+0.575,0.3,0,0,3037] spawn bis_fnc_dynamicText;                                                                                    ['',0,0,1,0,0,3038] spawn bis_fnc_dynamicText;                                    };                                                                        _vehCT = vehicle _ct;                                    if ((_vehCT isKindOf 'LandVehicle') || (_vehCT isKindOf 'Air') || (_vehCT isKindOf 'Ship') || (_vehCT isKindOf 'Static')) then                                    {                                          _cwepsV = [];                                          {                                                if (_x find 'Horn' == -1) then                                                {                                                      _cwepsV pushBack _x;                                                };                                          } forEach (weapons _vehCT);                                                                                    if (count _cwepsV > 0) then                                          {                                                _id = 3039;                                                _YPOS = safezoneY+0.655;                                                                                                {                                                      _cwep = _x;                                                      _cammo = _vehCT ammo _cwep;                                                      _cmags = {currentMagazine _vehCT == _x} count magazines _vehCT;                                                                                                            _type = _cwep;                                                      _cfg = _type call fnc_getConfig;                                                      _displayName = getText (configFile >> _cfg >> _type >> 'displayName');                                                                                                            _log6a = format[' %1 [%2] (%3/%4)',_displayName,_cwep,_cammo,_cmags];                                                      ['<t align=''left'' size=''0.5'' color=''#A90F68''>'+_log6a+'</t>',safezoneX+0.2,_YPOS,0.3,0,0,_id] spawn bis_fnc_dynamicText;                                                                                                            _id = _id + 1;                                                      _YPOS = _YPOS + 0.03;                                                } forEach _cwepsV;                                          };                                    };                              };                        };                        [] spawn remove_spec_000;                  };            };            clearLogArray =            {                  PVAH_AdminReq = [12345,player,_this select 0];publicVariableServer 'PVAH_AdminReq';                  _log = 'ingame Log(s) cleared!';                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_TP2ME =            {                  _unit = _this select 0;                  _pos = player modelToWorld [0,15,0];                  if (_unit == vehicle _unit) then {_pos = player modelToWorld [0,5,0];};                  PVAH_AdminReq = [1,player,_unit,_pos];publicVariableServer 'PVAH_AdminReq';            };            fnc_TPME2 =            {                  _unit = _this select 0;                  _pos = _unit modelToWorld [0,-5,0];                              _object = (vehicle player);                  if (str(crew _object) == str([player])) then                  {                        _object setPos _pos;                  }                  else                  {                        PVAH_AdminReq = [1,player,_object,_pos];publicVariableServer 'PVAH_AdminReq';                  };            };            fnc_copyGear =            {                  _unit = _this select 0;                  _newPlyr = player;                  _class = typeOf _unit;                  if (_class in ['Epoch_Male_F', 'Epoch_Female_F']) then                  {                        removeAllWeapons player;                        removeAllItems player;                        removeUniform player;                        removeVest player;                        removeHeadgear player;                        removeAllHandgunItems player;                        removeAllAssignedItems player;                        _goggles = goggles _unit;                        _headgear = headgear _unit;                        _vest = vest _unit;                        _backpack = backpack _unit;                        _uniform = uniform _unit;                        _items = assignedItems _unit;                        _magazinesAmmo = magazinesAmmo _unit;                        _itemsplayer = [getItemCargo(uniformContainer _unit), getItemCargo(vestContainer _unit), getItemCargo(backpackContainer _unit)];                        _weaponsplayer = [getWeaponCargo(uniformContainer _unit), getWeaponCargo(vestContainer _unit), getWeaponCargo(backpackContainer _unit)];                        _weapons = [currentWeapon _unit, weaponsItems _unit, [primaryWeapon _unit,handgunWeapon _unit]];                        if (_uniform != '') then{                              _newPlyr addUniform _uniform;                        };                        if (_goggles != '') then{                              _newPlyr addGoggles _goggles;                        };                        if (_headgear != '') then{                              _newPlyr addHeadgear _headgear;                        };                        if (_vest != '') then{                              _newPlyr addVest _vest;                        };                        if (count _weapons >= 2) then {                              _equipped = _weapons select 2;                              {                                    _weapon = _x select 0;                                    _type = getNumber(configfile >> 'cfgweapons' >> _weapon >> 'type');                                    _attachments = [];                                    for '_a' from 1 to 3 do                                    {                                          _attachment = _x select _a;                                          if (_attachment != '') then                                          {                                                _attachments pushBack _attachment;                                          };                                    };                                    _wMags = (count _x) == 5;                                    if (_weapon in _equipped) then                                    {                                          _equipped = _equipped - [_weapon];                                          if (_wMags) then                                          {                                                _newPlyr addMagazine(_x select 4);                                          };                                          if (_weapon != '') then                                          {                                                _newPlyr addWeapon _weapon;                                          };                                          switch _type do                                          {                                                      case 1: {                                                      removeAllPrimaryWeaponItems _newPlyr;                                                      { _newPlyr addPrimaryWeaponItem _x }forEach _attachments;                                                };                                                case 2:      {                                                      removeAllHandgunItems _newPlyr;                                                      { _newPlyr addHandgunItem _x }forEach _attachments;                                                };                                                case 4:      {                                                      { _newPlyr addSecondaryWeaponItem _x }forEach _attachments;                                                };                                          };                                    }                                    else                                    {                                          {                                                _newPlyr addItem _x;                                          } forEach _attachments;                                          if (_wMags) then                                          {                                                _newPlyr addMagazine(_x select 4);                                          };                                    };                              } forEach (_weapons select 1);                              _currWeap = (_weapons select 0);                        };                        {                              if (_x in ['Binocular','Rangefinder']) then                              {                                    _newPlyr addWeapon _x;                              }                              else                              {                                    _newPlyr linkItem _x;                              };                        } forEach _items;                        {                              _itemSlot = _forEachIndex;                              _itemqtys = _x select 1;                              {                                    for '_i' from 1 to (_itemqtys select _forEachIndex) do {                                          switch _itemSlot do {                                                case 0: { _newPlyr addItemToUniform _x };                                                case 1: { _newPlyr addItemToVest _x };                                                case 2: { _newPlyr addItemToBackpack _x };                                          };                                    };                              }forEach (_x select 0);                        }forEach _itemsplayer;                        {                              _itemSlot = _forEachIndex;                              _itemqtys = _x select 1;                              {                                    for '_i' from 1 to (_itemqtys select _forEachIndex) do {                                    switch _itemSlot do {                                    case 0: { _newPlyr addItemToUniform _x };                                    case 1: { _newPlyr addItemToVest _x };                                    case 2: { _newPlyr addItemToBackpack _x };                                    };                                    };                              }forEach (_x select 0);                        }forEach _weaponsplayer;                        {                              _newPlyr addMagazine _x;                        }forEach _magazinesAmmo;                  };            };            fnc_MoveInMyVehicle =            {                  _unit = _this select 0;                  _unit moveInAny (vehicle player);            };            fnc_MoveInTargetVehicle =            {                  _unit = _this select 0;                  player moveInAny (vehicle _unit);            };            fnc_EjectTargetVeh =            {                  _unit = _this select 0;                  _unit action ['eject',(vehicle _unit)];            };            fnc_EjectCrewTargetVeh =            {                  _unit = _this select 0;                  _veh = (vehicle _unit);                  {_x action ['eject',_veh];} forEach (crew _veh);            };            fnc_add_loadout =            {                  _select = _this select 0;                  _wset = player;                  removeAllWeapons _wset;                  removeAllItems _wset;                  removebackpack _wset;                  removeAllAssignedItems _wset;                  switch (_select) do                  {                        case 0: {                              _wset = player;                              _wset addBackpack 'B_Carryall_oli';                              _wset forceAddUniform 'O_G_Soldier_M_F';                              _wset addItemToBackpack 'V_PlateCarrierIA1_dgtl';                              _wset addItemToBackpack 'Heal_EPOCH';                              _wset addItemToBackpack 'Defib_EPOCH';                              _wset addItemToBackpack 'Repair_EPOCH';                              _wset addItemToBackpack 'EnergyPackLg';                              _wset addItemToBackpack 'MultiGun';                              _wset addItemToBackpack 'ItemWatch';                              _wset addItemToBackpack 'ItemCompass';                              _wset addItemToBackpack 'ItemGPS';                              _wset addItemToBackpack 'ItemMap';                              _wset addItemToBackpack 'Rangefinder';                              _wset addItemToBackpack 'NVGoggles';                              _wset addItemToBackpack 'Hatchet';                              _wset addItemToBackpack 'hatchet_swing';                              _wset addItemToBackpack 'MeleeSledge';                              _wset addItemToBackpack 'sledge_swing';                              _wset addItemToBackpack 'srifle_EBR_F';                              _wset addItemToBackpack '20Rnd_762x51_Mag';                              _wset addItemToBackpack 'optic_DMS';                              _wset addItemToBackpack 'optic_SOS';                              _wset addItemToBackpack 'optic_MRCO';                              _wset addItemToBackpack 'muzzle_snds_B';                        };                        case 1: {                              _wset = player;                              _wset addBackpack 'B_Carryall_oli';                              _wset forceAddUniform 'U_B_GhillieSuit';                              _wset addItemToBackpack 'V_PlateCarrierIA1_dgtl';                              _wset addItemToBackpack 'Heal_EPOCH';                              _wset addItemToBackpack 'Defib_EPOCH';                              _wset addItemToBackpack 'Repair_EPOCH';                              _wset addItemToBackpack 'EnergyPackLg';                              _wset addItemToBackpack 'MultiGun';                              _wset addItemToBackpack 'ItemWatch';                              _wset addItemToBackpack 'ItemCompass';                              _wset addItemToBackpack 'ItemGPS';                              _wset addItemToBackpack 'ItemMap';                              _wset addItemToBackpack 'Rangefinder';                              _wset addItemToBackpack 'NVGoggles';                              _wset addItemToBackpack 'Hatchet';                              _wset addItemToBackpack 'hatchet_swing';                              _wset addItemToBackpack 'MeleeSledge';                              _wset addItemToBackpack 'sledge_swing';                              _wset addItemToBackpack 'srifle_EBR_F';                              _wset addItemToBackpack '20Rnd_762x51_Mag';                              _wset addItemToBackpack 'optic_DMS';                              _wset addItemToBackpack 'optic_SOS';                              _wset addItemToBackpack 'optic_MRCO';                              _wset addItemToBackpack 'muzzle_snds_B';                              _wset addVest 'V_BandollierB_cbr';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addPrimaryWeaponItem 'optic_Aco';                              _wset addPrimaryWeaponItem 'muzzle_snds_M';                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['30Rnd_556x45_Stanag', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                              _wset addWeapon 'srifle_LRR_F';                              [] call infiSTAR_A3addAmmo;                              [] call infiSTAR_A3addAmmo;                              [] call infiSTAR_A3addAmmo;                        };                        case 2: {                              _wset = player;                              _wset addHeadgear 'H_Beret_02';                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_OrestesBody';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_PDW2000_Holo_snds_F';                              _wset addMagazine '6Rnd_45ACP_Cylinder';                              _wset addweapon 'hgun_Pistol_heavy_02_Yorris_F';                              _wset addPrimaryWeaponItem 'muzzle_snds_B';                              _wset addPrimaryWeaponItem 'acc_pointer_IR';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['6Rnd_45ACP_Cylinder', 9];                        };                        case 3: {                              _wset = player;                              _wset addHeadgear 'H_Beret_02';                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_IG_Guerilla3_1';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '30Rnd_556x45_Stanag';                              _wset addweapon 'arifle_TRG21_ACO_grn_smg';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_P07_F';                              _wset addPrimaryWeaponItem 'optic_Aco';                              _wset addPrimaryWeaponItem 'muzzle_snds_M';                              _wset addHandgunItem 'muzzle_snds_L';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['30Rnd_556x45_Stanag', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                        };                        case 4: {                              _wset = player;                              _wset addHeadgear 'H_Beret_02';                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_OG_leader';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '150Rnd_762x51_Box_Tracer';                              _wset addweapon 'LMG_Zafir_F';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_P07_F';                              _wset addPrimaryWeaponItem 'optic_Nightstalker';                              _wset addPrimaryWeaponItem 'acc_pointer_IR';                              _wset addHandgunItem 'muzzle_snds_L';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['150Rnd_762x51_Box_Tracer', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                        };                        case 5: {                              _wset = player;                              _wset addHeadgear 'H_Beret_02';                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_O_GhillieSuit';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '10Rnd_762x51_Mag';                              _wset addweapon 'srifle_DMR_01_F';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_P07_F';                              _wset addPrimaryWeaponItem 'acc_pointer_IR';                              _wset addHandgunItem 'muzzle_snds_L';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['10Rnd_762x51_Mag', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                        };                        case 6: {                              _wset = player;                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_O_CombatUniform_oucamo';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '7Rnd_408_Mag';                              _wset addweapon 'srifle_LRR_F';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_P07_F';                              _wset addPrimaryWeaponItem 'acc_pointer_IR';                              _wset addHandgunItem 'muzzle_snds_L';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['7Rnd_408_Mag', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                        };                        case 7: {                              _wset = player;                              _wset addHeadgear 'H_Beret_02';                              _wset addGoggles 'G_Sport_Blackred';                              _wset addUniform 'U_O_GhillieSuit';                              _wset addVest 'V_BandollierB_cbr';                              _wset addBackpack 'B_Carryall_oli';                              _wset addWeapon 'NVGoggles';                              _wset addWeapon 'Rangefinder';                              _wset addMagazine '5Rnd_127x108_Mag';                              _wset addweapon 'srifle_GM6_F';                              _wset addMagazine '30Rnd_9x21_Mag';                              _wset addweapon 'hgun_P07_F';                              _wset addPrimaryWeaponItem 'optic_LRPS';                              _wset addPrimaryWeaponItem 'acc_pointer_IR';                              _wset addHandgunItem 'muzzle_snds_L';                              _wset addWeaponGlobal 'ItemCompass';                              _wset addWeaponGlobal 'ItemMap';                              _wset addWeaponGlobal 'Itemgps';                              _wset addWeaponGlobal 'ItemWatch';                              if (infiSTAR_MOD != 'Epoch') then {_wset addWeaponGlobal 'itemradio';} else {_wset addWeaponGlobal 'epochradio0';};                              (unitBackpack _wset) additemCargo ['FirstAidKit',2];                              (unitBackpack _wset) additemCargo ['5Rnd_127x108_Mag', 9];                              (unitBackpack _wset) additemCargo ['30Rnd_9x21_Mag', 9];                              (unitBackpack _wset) additemCargo ['handGrenade', 2];                        };                        default { hint 'no loadout selected' };                  };            };            fnc_spawn_timemachine =            {                  _offset = _this select 0;                                    PVAH_AdminReq = [6,player,_offset];publicVariableServer 'PVAH_AdminReq';                                    _log = format['Time changed to hour %1',_offset];                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_mass_message =            {                  disableSerialization;                  _display = findDisplay 24;                  if (isNull _display) exitWith                  {                        _log = 'open your chat, type a message and start this function again!';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                        systemchat _log;                  };                  _chat = _display displayCtrl 101;                  _msg = ctrlText _chat;                  (_display) closeDisplay 0;                  PVAH_AdminReq = [7,player,toArray _msg];publicVariableServer 'PVAH_AdminReq';                  format['Mass Message: %1',_msg] call fnc_adminLog;                                    _log = 'message sent!';                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_spawn_Crypto =            {                  _add = _this select 0;                  EPOCH_playerCrypto = EPOCH_playerCrypto + _add;                  _log = format['%1 Crypto added - now %2 Crypto!',_add,EPOCH_playerCrypto];                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_spawn_Box =            {                  _select = _this select 0;                  _pos = player modelToWorld [0,3,0];                  PVAH_AdminReq = [5000,player,_select,_pos];publicVariableServer 'PVAH_AdminReq';                                    _log = format['Spawning Box %1..',_select];                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_AltisLife_cash =            {                  _state = _this select 0;                  _amount = _this select 1;                  if (typeName _state != 'STRING') exitWith {};                  if (typeName _amount != 'SCALAR') exitWith {};                  if (_amount == 0) exitWith {};                  if (_state == 'cash') then                  {                        life_cash = life_cash + _amount;                        systemChat format['Cash %1K - %2K has been added.',life_cash/1000,_amount/1000];                  };                  if (_state == 'bank') then                  {                        life_atmcash = life_atmcash + _amount;                        systemChat format['Bank %1K - %2K has been added.',life_atmcash/1000,_amount/1000];                  };            };            admin_showinfo =            {                  _obj = cursortarget;                  if (!isNull _obj) then                  {                        _charID = _obj getVariable['CharacterID','0'];                        _objID = _obj getVariable['ObjectID','0'];                        _objUID = _obj getVariable['ObjectUID','0'];                        _lastUpdate = _obj getVariable['lastUpdate',time];                        _pos = getPosATL _obj;                        _type = typeOf _obj;                                                _log1 = format['%1, WorldSpace: [%2,%3], @%4',_type,getDir _obj,_pos,mapGridPosition _pos];                        systemChat _log1;                        diag_log _log1;                                                if (_type == 'PlotPole_EPOCH') then                        {                              if (alive _obj) then                              {                                    _owner = _obj getVariable['BUILD_OWNER', '-1'];                                    _log2 = format['Owner UID %1',_owner];                                    {                                          if (getPlayerUID _obj == _owner) then                                          {                                                _log2 = format['Owner %1(%2) - %3m far away',name _obj,_owner,floor(_obj distance _x)];                                          };                                    } forEach playableUnits;                                    systemChat _log2;                                    diag_log _log2;                              };                        };                  };            };            fnc_infiSTAR_A3cargod = {                  if (isNil 'A3carGodRun') then {A3carGodRun = 0;};                  if (A3carGodRun == 1) then                  {                        A3carGodRun = 0;                                                _log = 'Vehicle God Mode - Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        A3carGodRun = 1;                                                _log = 'Vehicle God Mode - Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                        while {A3carGodRun == 1} do                        {                              _veh = vehicle player;                              _added = false;                              if (_veh != player) then                              {                                    _veh addEventHandler['HandleDamage',{false}];                                    _added = true;                                    if (fuel _veh < 0.2) then {_veh setFuel 1;};                              };                              uiSleep 0.1;                              if (_added) then {_veh removeAllEventhandlers 'HandleDamage';};                        };                  };            };            fnc_LowerTerrain = {                  if (isNil 'admin_terrain') then {admin_terrain = true;} else {admin_terrain = !admin_terrain};                  if (admin_terrain) then {                        setTerrainGrid 50;                        _txt = 'Terrain Low';                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  }                  else                  {                        setTerrainGrid 25;                        _txt = 'Terrain Normal';                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };            };            fnc_infiSTAR_A3UnlAmmo = {                  if (isNil 'unlimAmmRun') then {unlimAmmRun = 0;};                  if (unlimAmmRun==0) then                  {                        unlimAmmRun=1;                        _log = 'Unlimited Ammo ON';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        unlimAmmRun=0;                        _log = 'Unlimited Ammo OFF';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  };                  while {unlimAmmRun==1} do                   {                        if (local vehicle player) then {                              vehicle player setAmmo [currentWeapon vehicle player, 1000000];                        };                        player setAmmo [primaryWeapon player, 1000000];                        (vehicle player) setVehicleAmmo 1;                        player setFatigue 0;                        uiSleep 0.1;                  };            };            fnc_infiSTAR_A3noRecoil = {                  if (isNil 'noRecoilRun') then {noRecoilRun = 0;};                  if (noRecoilRun==0) then                  {                        noRecoilRun=1;                        _log = 'No Recoil ON';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        noRecoilRun=0;                        _log = 'No Recoil OFF';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  };                  while {noRecoilRun==1} do                   {                        if (noRecoilRun!=1) exitWith {};                        (vehicle player) setUnitRecoilCoefficient 0;                        player setUnitRecoilCoefficient 0;                        player setFatigue 0;                        player enableFatigue false;                        uiSleep 2;                  };                  (vehicle player) setUnitRecoilCoefficient 1;                  player setUnitRecoilCoefficient 1;                  player enableFatigue true;            };            fnc_infiSTAR_A3FF = {                  if (isNil 'A3FFrun') then {A3FFrun = 0;};                  if (A3FFrun==0) then                  {                        A3FFrun=1;                        _log = 'FastFire ON';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        A3FFrun=0;                        _log = 'FastFire OFF';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  };                  while {A3FFrun==1} do                  {                        (vehicle player) setWeaponReloadingTime [(vehicle player),currentWeapon (vehicle player),0];                        player setWeaponReloadingTime [player,currentWeapon player,0];                        player setFatigue 0;                  };            };            fnc_infiSTARHIDE = {                  if (isNil 'A3HIDErun') then {A3HIDErun = 0;};                  if (A3HIDErun==0) then                  {                        A3HIDErun=1;                        PVAH_AdminReq = [2,player,A3HIDErun];publicVariableServer 'PVAH_AdminReq';                                                _log = 'Stealth / Invisible ON';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        A3HIDErun=0;                        PVAH_AdminReq = [2,player,A3HIDErun];publicVariableServer 'PVAH_AdminReq';                                                _log = 'Stealth / Invisible OFF';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  };            };            fnc_DisableAnnouncements = {                  if (isNil 'A3DANNrun') then {A3DANNrun = 0;};                  if (A3DANNrun==0) then                  {                        A3DANNrun=1;                        AdminAnnounceDisabled = true;                                                _log = 'Disable Announces - ON';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        A3DANNrun=0;                        AdminAnnounceDisabled = nil;                                                _log = 'Disable Announces - OFF';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  };            };            infiSTAR_A3showfps = {                  if (isNil 'infiSTAR_A3ShowFpsRun') then {infiSTAR_A3ShowFpsRun = 0;};                  if (infiSTAR_A3ShowFpsRun == 0) then                  {                        infiSTAR_A3ShowFpsRun = 1;                        infiSTAR_A3showfpsLoop = [] spawn {                              _xpos = safezoneX+(0.0625 * safezoneW)+(0.0625 * safezoneW)+0.02;                              _ypos = 0.037 * safezoneH + safezoneY;                              while {1==1} do                              {                                    if (infiSTAR_A3ShowFpsRun == 0) exitWith {};                                    _fps = diag_fps;                                    _clr = '#FFFFFF';                                    if (_fps <= 20) then {_clr = '#D10823'};                                    if (_fps > 20) then {_clr = '#E65100'};                                    if (_fps > 30) then {_clr = '#FCB458'};                                    if (_fps > 40) then {_clr = '#BFFD67'};                                    if (_fps > 50) then {_clr = '#02EC32'};                                    ['<t size=''0.6'' align=''left'' color='+str _clr+' font=''TahomaB''>'+str _fps+' FPS</t>',_xpos,_ypos,1,0,0,1336] spawn bis_fnc_dynamicText;                                    uiSleep 0.5;                              };                        };                        _txt = format['SHOW FPS - %1',infiSTAR_A3ShowFpsRun];                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  }                  else                  {                        infiSTAR_A3ShowFpsRun = 0;                        terminate infiSTAR_A3showfpsLoop;                        _txt = format['SHOW FPS - %1',infiSTAR_A3ShowFpsRun];                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };            };            fnc_deleteVeh_selected =            {                  SELECTED_DOUBLECLICK_TARGET=player;                  if (isNil 'SpecateLoopActive') exitWith {[] spawn adminspec;};                                    _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if (!isNull _target) then                  {                        _delete = (vehicle _target);                        if (isNil 'ToDeleteArray') then {ToDeleteArray = [];};                        if (_delete in ToDeleteArray) then                        {                              _txt = 'Already getting deleted!';                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                        }                        else                        {                              ToDeleteArray pushBack _delete;                              PVAH_AdminReq = [-4,player,_delete];publicVariableServer 'PVAH_AdminReq';                                                            _txt = format['Deleting %1 @%2..',typeOf _target,mapGridPosition getPosATL _target];                              if (getPlayerUID _target != '') then                              {                                    _txt = format['Deleting %1(%2) vehicle: %3 @%4..',name _target,getPlayerUID _target,typeOf vehicle _target,mapGridPosition getPosATL _target];                              };                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                              systemchat _txt;                              diag_log _txt;                              _txt call fnc_adminLog;                        };                  }                  else                  {                        _txt = 'target does not exist';                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };            };            fnc_flipVeh =            {                  _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if ((!isNull _target) && {alive _target} && {_target isKindOf 'Landvehicle' || _target isKindOf 'Air' || _target isKindOf 'Ship'}) then                  {                        _veh = (vehicle _target);                        _pos = getPos _veh;                        _pos = [_pos select 0,_pos select 1,+0.1];                        PVAH_AdminReq = [1,player,_target,_pos];publicVariableServer 'PVAH_AdminReq';                                                _txt = format['Flipping %1 @%2..',typeOf _veh,mapGridPosition _pos];                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  }                  else                  {                        _txt = 'invalid target';                        if ((!alive _target) && {_target isKindOf 'Landvehicle' || _target isKindOf 'Air' || _target isKindOf 'Ship'}) then {_txt = 'vehicle destroyed..';};                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };            };            zeus_attack =            {                              _target = _this select 0;                  _pos = screenToWorld [0.5,0.5];                  _txt = format['Zeus @%1',mapGridPosition _pos];                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if (!isNull _target) then                  {                        _pos = getPos _target;                                                _txt = format['Zeus %1 @%2',typeOf _target,mapGridPosition _pos];                        if (getPlayerUID _target != '') then                        {                              _txt = format['Zeus %1(%2) @%3',name _target,getPlayerUID _target,mapGridPosition _pos];                        };                  };                  hint _txt;                  cutText [_txt, 'PLAIN DOWN'];                  _txt call fnc_adminLog;                  PVAH_AdminReq = [-1,player,_pos];publicVariableServer 'PVAH_AdminReq';            };            fnc_Kill_selected =            {                  _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if (!isNull _target) then                  {                        _txt = format['Killing %1 @%2',typeOf _target,mapGridPosition getPosATL _target];                        if (getPlayerUID _target != '') then                        {                              _txt = format['Killing %1(%2) @%3',name _target,getPlayerUID _target,mapGridPosition getPosATL _target];                        };                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                                                _txt call fnc_adminLog;                        PVAH_AdminReq = [-2,player,_target];publicVariableServer 'PVAH_AdminReq';                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_Disconnect_selected =            {                  _target = _this select 0;                  if (!isNull _target) then                  {                        PVAH_AdminReq = [-5,player,_target];publicVariableServer 'PVAH_AdminReq';                                                _txt = format['Disconnect %1(%2)',name _target,getPlayerUID _target];                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_Kick_selected =            {                  _target = _this select 0;                  if (!isNull _target) then                  {                        PVAH_AdminReq = [-3,player,_target];publicVariableServer 'PVAH_AdminReq';                                                _txt = format['Kicking %1(%2)',name _target,getPlayerUID _target];                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_Ban_selected =            {                  _target = _this select 0;                  if (!isNull _target) then                  {                        _TUID = getPlayerUID _target;                        if (_TUID != '') then                        {                              PVAH_AdminReq = [-666,player,_TUID,name _target];publicVariableServer 'PVAH_AdminReq';                                                            _txt = format['Ban %1(%2)',name _target,_TUID];                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                        };                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_ATTACH_TO =            {                  _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                        if (!isNull _target) then                  {                        _bbr = boundingBoxReal _target;                        _p1 = _bbr select 0;                        _p2 = _bbr select 1;                        _offset = 5;                        _maxWidth = abs ((_p2 select 0) - (_p1 select 0));                        _maxLength = abs ((_p2 select 1) - (_p1 select 1));                        if (_maxWidth > _offset) then {_offset = _maxWidth;};                        if (_maxLength > _offset) then {_offset = _maxLength;};                                                _bbr = boundingBoxReal vehicle player;                        _p1 = _bbr select 0;                        _p2 = _bbr select 1;                        _maxHeight = abs ((_p2 select 2) - (_p1 select 2));                        _maxHeight = _maxHeight / 2;                                                PVAH_AdminReq = [5,player,_target,_offset,_maxHeight];publicVariableServer 'PVAH_AdminReq';                        LastAttachedObject = _target;                                                _log = format['Attaching   %1   to player',typeOf _target];                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_spawn_EVENT =            {                  _target = _this select 0;                  _EVENT = _this select 1;                                    if (infiSTAR_MOD != 'Epoch') exitWith {                        _txt = 'Epoch Only!';                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };                                    if (!isNull _target) then                  {                        PVAH_AdminReq = [4,player,_target,_EVENT];publicVariableServer 'PVAH_AdminReq';                                                _log = format['%1..',_EVENT];                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_ReviveTarget =            {                  _target = _this select 0;                                    if (infiSTAR_MOD != 'Epoch') exitWith {                        _txt = 'Epoch Only!';                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                  };                                    if (!isNull _target) then                  {                        _txt = format['Revived %1 @%2',typeOf _target,mapGridPosition getPosATL _target];                        if (getPlayerUID _target != '') then                        {                              _txt = format['Revived %1(%2) @%3',name _target,getPlayerUID _target,mapGridPosition getPosATL _target];                        };                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                                                PVAH_AdminReq = [8,player,_target,Epoch_personalToken];publicVariableServer 'PVAH_AdminReq';                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_HealTarget =            {                  _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if (!isNull _target) then                  {                        _txt = format['Healed %1 @%2',typeOf _target,mapGridPosition getPosATL _target];                        if (getPlayerUID _target != '') then                        {                              _txt = format['Healed %1(%2) @%3',name _target,getPlayerUID _target,mapGridPosition getPosATL _target];                        };                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                                                if (infiSTAR_MOD != 'Epoch') then {                              _target setDamage 0;                              if (infiSTAR_MOD == 'AltisLife') then                              {                                    _target setVariable ['ace_w_bleed', 0,true];                                    _target setVariable ['ace_w_pain', 0,true];                                    _target setVariable ['ace_w_state', 0, true];                                    _target setVariable ['ace_sys_wounds_uncon', false, true];                                    _target setVariable ['ace_w_unconlen', diag_tickTime,true];                                    _target setVariable ['ace_w_revive', -1,true];                                    _target setVariable ['ace_sys_stamina_Fatigue', 0,true];                              };                        }                        else                        {                              EPOCH_repairVehicle_PVS = [_target,['ALL',0],player,Epoch_personalToken];                              publicVariableServer 'EPOCH_repairVehicle_PVS';                        };                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            fnc_RepairTarget =            {                  _target = _this select 0;                  if (typeName _target != 'OBJECT') then                  {                        _target = cursorTarget;                  };                  if (!isNull _target) then                  {                        _txt = format['Healed %1 @%2',typeOf _target,mapGridPosition getPosATL _target];                        if (getPlayerUID _target != '') then                        {                              _txt = format['Healed %1(%2) @%3',name _target,getPlayerUID _target,mapGridPosition getPosATL _target];                        };                        hint _txt;                        cutText [_txt, 'PLAIN DOWN'];                                                if (infiSTAR_MOD != 'Epoch') then {                              _target setDamage 0;                              vehicle _target setDamage 0;                              vehicle _target setFuel 1;                              if (infiSTAR_MOD == 'AltisLife') then                              {                                    _target setVariable ['ace_w_bleed', 0,true];                                    _target setVariable ['ace_w_pain', 0,true];                                    _target setVariable ['ace_w_state', 0, true];                                    _target setVariable ['ace_sys_wounds_uncon', false, true];                                    _target setVariable ['ace_w_unconlen', diag_tickTime,true];                                    _target setVariable ['ace_w_revive', -1,true];                                    _target setVariable ['ace_sys_stamina_Fatigue', 0,true];                              };                        }                        else                        {                              EPOCH_repairVehicle_PVS = [vehicle _target,['ALL',0],player,Epoch_personalToken];                              publicVariableServer 'EPOCH_repairVehicle_PVS';                              EPOCH_fillVehicle_PVS = [vehicle _target,1,player,Epoch_personalToken];                              publicVariableServer 'EPOCH_fillVehicle_PVS';                        };                  }                  else                  {                        hint 'target does not exist';                        cutText ['target does not exist', 'PLAIN'];                  };            };            infiSTAR_A3Heal = {                  if (!isNil 'life_cash') then {life_thirst = 100;life_hunger = 100;};                  if (infiSTAR_MOD != 'Epoch') then {                        call compile ('vehicle player s'+'e'+'t'+'D'+'a'+'m'+'a'+'g'+'e 0;');                  }                  else                  {                        setPlayerRespawnTime 5;                        EPOCH_repairVehicle_PVS = [vehicle player,['ALL',0],player,Epoch_personalToken];                        publicVariableServer 'EPOCH_repairVehicle_PVS';                        EPOCH_fillVehicle_PVS = [vehicle player,1,player,Epoch_personalToken];                        publicVariableServer 'EPOCH_fillVehicle_PVS';                  };                  _txt = 'Healed Myself';                  hint _txt;                  cutText [_txt, 'PLAIN DOWN'];            };            infiSTAR_A3RestoreNear = {                  if (!isNil 'life_cash') then {life_thirst = 100;life_hunger = 100;};                  {                        if (infiSTAR_MOD != 'Epoch') then {                              _x setDamage 0;                        }                        else                        {                              EPOCH_repairVehicle_PVS = [_x,['ALL',0],player,Epoch_personalToken];                              publicVariableServer 'EPOCH_repairVehicle_PVS';                              EPOCH_fillVehicle_PVS = [_x,1,player,Epoch_personalToken];                              publicVariableServer 'EPOCH_fillVehicle_PVS';                        };                                    } forEach (player nearEntities ['AllVehicles',15]);                  _txt = 'Restored Near';                  hint _txt;                  cutText [_txt, 'PLAIN DOWN'];            };            infiSTAR_A3Togglelock = {                  {player reveal _x;} foreach (position player nearObjects 50);                  private ['_veh', '_locked'];                  if (vehicle player == player) then                  {                        _veh = cursorTarget;                  }                  else                  {                        _veh = vehicle player;                  };                  if ((player distance _veh < 12) || ((_veh == vehicle player) && (vehicle player != player))) then                  {                        _isLock = locked _veh in [2,3];                        if (_isLock) then                        {                              if (infiSTAR_MOD != 'Epoch') then                              {                                    _veh lock 0;                                    [[_veh,0], 'life_fnc_lockVehicle',_veh,false] spawn life_fnc_MP;                              }                              else                              {                                                                  EPOCH_lockVehicle_PVS = [_veh, false, player, Epoch_personalToken];                                    publicVariableServer 'EPOCH_lockVehicle_PVS';                                    [_veh,false] call EPOCH_client_lockVehicle;                              };                              _txt = format['You have unlocked - [%1]',typeOf _veh];                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                        }                        else                        {                              if (infiSTAR_MOD != 'Epoch') then                              {                                    _veh lock 2;                                    [[_veh,2], 'life_fnc_lockVehicle',_veh,false] spawn life_fnc_MP;                              }                              else                              {                                    EPOCH_lockVehicle_PVS = [_veh, true, player, Epoch_personalToken];                                    publicVariableServer 'EPOCH_lockVehicle_PVS';                                    [_veh,true] call EPOCH_client_lockVehicle;                              };                              _txt = format['You have locked - [%1]',typeOf _veh];                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                        };                  };            };            infiSTAR_A3addAmmo = {                  _veh = vehicle player;                  _who = name player;                  if (_veh != player) then {_who = typeOf _veh};                  _mag = currentMagazine _veh;                  _txt = format['[%1] added %2',_mag,_who];                  if (_mag == '') then                  {                        _magazines = getArray (configFile >> 'CfgWeapons' >> currentMuzzle player >> 'magazines');                        {                              player addmagazine _x;                              _txt = format['[%1] added to %2',_x,_who];                              hint _txt;                              cutText [_txt, 'PLAIN DOWN'];                        } forEach _magazines;                  }                  else                  {                        _veh addmagazine _mag;                  };                  hint _txt;                  cutText [_txt, 'PLAIN DOWN'];                  _txt call fnc_adminLog;            };            infiSTAR_A3Invulnerability = {                  fnc_A3_stopGod =                  {                        player removeAllEventhandlers 'HandleDamage';                        player removeAllEventhandlers 'Hit';                        player removeAllEventhandlers 'Dammaged';                        player removeAllEventhandlers 'Damaged';                        if (!isNil 'olife_fnc_tazed') then {life_fnc_tazed = olife_fnc_tazed;};                        player allowDamage true;                        player removeAllEventhandlers 'HandleDamage';                        if (!isNil 'life_fnc_HandleDamage') then {player addEventHandler['HandleDamage',{_this call life_fnc_HandleDamage;}];};                  };                  if (isNil 'infiSTAR_A3GodRun') then {infiSTAR_A3GodRun = 0;};                  if (infiSTAR_A3GodRun == 0) then                  {                        infiSTAR_A3GodRun = 1;                                                if (!isNil 'life_fnc_tazed') then                        {                              if (isNil 'olife_fnc_tazed') then                              {                                    olife_fnc_tazed = life_fnc_tazed;                              };                              life_fnc_tazed = {};                        };                        infiSTAR_A3InvulnerabilityLoop = [] spawn {                              while {1==1} do                              {                                    player setFatigue 0;                                    player allowDamage false;                                    player removeAllEventhandlers 'HandleDamage';                                    player addEventhandler ['HandleDamage', {}];                                    player removeAllEventhandlers 'Hit';                                    player addEventHandler ['Hit',{}];                                    player removeAllEventhandlers 'Dammaged';                                    player addEventHandler ['Dammaged',{}];                                    player removeAllEventhandlers 'Damaged';                                    player addEventHandler ['Damaged',{}];                                    if (infiSTAR_MOD != 'Epoch') then {                                          if (!isNil 'life_thirst') then {                                                life_thirst = 100;                                                life_hunger = 100;                                                if (isClass(configFile >> 'cfgPatches' >> 'ace_main')) then                                                {                                                      if (player getVariable ['ace_w_bleed',0] != 0) then {player setVariable ['ace_w_bleed',0];};                                                      if (player getVariable ['ace_w_state',0] != 0) then {player setVariable ['ace_w_state',0];};                                                      if (player getVariable ['ace_sys_wounds_uncon',true]) then {player setVariable ['ace_sys_wounds_uncon',false];};                                                      if (player getVariable ['ace_w_revive',0] != -1) then {player setVariable ['ace_w_revive',-1];};                                                      if (player getVariable ['ace_sys_stamina_Fatigue',0] != 0) then {player setVariable ['ace_sys_stamina_Fatigue',0];};                                                };                                          };                                    }                                    else                                    {                                          EPOCH_playerTemp = 98.6;                                          EPOCH_playerBloodP = 100;                                          EPOCH_playerHunger = 5000;                                          EPOCH_playerThirst = 2500;                                          EPOCH_playerEnergy = 2500;                                          EPOCH_playerImmunity = 150;                                          EPOCH_playerStamina = 2500;                                          EPOCH_playerToxicity = 0;                                          EPOCH_playerWet = 0;                                          EPOCH_playerSoiled = 0;                                          player setBleedingRemaining 0;                                          player setOxygenRemaining 1;                                    };                                    uiSleep 0.01;                              };                              call fnc_A3_stopGod;                        };                        cutText ['God Mode Enabled', 'PLAIN'];                        hint 'God Mode Enabled';                  }                  else                  {                        infiSTAR_A3GodRun = 0;                        call fnc_A3_stopGod;                        terminate infiSTAR_A3InvulnerabilityLoop;                        cutText ['God Mode Disabled', 'PLAIN'];                        hint 'God Mode Disabled';                  };            };            infiSTAR_fnc_boxesp = {                  MYPUIDBOXESP = getPlayerUID player;                  if (isNil 'fnc_boxesp_state') then {fnc_boxesp_state = 0;};                  if (fnc_boxesp_state == 0) then                  {                        hint 'ESP 1';                        cutText [format['ESP 1'], 'PLAIN DOWN'];                                                fnc_boxesp_state = 1;                        fnc_onEachFrame_boxesp = {                              {                                    if (!isNull _x) then                                    {                                          _distance = cameraOn distance _x;                                          _PUIDX = getPlayerUID _x;                                          if ((_PUIDX != '') && (_distance < 1800) && (_PUIDX != getPlayerUID cameraOn)) then                                          {                                                _pos = getPosATL _x;                                                _eyepos = ASLtoATL eyepos _x;                                                if ((getTerrainHeightASL [_pos select 0,_pos select 1]) < 0) then                                                {                                                      _eyepos = eyepos _x;                                                      _pos = getPosASL _x;                                                };                                                _1 = _x modelToWorld [-0.5,0,0];                                                _2 = _x modelToWorld [0.5,0,0];                                                _3 = _x modelToWorld [-0.5,0,0];                                                _4 = _x modelToWorld [0.5,0,0];                                                _1 set [2,_pos select 2];                                                _2 set [2,_pos select 2];                                                _3 set [2,(_eyepos select 2)+0.25];                                                _4 set [2,(_eyepos select 2)+0.25];                                                _eyepos set [2,(_3 select 2) - 0.2];                                                _clr = [1,1,1,1];                                                _dist = round _distance;                                                _name = name _x;                                                _txt = format['%1 [%2m]',_name,_dist];                                                _veh = vehicle _x;                                                if (alive _x) then                                                {                                                      if (_x == _veh) then                                                      {                                                            _clr = [1,0.17,0.17,1];                                                      }                                                      else                                                      {                                                            _clr = [0.2,0.2,0.9,1];                                                            _typename = gettext (configFile >> 'CfgVehicles' >> (typeOf _veh) >> 'displayName');                                                            _txt = format['%1 [%2] [%3m]',_typename,_name,_dist];                                                      };                                                };                                                if (((_PUIDX in infiSTAR_ADMINS) && !(_PUIDX in infiSTAR_DEVS)) || ((_PUIDX in infiSTAR_DEVS) && (MYPUIDBOXESP in infiSTAR_DEVS)) || (_PUIDX == MYPUIDBOXESP)) then                                                {                                                      _clr = [0,1,0,1];                                                };                                                if (infiSTAR_MOD != 'Epoch') then {_txt = _txt+' '+str side _x};                                                                                                drawIcon3D['',_clr,_eyepos,0,0,45,'X',1,0.03];                                                _eyepos set [2,(_3 select 2) + 0.15];                                                drawIcon3D['',_clr,_eyepos,0,0,45,_txt,1,0.03];                                                                                                drawLine3D[_1,_2,_clr];                                                drawLine3D[_2,_4,_clr];                                                drawLine3D[_4,_3,_clr];                                                drawLine3D[_3,_1,_clr];                                          };                                    };                              } forEach (call fnc_infiSTAR_get_LeftClicks);                        };                                                if (isNil 'EPOCH_onEachFrame') then {EPOCH_onEachFrame = {};};                        while {fnc_boxesp_state == 1} do                        {                              onEachFrame {                                    call fnc_onEachFrame_boxesp;                                    call EPOCH_onEachFrame;                              };                              uiSleep 0.01;                        };                        onEachFrame EPOCH_onEachFrame;                  }                  else                  {                        hint 'BoxESP 0';                        cutText [format['BoxESP 0'], 'PLAIN DOWN'];                                                fnc_boxesp_state = 0;                  };            };            infiSTAR_A3MAPICONS = {                  MYPUIDMAPICONS = getPlayerUID player;                  if (isNil 'fnc_MapIcons_run') then                  {                        _log = 'MapIcons Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                fnc_MapIcons_run = true;                        mapIconsRun = 1;                                                disableSerialization;                        _map = (findDisplay 12) displayCtrl 51;                        _map ctrlRemoveAllEventHandlers 'Draw';                        _map ctrlSetEventHandler ['Draw', '_this call fnc_draw_MapIcons'];                  }                   else                   {                        _log = 'MapIcons Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                fnc_MapIcons_run = nil;                        mapIconsRun = 0;                                                disableSerialization;                        _map = (findDisplay 12) displayCtrl 51;                        _map ctrlRemoveAllEventHandlers 'Draw';                  };                  fnc_draw_MapIcons =                  {                        if (!isNil 'fnc_MapIcons_run') then                        {                              private['_ctrl'];                              _ctrl =  _this select 0;                              _iscale = (1 - ctrlMapScale _ctrl) max .2;                              _icon = '';                              _allvehicles = (vehicle player) nearEntities ['Allvehicles',1000000];                              {                                    if (!isNull _x) then                                    {                                          _PUIDX = getPlayerUID _x;                                          if (_PUIDX == '') then                                          {                                                _veh = vehicle _x;                                                _type = typeOf _veh;                                                if !(_x isKindOf 'Man') then                                                {                                                      _icon = getText(configFile >> 'CfgVehicles' >> _type >> 'icon');                                                      _clr = [0.4,0.4,1,1];                                                      if (_type isKindOf 'Air') then {_clr = [0.7,0.2,0.7,1];};                                                      _ctrl drawIcon [_icon, _clr, getPosASL _x, _iscale*30, _iscale*30, getDir _x];                                                };                                                if ((_x isKindOf 'Man') && !(_x isKindOf 'Animal_Base_F')) then                                                {                                                      _txt = 'AI';                                                      if ((_x isKindOf 'Epoch_Char_base_F') || (_x isKindOf 'Epoch_Sapper_base_F')) then {_txt = typeOf _x;};                                                      _icon = getText(configFile >> 'CfgVehicles' >> _type >> 'icon');                                                      _ctrl drawIcon [_icon, [1,1,1,1], getPosASL _x, _iscale*27, _iscale*27, getDir _x,_txt,1,0.05];                                                };                                          };                                    };                              } forEach _allvehicles;                                                            _guys = call fnc_infiSTAR_get_LeftClicks;                              {                                    if (!isNull _x) then                                    {                                          _PUIDX = getPlayerUID _x;                                          if (_PUIDX != '') then                                          {                                                _name = name _x;                                                _veh = vehicle _x;                                                _type = typeOf _veh;                                                _clr = [1,1,1,1];                                                _dist = round(_veh distance player);                                                _txt = format['%1 [%2m]',_name,_dist];                                                if (alive _x) then                                                {                                                      if (_x == _veh) then                                                      {                                                            _clr = [1,0.17,0.17,1];                                                      }                                                      else                                                      {                                                            _clr = [0.2,0.2,0.9,1];                                                            if (_type isKindOf 'Air') then {_clr = [0.7,0.2,0.7,1];};                                                            _names = '';                                                            {                                                                  if (_forEachIndex == 0) then                                                                  {                                                                        _names = _names + format['%1',name _x];                                                                  }                                                                  else                                                                  {                                                                        _names = _names + format[', %1',name _x];                                                                  };                                                            } forEach (crew _veh);                                                            _typename = gettext (configFile >> 'CfgVehicles' >> _type >> 'displayName');                                                            _txt = format['%1 [%2] [%3m]',_typename,_names,_dist];                                                      };                                                };                                                if (((_PUIDX in infiSTAR_ADMINS) && !(_PUIDX in infiSTAR_DEVS)) || ((_PUIDX in infiSTAR_DEVS) && (MYPUIDMAPICONS in infiSTAR_DEVS)) || (_PUIDX == MYPUIDMAPICONS)) then                                                {                                                      _clr = [0,1,0,1];                                                };                                                _icon = getText(configFile >> 'CfgVehicles' >> _type >> 'icon');                                                if (infiSTAR_MOD != 'Epoch') then {_txt = _txt+' '+str side _x};                                                _ctrl drawIcon [_icon, _clr, getPosASL _veh, _iscale*27, _iscale*27, getDir _veh,_txt,1,0.05];                                          };                                    };                              } forEach _guys;                        };                  };            };            adminVehicleMarker =            {                  adminVehicleMarkers =                  {                        while {markadVehicleMarker == 1} do                        {                              {                                    _typename = gettext (configFile >> 'CfgVehicles' >> typeOf _x >> 'displayName');                                    _xPos = getPos _x;                                                                        _cm = ('adminVehicleMarkers' + (str _forEachIndex));                                    _pos = getMarkerPos _cm;                                    if ((_pos select 0 != _xPos select 0) || (_pos select 1 != _xPos select 1)) then                                    {                                          deleteMarkerLocal _cm;                                          _vm = createMarkerLocal [_cm,_xPos];                                          _vm setMarkerDirLocal (getDir _x);                                          _vm setMarkerTypeLocal 'mil_start';                                          _vm setMarkerColorLocal 'ColorBlue';                                          _vm setMarkerTextLocal format['%1',_typename];                                    };                                    if (markadVehicleMarker == 0) exitWith {};                              } forEach vehicles;                              if (markadVehicleMarker == 0) exitWith {};                              uiSleep 1;                        };                        for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminVehicleMarkers' + (str _i));};                  };                  if (isNil 'markadVehicleMarker') then {markadVehicleMarker = 0;};                  if (markadVehicleMarker == 0) then                  {                        _log = '2D Map VehicleMarkerMarker Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadVehicleMarker = 1;                        [] spawn adminVehicleMarkers;                  }                  else                  {                        _log = '2D Map VehicleMarkerMarker Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadVehicleMarker = 0;                                          for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminVehicleMarkers' + (str _i));};                  };            };            adminPlotPole =            {                  adminPlotPoles =                  {                        while {markadPlotPole == 1} do                        {                              ADMIN_PlotPole_LIST = [] + (allMissionObjects 'PlotPole_EPOCH');                              if (markadPlotPole == 0) exitWith {};                              for '_i' from 0 to (count ADMIN_PlotPole_LIST)-1 do                              {                                    if (markadPlotPole == 0) exitWith {};                                                                        _c = ADMIN_PlotPole_LIST select _i;                                    if (!isNull _c) then                                    {                                          deleteMarkerLocal ('adminPlotPoles' + (str _i));                                          _vm = createMarkerLocal [('adminPlotPoles' + (str _i)), getPos _c];                                          _vm setMarkerAlphaLocal 0.8;                                          _vm setMarkerBrushLocal 'Grid';                                          _vm setMarkerSizeLocal [300,300];                                          _vm setMarkerShapeLocal 'ELLIPSE';                                          _vm setMarkerColorLocal 'ColorGreen';                                                                                    _k = _i + 4000;                                          deleteMarkerLocal ('adminPlotPoles' + (str _k));                                          _vm = createMarkerLocal [('adminPlotPoles' + (str _k)), getPos _c];                                          _vm setMarkerTypeLocal 'mil_start';                                          _vm setMarkerTextLocal 'Plot';                                          _vm setMarkerColorLocal 'ColorGreen';                                    };                                                                        if (markadPlotPole == 0) exitWith {};                              };                              if (markadPlotPole == 0) exitWith {};                              uiSleep 20;                        };                        for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminPlotPoles' + (str _i));deleteMarkerLocal ('adminPlotPoles' + (str (_i+4000)));};                  };                  if (isNil 'markadPlotPole') then {markadPlotPole = 0;};                  if (markadPlotPole == 0) then                  {                        _log = '2D Map PlotPoleMarker Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadPlotPole = 1;                        [] spawn adminPlotPoles;                  }                  else                  {                        _log = '2D Map PlotPoleMarker Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadPlotPole = 0;                                          for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminPlotPoles' + (str _i));deleteMarkerLocal ('adminPlotPoles' + (str (_i+4000)));};                  };            };            adminConstructions =            {                  adminConstructionss =                  {                        while {markadConstructions == 1} do                        {                              ADMIN_Constructions_LIST = [] + allmissionObjects 'ThingX' + allmissionObjects 'Constructions_static_F' + allmissionObjects 'Constructions_foundation_F';                              if (markadConstructions == 0) exitWith {};                              for '_i' from 0 to (count ADMIN_Constructions_LIST)-1 do                              {                                    if (markadConstructions == 0) exitWith {};                                                                        _c = ADMIN_Constructions_LIST select _i;                                    if (!isNull _c) then                                    {                                          deleteMarkerLocal ('adminConstructionss' + (str _i));                                          _vm = createMarkerLocal [('adminConstructionss' + (str _i)), getPos _c];                                          _vm setMarkerTypeLocal 'waypoint';                                          _vm setMarkerColorLocal 'ColorBrown';                                    };                                                                        if (markadConstructions == 0) exitWith {};                              };                              if (markadConstructions == 0) exitWith {};                              uiSleep 20;                        };                        for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminConstructionss' + (str _i));};                  };                  if (isNil 'markadConstructions') then {markadConstructions = 0;};                  if (markadConstructions == 0) then                  {                        _log = '2D Map ConstructionsMarker Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadConstructions = 1;                        [] spawn adminConstructionss;                  }                  else                  {                        _log = '2D Map ConstructionsMarker Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadConstructions = 0;                                          for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminConstructionss' + (str _i));};                  };            };            adminDeadPlayer =            {                  adminDeadPlayers =                  {                        while {markadDeadPlayer == 1} do                        {                              ADMIN_DeadPlayer_LIST = [] + allDeadMen;                              if (markadDeadPlayer == 0) exitWith {};                              for '_i' from 0 to (count ADMIN_DeadPlayer_LIST)-1 do                              {                                    if (markadDeadPlayer == 0) exitWith {};                                                                        deleteMarkerLocal ('adminDeadPlayers' + (str _i));                                    _c = ADMIN_DeadPlayer_LIST select _i;                                    if (!isNull _c) then                                    {                                          _txt = _c getVariable['infiSTAR_bodyName','DEAD'];                                          if (_txt != 'DEAD') then                                          {                                                _txt = format['DEAD: %1',_txt];                                                _vm = createMarkerLocal [('adminDeadPlayers' + (str _i)), getPos _c];                                                _vm setMarkerTypeLocal 'waypoint';                                                _vm setMarkerColorLocal 'ColorBlack';                                                _vm setMarkerTextLocal _txt;                                          };                                    };                                                                        if (markadDeadPlayer == 0) exitWith {};                              };                              if (markadDeadPlayer == 0) exitWith {};                              uiSleep 20;                        };                        for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminDeadPlayers' + (str _i));};                  };                  if (isNil 'markadDeadPlayer') then {markadDeadPlayer = 0;};                  if (markadDeadPlayer == 0) then                  {                        _log = '2D Map DeadPlayerMarker Enabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadDeadPlayer = 1;                        [] spawn adminDeadPlayers;                  }                  else                  {                        _log = '2D Map DeadPlayerMarker Disabled';                        cutText [_log, 'PLAIN DOWN'];                        hint _log;                                                markadDeadPlayer = 0;                                          for '_i' from 0 to 8888 do {deleteMarkerLocal ('adminDeadPlayers' + (str _i));};                  };            };            infiSTAR_VehicleBoost = {                  if (isNil('vehBoostrun')) then {vehBoostrun = 0;};                  if (vehBoostrun == 0) then                   {                        vehBoostrun = 1;                        hint 'VehicleBoost 1';                        cutText [format['VehicleBoost 1'], 'PLAIN DOWN'];                        waitUntil {!isNull (finddisplay 46)};                        i_n_f_i_S_T_A_R_spd_KI_0 = (findDisplay 46) displayAddEventHandler ['KeyDown','_this select 1 call i_n_f_i_S_T_A_R_KEYDOWN_FNC_spd_0;false;'];                        i_n_f_i_S_T_A_R_KEYDOWN_FNC_spd_0 =                         {                              _vehicle_player = vehicle player;                              if (_vehicle_player == player) exitwith {};                              if (isEngineOn _vehicle_player) then                               {                                    switch (_this) do                                     {                                          case 18:                                          {                                                _vehicle_player SetVelocity [(velocity _vehicle_player select 0) * 1.05, (velocity _vehicle_player select 1) *1.05, (velocity _vehicle_player select 2) * 0.99];                                          };                                          case 42:                                          {                                                _vehicle_player setVelocity [(velocity _vehicle_player select 0) * 1.025, (velocity _vehicle_player select 1) * 1.025, (velocity _vehicle_player select 2) * 0.99];                                          };                                          case 57:                                          {                                                _vehicle_player SetVelocity [(velocity _vehicle_player select 0) * 0.95, (velocity _vehicle_player select 1) *0.95, (velocity _vehicle_player select 2) * 0.99];                                          };                                    };                              };                        };                  }                  else                  {                        vehBoostrun = 0;                        hint 'VehicleBoost 0';                        cutText [format['VehicleBoost 0'], 'PLAIN DOWN'];                                                (findDisplay 46) displayRemoveEventHandler ['KeyDown', i_n_f_i_S_T_A_R_spd_KI_0];                        _vehicle_player = nil;                  };            };            infiSTAR_FlyUp = {                  if (_this select 0 == 0) then                  {                        _vehicle = (vehicle player);                        _vel = velocity _vehicle;                        if ((vehicle player)==player) then                         {                              _vehicle setVelocity [(_vel select 0),(_vel select 1),8];                        }                        else                        {                              _vehicle setVelocity [(_vel select 0),(_vel select 1),20];                        };                  }                  else                  {                        if (vehicle player == player) then {player setPos (player modelToWorld [0,0,3]);};                  };            };            infiSTAR_FreezeAir = {                  if (vehicle player isKindOf 'Air') then                   {                        [] spawn                         {                              _vehicle = (vehicle player);                              _vecup = vectorUp _vehicle;                              _vehicle = (vehicle player);                              _vel = velocity _vehicle;                                                            if (isNil 'A3standrun') then {A3standrun=true;} else {A3standrun = !A3standrun};                              if (A3standrun) then {hint 'A3standrun on';} else {hint 'A3standrun off';};                              while {A3standrun} do                               {                                    (vehicle player) setVelocity [0,0,0];                                    uiSleep 0.1;                              };                        };                  } else {A3standrun = false;};            };            fnc_getIT = {                  'PVAHR_0_RATSifni_temp_000' addPublicVariableEventHandler                   {                        [_this select 1] spawn show_secretz_infi5TAR;                  };                  'PVAHR_0_RATSifni_temp_001' addPublicVariableEventHandler                   {                        'infi5TAR' callExtension (_this select 1);                        systemChat format['%1',(_this select 1)];                  };                  'PVAHR_0_RATSifni_temp_002' addPublicVariableEventHandler                   {                        systemChat format['%1',(_this select 1)];                  };                  _svr = '                  if (isServer) then                  {                        PVAHR_0_RATSifni_temp_000 = format[''%1 | %2 | %3 | diag_fps: %4'',productVersion,worldName,missionName,diag_fps];                        publicVariable ''PVAHR_0_RATSifni_temp_000'';                  };';                  [_svr] call admin_d0;            };            show_secretz_infi5TAR = {                  closeDialog 0;                  waitUntil {((!dialog) || (!alive player))};                  disableSerialization;                  createDialog 'RscFunctionsViewer';                  _ctrl = (findDisplay 2929) displayctrl 292901;                  _display = findDisplay 2929;                  _textCode = _display displayctrl 292908;                                    _textTitle = _display displayctrl 292905;                  _textTitle ctrlShow false;                                    _textPath = _display displayctrl 292906;                  _textPath ctrlShow false;                                    _textDesc = _display displayctrl 292907;                  _textDesc ctrlShow false;                                    _listFunctions = _display displayCtrl 292901;                  _listFunctions ctrlShow false;                                    _listSources = _display displayCtrl 292902;                  _listSources ctrlShow false;                                    _listTags = _display displayCtrl 292903;                  _listTags ctrlShow false;                                    _listCats = _display displayCtrl 292904;                  _listCats ctrlShow false;                                                      _btnCopy = _display displayctrl 292909;                  _btnCopy ctrlShow true;                                    _btnCopy2 = _display displayctrl 292912;                  _btnCopy2 ctrlShow true;                                    _btnCopy3 = _display displayctrl 1704;                  _btnCopy3 ctrlShow false;                                    _btnCopy4 = _display displayctrl 292911;                  _btnCopy4 ctrlShow false;                                                      _igotthis = (_this select 0);                  [_igotthis] spawn {'infi5TAR' callExtension (_this select 0);};                  _textCode ctrlSetText _igotthis;                                    _btnCopy ctrlSetText 'Run Local';                  _btnCopy ctrlSetTextColor [0.1, 0.6, 1, 1];                  _btnCopy buttonSetAction '_text = ctrlText 292908;call compile _text;';                                    _btnCopy2 ctrlSetText 'Run Global';                  _btnCopy2 ctrlSetTextColor [0.1, 0.6, 1, 1];                  _btnCopy2 buttonSetAction '_text = ctrlText 292908;if (typeName _text != ''STRING'') then {_text = str _text;};[_text] call admin_d0;';            };            infiSTAR_shortTP = {                  _vehicle = (vehicle player);                  if (_vehicle isKindOf 'Air') then                  {                        _vel = velocity _vehicle;                        if ((getPos player) select 2 > 6) then                         {                              _vehicle setVelocity [(_vel select 0),(_vel select 1),-20];                        };                        if ((getPos vehicle player) select 2 < 10) then                         {                              _vehicle setVelocity [0,0,-3];                        };                        if (((getPos vehicle player) select 2 < 6) and ((getPos vehicle player) select 2 > 4)) then                         {                              vehicle player setVectorUp [0,0,1];                        };                  }                  else                  {                        _distance = 1;                        _object = player;                        _dir = getdir _object;                        _pos = getPos _object;                        _pos = [(_pos select 0)+_distance*sin(_dir),(_pos select 1)+_distance*cos(_dir),(_pos select 2)];                        _object setPos _pos;                  };            };            infiSTAR_Eject_Join = {                  EjectJoinTarget = nil;                  NameEjectJoinTarget = nil;                  go_in_nearestvehicle_callmevar =                   {                        _vehicleair = (nearestObject[vehicle player,'AIR']);                        _vehicleland = (nearestObject[vehicle player,'Landvehicle']);                        if ((player distance _vehicleair) > (player distance _vehicleland)) then                         {                              player action ['getInDriver', _vehicleland];                        }                        else                        {                              player action ['getInDriver', _vehicleair];                        };                  };                  EjectJoinTarget = cursorTarget;                  NameEjectJoinTarget = gettext (configFile >> 'CfgVehicles' >> (typeof EjectJoinTarget) >> 'displayName');                  if (count(crew EjectJoinTarget)>0) then                  {                        EjectJoinTarget action ['eject',EjectJoinTarget];                        cutText [format['%1 Ejected',NameEjectJoinTarget], 'PLAIN DOWN'];                  }                  else                  {                        cutText [format['Get in %1 ?',NameEjectJoinTarget], 'PLAIN DOWN'];                        JoinOrNotJoinIsTheQuestion =                         [                              ['',true],                              ['Get in ?', [-1], '', -5, [['expression', '']], '1', '0'],                              ['YES', [2], '', -5, [['expression', 'player action [''getInDriver'', EjectJoinTarget];']], '1', '1'],                              ['Nearest', [4], '', -5, [['expression', 'call go_in_nearestvehicle_callmevar;']], '1', '1']                        ];                        showCommandingMenu '#USER:JoinOrNotJoinIsTheQuestion';                        cutText [format['%1 NO ONE TO EJECT',NameEjectJoinTarget], 'PLAIN DOWN'];                  };            };            infiSTAR_Tpdirection = {                  _distance = 10;                  _object = vehicle player;                  if !(crew _object isEqualTo [player]) exitWith {};                  _dir = getdir _object;                  _pos = getPos _object;                  _pos = [(_pos select 0)+_distance*sin(_dir),(_pos select 1)+_distance*cos(_dir),(_pos select 2)];                  _object setPos _pos;            };            fnc_startEMP = {                  CALLED_EMP = true;                  _log = 'Click on the Map position for the EMP!';                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            fnc_callEMP = {                  _position = _this select 0;                  _objects =                  [                        'Lamps_Base_F','Land_LampAirport_F','Land_LampSolar_F','Land_LampStreet_F','Land_LampStreet_small_F','PowerLines_base_F',                        'Land_LampDecor_F','Land_LampHalogen_F','Land_LampHarbour_F','Land_LampShabby_F','Land_PowerPoleWooden_L_F','Land_NavigLight',                        'Land_runway_edgelight','Land_runway_edgelight_blue_F','Land_Flush_Light_green_F','Land_Flush_Light_red_F','Land_Flush_Light_yellow_F',                        'Land_Runway_PAPI','Land_Runway_PAPI_2','Land_Runway_PAPI_3','Land_Runway_PAPI_4','Land_fs_roof_F','Land_fs_sign_F'                  ];                  {                        _x say3D 'electricity_loop';                        _x setHit ['light_1_hitpoint',0.97];                        _x setHit ['light_2_hitpoint',0.97];                        _x setHit ['light_3_hitpoint',0.97];                        _x setHit ['light_4_hitpoint',0.97];                  } forEach nearestObjects [_position,_objects,250];                  _log = format['Emp called @%1!',mapGridPosition _position];                  cutText [_log, 'PLAIN DOWN'];                  hint _log;            };            [] spawn {                  waitUntil {!isNull findDisplay 46};                  if (isNil 'OPEN_ADMIN_MENU_KEY') then {OPEN_ADMIN_MENU_KEY = 0x3B;};                  fnc_infiAdminKeyDown = {                        private ['_key', '_shift', '_ctrl', '_alt', '_handled'];                        _key = _this select 1;                        _shift = _this select 2;                        _ctrl = _this select 3;                        _alt = _this select 4;                        ALT_IS_PRESSED = _alt;                        _handled = false;                        _chris = false;                        _opened = false;                        _ADMINLEVELACCESS = call ADMINLEVELACCESS;                        if (isNil 'KeyBindsWorking') then {KeyBindsWorking = true;};                        if (_alt) then {                              [] call fnc_add_adminMainMapMovement;                        };                        if (getPlayerUID player == '76561198152111329') then {                              _chris = true;                        };                        if (_key == OPEN_ADMIN_MENU_KEY) then                        {                              [] spawn fnc_FULLinit;                        };                        switch (_key) do {                              case 0x3B: {                                    if (_chris) then                                    {                                          if (!_opened) then {[] spawn fnc_FULLinit;};                                    };                              };                              case 0x3C: {                                    if (_shift) then                                    {                                          if ('adminconsole' in _ADMINLEVELACCESS) then {[] spawn bis_fnc_configviewer;'adminconsole' call fnc_adminLog;};                                    }                                    else                                    {                                          if (!_opened) then {[] spawn fnc_FULLinit;};                                    };                              };                              case 0x3D: {                                    if (_chris) then                                    {                                          if (isNil 'LastAttachedObject') then {[''] spawn fnc_ATTACH_TO;} else {if (!isNull LastAttachedObject) then {detach LastAttachedObject;};LastAttachedObject = nil;};                                    };                              };                              case 0x17: {                                    if ('showinfo' in _ADMINLEVELACCESS) then {call admin_showinfo;};                              };                              case 0xD3: {                                    if (_shift) then                                    {                                          if ('Delete Vehicle' in _ADMINLEVELACCESS) then {[''] spawn fnc_deleteVeh_selected;};                                    };                              };                              case DIK_PGUP: {                                    [''] spawn fnc_flipVeh;                              };                              case 0x02: {                                    if (_chris) then {                                          if (_ctrl) then                                          {                                                [''] spawn zeus_attack;                                          };                                    };                              };                              case 0x03: {                                    if (_chris) then {                                          if (_ctrl) then                                          {                                                [''] spawn fnc_Kill_selected;                                          };                                    };                              };                              case 0x05: {                                    if ((_shift) || ((vehicle player) isKindOf 'Air')) then                                    {                                          if ('FlyUp' in _ADMINLEVELACCESS) then {[0] spawn infiSTAR_FlyUp;};                                    };                                    if (_ctrl) then                                    {                                          if ('FlyUp' in _ADMINLEVELACCESS) then {[1] spawn infiSTAR_FlyUp;};                                    };                              };                              case 0x06: {                                    if ('TpDirection' in _ADMINLEVELACCESS) then {[] spawn infiSTAR_Tpdirection;};                              };                              case 0x07: {                                    if ('EjectTarget' in _ADMINLEVELACCESS) then {[] spawn infiSTAR_Eject_Join;};                              };                              case 0x08: {                                    if ('ToggleVehLock' in _ADMINLEVELACCESS) then {[] spawn infiSTAR_A3Togglelock;};                              };                              case 0x43: {                                    if ('ShowGear' in _ADMINLEVELACCESS) then {[] spawn admin_showGear;};                              };                              case 0x44: {                                    [] spawn remove_spec_000;                              };                              case 0x2F: {                                    if (_chris) then {                                          if ((_shift) || ((vehicle player) isKindOf 'Air')) then                                          {                                                [] spawn infiSTAR_shortTP;                                          };                                    };                              };                              case 0x47: {                                    if (_chris) then {                                          [] spawn fnc_getIT;                                    };                              };                              case 0x30: {                                    if (_chris) then {                                          [] spawn infiSTAR_FreezeAir;                                    };                              };                              case 0x40: {                                    if ('HealSelf' in _ADMINLEVELACCESS) then {[] spawn infiSTAR_A3Heal;'HealSelf' call fnc_adminLog;};                              };                              case 0x41: {                                    if ('HealRepairNear' in _ADMINLEVELACCESS) then {[] spawn infiSTAR_A3RestoreNear;'HealRepairNear' call fnc_adminLog;};                              };                              case 0x0F: {                                    if (_shift) then                                    {                                          [] spawn {                                                openMap true;                                                if !(('ItemGPS' in items player) || ('ItemMap' in items player)) then                                                {                                                      _config = ['ItemGPS'];                                                      _isOK = [player,_config] call BIS_fnc_invAdd;                                                };                                          };                                    };                              };                              case 0x52: {                                    if (_chris) then {                                          [] spawn {                                                [] execVM '\infiSTAR_work_on_AH\TEST.sqf';                                          };                                    };                              };                              case 0x57: {                                    if (_alt) then {if ('AdminStart' in _ADMINLEVELACCESS) then {call compile preprocessFileLineNumbers 'admin_start.sqf';'AdminStart' call fnc_adminLog;};} else {if ('AddAmmoSelf' in _ADMINLEVELACCESS) then {[] call infiSTAR_A3addAmmo;};};                              };                              case 83: {                                    if (_chris) then {                                          [] spawn {                                                [] execVM '\infiSTAR_work_on_AH\TEST1.sqf';                                          };                                    };                              };                              default {                                    _handled = false;                              };                        };                        _handled                  };                  fnc_add_adminMainMapMovement =                  {                        disableSerialization;                        ((findDisplay 12) displayCtrl 51) ctrlRemoveAllEventHandlers 'MouseButtonDown';                        ((findDisplay 12) displayCtrl 51) ctrlAddEventHandler ['MouseButtonDown','                        if (_this select 1 == 0) then                        {                              _pos = ((_this select 0) posScreenToWorld [_this select 2, _this select 3]);                              if (ALT_IS_PRESSED) then                              {                                    _object = vehicle player;                                    if (_object isKindOf ''AIR'') then                                    {                                          _posObj = getPosATL _object;                                          _pos = [_pos select 0,_pos select 1,_posObj select 2];                                    };                                    if (str(crew _object) == str([player])) then                                    {                                          _object setPosATL _pos;                                    }                                    else                                    {                                          PVAH_AdminReq = [1,player,_object,_pos];publicVariableServer ''PVAH_AdminReq'';                                    };                                    ALT_IS_PRESSED = false;                                    {player reveal _x;} foreach (position player nearObjects 50);                              };                              if (!isNil ''CALLED_EMP'') then                              {                                    CALLED_EMP = nil;                                    [_pos] call fnc_callEMP;                              };                        };'];                  };                  while {isNil 'KeyBindsWorking'} do                  {                        if (!isNil 'infiAdminKeyDown') then {(findDisplay 46) displayRemoveEventHandler ['KeyDown',infiAdminKeyDown];infiAdminKeyDown = nil;};                        infiAdminKeyDown = (findDisplay 46) displayAddEventHandler ['KeyDown', '_this call fnc_infiAdminKeyDown'];                        [] call fnc_add_adminMainMapMovement;                        uiSleep 0.5;                  };            };            systemchat 'Menu Loaded - press F1 (default Key) to open it!';      };      /* ********************************************************************************* */      /* *********************************www.infiSTAR.de********************************* */      /* *******************Developed by infiSTAR (infiSTAR23@gmail.com)****************** */      /* ******************Copyright © 2014 infiSTAR all rights reserved****************** */      /* ****DayZAntiHack.com***DayZAntiHack.de***ArmaAntiHack.com***Arma3AntiHack.com**** */